<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/1999/xhtml" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:page="http://tjansen.de/refPage" xmlns:i="http://tjansen.de/internal"><head><title>Servlet 2.5 Guide</title><meta http-equiv="X-UA-Compatible" content="chrome=1"/><meta http-equiv="content-language" content="en"/><link rel="shortcut icon" href="../../images/favicon.png" type="image/png"/><link rel="stylesheet" type="text/css" href="../../style/style.css"/><script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-6791190-2']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
})();
</script><script type="text/javascript" src="../../js/all.js"/></head><body id="body"><div id="visibleContent"><div id="top"><a href="/"><img src="../../images/titlebar.png" alt="Jarfiller.com"/></a></div><div id="titleArea"><h1>Servlet 2.5 Guide</h1><p id="titleIntro">Create Dynamic Web Content with the Servlet API</p></div><div id="main"><div id="bodycolumn"><div id="options">Options: <a href="#" onclick="return navToggle();">Table of Content</a>, <a href="overview.xhtml">Multi-Page Version</a></div><h2 id="sec_overview" class="sectionHead"><a name="overview">Overview</a></h2><div class="sectionExpandAll">
			(<a href="#" onclick="&#xA;return showAll([['colla_usecases','sec_usecases'],['colla_requirements','sec_requirements'],['colla_containers','sec_containers'],['colla_httpintro','sec_httpintro'], null]); &#xA;">expand everything</a>)
		</div><div class="subSecRow1" id="sec_intro"><div class="subSecHead" id="sechd_intro"><a class="multipageHeadLink" href="overview.xhtml#intro" name="intro">Intro</a></div><div class="subSecContent" id="seccnt_intro"><p class="subSecExplanation"> The Java Servlet API is a low-level API to <em>extend a web server to generate dynamic content</em>. The API's core is the <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/Servlet.html" class="javadoc">Servlet</a> interface. Classes implementing this interface can <em>receive the client's HTTP request and generate the response</em>. </p><p class="subSecExplanation"> Practically <em>all Java web frameworks are built on the Servlet API</em>. This makes it important to know the basics even when you will never write a servlet. </p><p class="subSecExplanation"> A collection of Servlets, Filters, <a href="#" id="tl-d1104e1327" class="dottedTooltip" onclick="return tpcClick('tl-d1104e1327','pp-d1104e144');" onmouseover="return tpcOver('tl-d1104e1327','pp-d1104e144');" onmouseout="return tpcOut('tl-d1104e1327','pp-d1104e144');">JSPs</a> and static web content that is bundled together in a single directory is called a <em>web application</em>. Web application are usually distributed and deployed in <em>WAR archives</em>. A web server that supports Java web applications is also called <em>web container</em>. </p><p class="subSecExplanation"> The Servlet API has two layers, a generic layer and a HTTP-specific layer. The generic part can also be used for other protocols such as FTP, SIP and SMTP. Non-HTTP servlets are not described in this document. </p></div></div><div id="colla_usecases" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="overview.xhtml#usecases" name="usecases">Use cases</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('usecases');">When should you write a Servlet?</a></div></div></div><div class="subSecRow2" id="sec_usecases" style="display: none"><div class="subSecHead" id="sechd_usecases"><a class="multipageHeadLink" href="overview.xhtml#usecases" name="usecases">Use cases</a></div><div class="subSecContent" id="seccnt_usecases"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('usecases');">When should you write a Servlet?</a></div><p class="subSecExplanation">Practically <em>all Java Web APIs are built on top of the Servlet API</em>. Whenever you write a web application for Java, you <em>need at least basic knowledge of the API</em>. However, it is <em>rarely necessary to implement a <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/Servlet.html" class="javadoc">Servlet</a></em> directly. <br/> Write a Servlet when...</p><ul class="subSecList"><li>you serve <em>document types not supported</em> by frameworks, like images and other binaries</li><li>you need <em>full control</em> over the response, for example to use your own web framework</li><li>you need to work on the <em>HTTP level</em>, for example for writing a <a href="http://en.wikipedia.org/wiki/Proxy_server">proxy</a>.</li></ul><h4 class="subSecMiniHeadline">Alternatives</h4><p class="subSecExplanation">Here are the most common alternatives for pure servlet development. All of them are based on the Servlet API:</p><ul class="subSecList"><li><a href="#" id="tl-d1104e1402" class="dottedTooltip" onclick="return tpcClick('tl-d1104e1402','pp-d1104e144');" onmouseover="return tpcOver('tl-d1104e1402','pp-d1104e144');" onmouseout="return tpcOut('tl-d1104e1402','pp-d1104e144');">JSP</a> are a powerful, Java-centric template system that also allows you to mix HTML with Java code (<a href="#" id="tl-d1104e1405" class="dottedTooltip" onclick="return tlClick('tl-d1104e1405','pp-d1104e1405');" onmouseover="return tlOver('tl-d1104e1405','pp-d1104e1405');" onmouseout="return tlOut('tl-d1104e1405','pp-d1104e1405');">more</a>). Today they are mostly used as a template system for higher-level web application frameworks, but for simple applications <em>JSPs without additional framework can be the fastes solution</em>.</li><li><a href="#" id="tl-d1104e1415" class="dottedTooltip" onclick="return tpcClick('tl-d1104e1415','pp-d1104e217');" onmouseover="return tpcOver('tl-d1104e1415','pp-d1104e217');" onmouseout="return tpcOut('tl-d1104e1415','pp-d1104e217');">JSF</a> is Java EE's high-level web application framework, designed for <em>complex web applications</em>. It is based on the <a href="#" id="tl-d1104e1424" class="dottedTooltip" onclick="return tlClick('tl-d1104e1424','pp-d1104e1427');" onmouseover="return tlOver('tl-d1104e1424','pp-d1104e1427');" onmouseout="return tlOut('tl-d1104e1424','pp-d1104e1427');">MVC</a> pattern, offers web components and multiple output formats.</li><li><a href="#" id="tl-d1104e1432" class="dottedTooltip" onclick="return tpcClick('tl-d1104e1432','pp-d1104e257');" onmouseover="return tpcOver('tl-d1104e1432','pp-d1104e257');" onmouseout="return tpcOut('tl-d1104e1432','pp-d1104e257');">Spring</a> is a popular alternative. It is a complete application framework that also includes support for web applications, among other features. Typically it is used as a <a href="#" id="tl-d1104e1435" class="dottedTooltip" onclick="return tlClick('tl-d1104e1435','pp-d1104e1438');" onmouseover="return tlOver('tl-d1104e1435','pp-d1104e1438');" onmouseout="return tlOut('tl-d1104e1435','pp-d1104e1438');">relatively</a> light-weight alternative to EJB application servers.</li></ul><p class="subSecExplanation">This list is far from complete, and there is an almost endless number of web frameworks for Java. A few additional, notable frameworks: <a href="http://struts.apache.org">Struts</a>, <a href="http://tapestry.apache.org">Tapestry</a>, <a href="http://wicket.apache.org/">Wicket</a> and <a href="http://code.google.com/webtoolkit">GWT</a>. </p></div></div><div id="colla_requirements" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="overview.xhtml#requirements" name="requirements">Requirements</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('requirements');">What do you need for Servlets?</a></div></div></div><div class="subSecRow1" id="sec_requirements" style="display: none"><div class="subSecHead" id="sechd_requirements"><a class="multipageHeadLink" href="overview.xhtml#requirements" name="requirements">Requirements</a></div><div class="subSecContent" id="seccnt_requirements"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('requirements');">What do you need for Servlets?</a></div><p class="subSecExplanation"> In order to run applications written for the Java Servlet API you need a Servlet-capable web container. The most popular choice is <a href="http://tomcat.apache.org">Apache Tomcat</a>, but there are many others. Also, all EJB application server ship with a web container. </p><p class="subSecExplanation"> You web container should include the all JARs that you need to compile your web application (usually a JAR called <span class="idf">servlet-api.jar</span> or <span class="idf">javax.servlet.jar</span>). </p></div></div><div id="colla_containers" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="overview.xhtml#containers" name="containers">Containers</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('containers');">Which container supports which Servlet / JEE version?</a></div></div></div><div class="subSecRow2" id="sec_containers" style="display: none"><div class="subSecHead" id="sechd_containers"><a class="multipageHeadLink" href="overview.xhtml#containers" name="containers">Containers</a></div><div class="subSecContent" id="seccnt_containers"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('containers');">Which container supports which Servlet / JEE version?</a></div><div class="subSecTableDiv"><table><tr><th/><th>Servlet 3.0</th><th>Servlet 2.5</th><th>Servlet 2.4</th></tr><tr><td>JEE Version</td><td>Java EE 6</td><td>Java EE 5</td><td>J2EE 1.3/1.4</td></tr><tr><td>Released</td><td>December 2009</td><td>September 2005</td><td>November 2003</td></tr><tr><td>in Tomcat</td><td>&gt;= 7.0 (*)</td><td>&gt;= 6.0</td><td>&gt;= 5.5</td></tr><tr><td>in Jetty</td><td>&gt;= 8.0 (*)</td><td>&gt;= 6.0</td><td>&gt;= 5.0</td></tr><tr><td>in Glassfish</td><td>&gt;= 3.0</td><td>&gt;= 1.0</td><td>&gt;= 1.0</td></tr><tr><td>in JBoss AS</td><td>&gt;= 6.0 (*)</td><td>&gt;= 4.2</td><td>&gt;= 4.0</td></tr><tr><td>in Resin</td><td>&gt;= 4.0</td><td>&gt;= 3.1</td><td>&gt;= 3.0</td></tr><tr><td>in <a href="#" id="tl-d1104e1589" class="dottedTooltip" onclick="return tlClick('tl-d1104e1589','pp-d1104e1592');" onmouseover="return tlOver('tl-d1104e1589','pp-d1104e1592');" onmouseout="return tlOut('tl-d1104e1589','pp-d1104e1592');">WAS</a></td><td>-</td><td>&gt;= 7.0</td><td>&gt;= 6.0</td></tr></table></div><p class="subSecExplanation">(*) - not stable yet </p></div></div><div id="colla_httpintro" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="overview.xhtml#httpintro" name="httpintro">HTTP Intro</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('httpintro');">Short HTTP Introduction</a></div></div></div><div class="subSecRow1" id="sec_httpintro" style="display: none"><div class="subSecHead" id="sechd_httpintro"><a class="multipageHeadLink" href="overview.xhtml#httpintro" name="httpintro">HTTP Intro</a></div><div class="subSecContent" id="seccnt_httpintro"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('httpintro');">Short HTTP Introduction</a></div><p class="subSecExplanation">HTTP is a relatively simple, text-based protocol:</p><ul class="subSecList"><li>HTTP uses a <em>request/response pattern</em>: <ul><li>the <em>client</em>, usually a web browser, <em>sends requests</em> to the web server.</li><li>The <em>server answers with a response</em>.</li><li>The web <em>server can not send anything to the client</em> without the client initiating the connection and requesting it explicitly.</li></ul> </li><li>Every <em>request consists of a command, a path to the requested resource, a set of headers and an optional body</em> <ul><li>The only important commands are GET, POST and HEAD: <ul><li><em>GET retrieves a document</em>. Web browsers use it when you <em>visit a page</em>.</li><li><em>POST sends data</em>, and also gets a document as response. Web browser use POST when you <em>submit a form</em>.</li><li><em>HEAD simulates a GET without a body in the response</em>. This is important sometimes. For example it allows the browser to find out about a large document before downloading it.</li></ul> </li><li>The <em>path identifies the resource</em> on the server. For example, if you enter the URL "http://jarfiller.com/guide/jaxb/", the requested path is "/guide/jaxb/".</li><li><em>Headers contain additional information</em> about the request. Header values are just string key/value pairs. Usually the web server evaluates them automatically for you. Even though you can access them directly, the Servlet API provides convenience methods to handle important headers (such as cookies). Wikipedia <a href="http://en.wikipedia.org/wiki/List_of_HTTP_headers">has a complete list</a>.</li><li>The <em>POST command needs a document as body</em>. For example, if a user submits a form, the content of the fields will be sent in the body. <em>GET requests do not have a body</em>.</li><li>A request may <em>contain parameters</em>: <ul><li>GET and most other commands support <em>parameters appended to the path</em>, separated by a question mark ("?") from the rest.</li><li>POST sends <em>parameters in the body</em></li><li>parameters are sent as <em>name/value pairs</em>, which looks like this: "param1=value&amp;param2=value&amp;param3=value"... (<a href="#" id="tl-d1104e1733" class="dottedTooltip" onclick="return tlClick('tl-d1104e1733','pp-d1104e1733');" onmouseover="return tlOver('tl-d1104e1733','pp-d1104e1733');" onmouseout="return tlOut('tl-d1104e1733','pp-d1104e1733');">more</a>)</li></ul> </li><li>Example URL with parameters: "http://jarfiller.com/search?query=xml&amp;maxresults=20"</li></ul> </li><li>A <em>response consists of a status code, a set of headers and a body</em> containing a document. <ul><li>The <a href="http://en.wikipedia.org/wiki/List_of_HTTP_status_codes">status code</a> is just a number. The most important ones: <ul><li>200 for success</li><li><a href="http://en.wikipedia.org/wiki/HTTP_301">301</a> forwards the client to a different page</li><li><a href="http://en.wikipedia.org/wiki/HTTP_404">404</a> for unknown paths</li><li><a href="http://en.wikipedia.org/wiki/HTTP_500">500</a> for server errors</li></ul> </li><li><em>Headers contain additional information</em> such as cookies. Header values are just string key/value pairs. Usually the web container will set them automatically for you, so you don't need to know them. Wikipedia <a href="http://en.wikipedia.org/wiki/List_of_HTTP_headers">has a complete list</a>.</li><li>The response body is the document sent to the client. In a web browser, this is the document shown to the user.</li></ul> </li></ul><p class="subSecExplanation">This is what a simple request looks like: </p><pre class="subSecConfig"><a href="#" id="tl-d1104e1796" class="dottedTooltip" onclick="return tlClick('tl-d1104e1796','pp-d1104e1799');" onmouseover="return tlOver('tl-d1104e1796','pp-d1104e1799');" onmouseout="return tlOut('tl-d1104e1796','pp-d1104e1799');">GET /guide/jaxb/ HTTP/1.1</a>
<a href="#" id="tl-d1104e1802" class="dottedTooltip" onclick="return tlClick('tl-d1104e1802','pp-d1104e1805');" onmouseover="return tlOver('tl-d1104e1802','pp-d1104e1805');" onmouseout="return tlOut('tl-d1104e1802','pp-d1104e1805');">Host: jarfiller.com</a>
<a href="#" id="tl-d1104e1808" class="dottedTooltip" onclick="return tlClick('tl-d1104e1808','pp-d1104e1811');" onmouseover="return tlOver('tl-d1104e1808','pp-d1104e1811');" onmouseout="return tlOut('tl-d1104e1808','pp-d1104e1811');">User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.2) Gecko/20100115 Firefox/3.6</a>
<a href="#" id="tl-d1104e1814" class="dottedTooltip" onclick="return tlClick('tl-d1104e1814','pp-d1104e1817');" onmouseover="return tlOver('tl-d1104e1814','pp-d1104e1817');" onmouseout="return tlOut('tl-d1104e1814','pp-d1104e1817');">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</a>
<a href="#" id="tl-d1104e1822" class="dottedTooltip" onclick="return tlClick('tl-d1104e1822','pp-d1104e1825');" onmouseover="return tlOver('tl-d1104e1822','pp-d1104e1825');" onmouseout="return tlOut('tl-d1104e1822','pp-d1104e1825');">Accept-Language: en-us,en;q=0.8,de-de;q=0.5,de;q=0.3</a>
<a href="#" id="tl-d1104e1828" class="dottedTooltip" onclick="return tlClick('tl-d1104e1828','pp-d1104e1831');" onmouseover="return tlOver('tl-d1104e1828','pp-d1104e1831');" onmouseout="return tlOut('tl-d1104e1828','pp-d1104e1831');">Accept-Encoding: gzip,deflate</a>
<a href="#" id="tl-d1104e1835" class="dottedTooltip" onclick="return tlClick('tl-d1104e1835','pp-d1104e1838');" onmouseover="return tlOver('tl-d1104e1835','pp-d1104e1838');" onmouseout="return tlOut('tl-d1104e1835','pp-d1104e1838');">Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7</a>
<a href="#" id="tl-d1104e1841" class="dottedTooltip" onclick="return tlClick('tl-d1104e1841','pp-d1104e1844');" onmouseover="return tlOver('tl-d1104e1841','pp-d1104e1844');" onmouseout="return tlOut('tl-d1104e1841','pp-d1104e1844');">Connection: keep-alive</a>
				</pre><p class="subSecExplanation"> And here is the server's response (the body containing HTML <em>has been omitted</em> in this example): </p><pre class="subSecConfig"><a href="#" id="tl-d1104e1856" class="dottedTooltip" onclick="return tlClick('tl-d1104e1856','pp-d1104e1859');" onmouseover="return tlOver('tl-d1104e1856','pp-d1104e1859');" onmouseout="return tlOut('tl-d1104e1856','pp-d1104e1859');">HTTP/1.1 200 OK</a>
<a href="#" id="tl-d1104e1862" class="dottedTooltip" onclick="return tlClick('tl-d1104e1862','pp-d1104e1865');" onmouseover="return tlOver('tl-d1104e1862','pp-d1104e1865');" onmouseout="return tlOut('tl-d1104e1862','pp-d1104e1865');">Content-Length: 4227</a>
<a href="#" id="tl-d1104e1868" class="dottedTooltip" onclick="return tlClick('tl-d1104e1868','pp-d1104e1871');" onmouseover="return tlOver('tl-d1104e1868','pp-d1104e1871');" onmouseout="return tlOut('tl-d1104e1868','pp-d1104e1871');">Date: Mon, 01 Mar 2010 18:47:48 GMT</a>
<a href="#" id="tl-d1104e1874" class="dottedTooltip" onclick="return tlClick('tl-d1104e1874','pp-d1104e1877');" onmouseover="return tlOver('tl-d1104e1874','pp-d1104e1877');" onmouseout="return tlOut('tl-d1104e1874','pp-d1104e1877');">Content-Type: application/xhtml+xml; q=0.8</a>
<a href="#" id="tl-d1104e1880" class="dottedTooltip" onclick="return tlClick('tl-d1104e1880','pp-d1104e1883');" onmouseover="return tlOver('tl-d1104e1880','pp-d1104e1883');" onmouseout="return tlOut('tl-d1104e1880','pp-d1104e1883');">Server: Apache/2.2.3 (Debian)</a>
<a href="#" id="tl-d1104e1886" class="dottedTooltip" onclick="return tlClick('tl-d1104e1886','pp-d1104e1889');" onmouseover="return tlOver('tl-d1104e1886','pp-d1104e1889');" onmouseout="return tlOut('tl-d1104e1886','pp-d1104e1889');">Last-Modified: Fri, 26 Feb 2010 19:28:08 GMT</a>
<a href="#" id="tl-d1104e1893" class="dottedTooltip" onclick="return tlClick('tl-d1104e1893','pp-d1104e1896');" onmouseover="return tlOver('tl-d1104e1893','pp-d1104e1896');" onmouseout="return tlOut('tl-d1104e1893','pp-d1104e1896');">Accept-Ranges: bytes</a>
				</pre><p class="subSecExplanation"> An important HTTP concept is the <em>content type</em>, also known as MIME type. It describes the type of document transmitted as body. Basically it is like a file extension, but it can also be used for documents that your servlet created on the fly and thus do not have a file extension. Here are the most important content types:</p><div class="subSecTableDiv"><table><tr><th>Content Type</th><th>File Extension</th><th>Name</th></tr><tr><td>text/html</td><td>.html, .htm</td><td>HTML</td></tr><tr><td>application/xhtml+xml</td><td>.xhtml</td><td>XHTML</td></tr><tr><td>text/plain</td><td>.txt</td><td>Plain text file</td></tr><tr><td>application/pdf</td><td>.pdf</td><td>PDF</td></tr><tr><td>image/png</td><td>.png</td><td>PNG images</td></tr><tr><td>image/jpeg</td><td>.jpg, .jpeg</td><td>JPEG images</td></tr><tr><td>image/gif</td><td>.gif</td><td>GIF images</td></tr></table></div><p class="subSecExplanation">Find a <a href="http://www.iana.org/assignments/media-types/">more types on Wikipedia</a>. </p></div></div><h2 id="sec_servlets" class="sectionHead"><a name="servlets">Servlets</a></h2><div class="sectionExpandAll">
			(<a href="#" onclick="&#xA;return showAll([['colla_servicemethods','sec_servicemethods'],['colla_lifecycle','sec_lifecycle'],['colla_twothreadsafeways','sec_twothreadsafeways'],['colla_applayout','sec_applayout'],['colla_eclipse','sec_eclipse'],['colla_ant','sec_ant'],['colla_tomcat','sec_tomcat'], null]); &#xA;">expand everything</a>)
		</div><div class="subSecRow2" id="sec_servletintro"><div class="subSecHead" id="sechd_servletintro"><a class="multipageHeadLink" href="servlets.xhtml#servletintro" name="servletintro">Servlet Intro</a></div><div class="subSecContent" id="seccnt_servletintro"><p class="subSecExplanation">Servlets are <em>classes that handle HTTP requests</em> and generate a response for the client. To have a Servlet ready for deployment, you need to do four things:</p><ol class="subSecList"><li>Write the servlet class (must extend <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html" class="javadoc">HttpServlet</a>)</li><li>Declare the servlet in your <a href="#" id="tl-d1104e2009" class="dottedTooltip" onclick="return tlClick('tl-d1104e2009','pp-d1104e2012');" onmouseover="return tlOver('tl-d1104e2009','pp-d1104e2012');" onmouseout="return tlOut('tl-d1104e2009','pp-d1104e2012');">web.xml</a> deployment descriptor</li><li>Define one or more <a href="#" id="tl-d1104e2026" class="dottedTooltip" onclick="return tlClick('tl-d1104e2026','pp-d1104e2029');" onmouseover="return tlOver('tl-d1104e2026','pp-d1104e2029');" onmouseout="return tlOut('tl-d1104e2026','pp-d1104e2029');">url patterns</a> that the servlet responds to</li><li>Package your whole application in a <a href="#" id="tl-d1104e2035" class="dottedTooltip" onclick="return tlClick('tl-d1104e2035','pp-d1104e2039');" onmouseover="return tlOver('tl-d1104e2035','pp-d1104e2039');" onmouseout="return tlOut('tl-d1104e2035','pp-d1104e2039');">WAR</a> file.</li></ol></div></div><div class="subSecRow1" id="sec_classoverview"><div class="subSecHead" id="sechd_classoverview"><a class="multipageHeadLink" href="servlets.xhtml#classoverview" name="classoverview">Class Overview</a></div><div class="subSecContent" id="seccnt_classoverview"><div class="subSecTableDiv"><table><tr><th>Base Interface</th><th>HTTP-specific Class</th><th>Purpose</th></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/Servlet.html" class="javadoc">Servlet</a></td><td><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html" class="javadoc">HttpServlet</a></td><td>Base interface to <em>implement for handling requests</em></td></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html" class="javadoc">ServletRequest</a></td><td><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a></td><td>Represents the request</td></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html" class="javadoc">ServletResponse</a></td><td><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a></td><td>Creates a response</td></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletConfig.html" class="javadoc">ServletConfig</a></td><td>-</td><td>Retrieving initialization parameters, servlet name</td></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html" class="javadoc">ServletContext</a></td><td>-</td><td>Access to web container features: resources, attributes, logging, dispatcher</td></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/Filter.html" class="javadoc">Filter</a></td><td>-</td><td>Modify a request before processing, or a response after processing</td></tr><tr><td>*Listener</td><td>Http*Listener</td><td>Notifications about various events in the application</td></tr><tr><td>-</td><td><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpSession.html" class="javadoc">HttpSession</a></td><td>Keeps state for a single client</td></tr></table></div></div></div><div class="subSecRow2" id="sec_servletclass"><div class="subSecHead" id="sechd_servletclass"><a class="multipageHeadLink" href="servlets.xhtml#servletclass" name="servletclass">Servlet Class</a><br/>(<a href="#" id="tl-d1104e2146" class="dottedTooltip" onclick="return tlClick('tl-d1104e2146','pp-d1104e2151');" onmouseover="return tlOver('tl-d1104e2146','pp-d1104e2151');" onmouseout="return tlOut('tl-d1104e2146','pp-d1104e2151');">more</a>)
		</div><div class="subSecContent" id="seccnt_servletclass"><pre class="subSecCode"><code>package com.jarfiller.example;
import <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/package-summary.html" class="javadoc">javax.servlet.http.*</a>;
import <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/package-summary.html" class="javadoc">javax.servlet.*</a>;
import <a href="http://java.sun.com/javase/6/docs/api/java/io/package-summary.html" class="javadoc">java.io.*</a>;

<span class="cmt">// Simple dummy servlet with the most important methods</span>
public class SkeletonServlet extends <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html" class="javadoc">HttpServlet</a> {

    public SkeletonServlet() {               <span class="cmt">// <em>default constructor required</em> (<a href="#" id="tl-d1104e2230" class="dottedTooltip" onclick="return tlClick('tl-d1104e2230','pp-d1104e2230');" onmouseover="return tlOver('tl-d1104e2230','pp-d1104e2230');" onmouseout="return tlOut('tl-d1104e2230','pp-d1104e2230');">more</a>)</span>
    }

    @Override
    public void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#init(javax.servlet.ServletConfig)" class="javadoc">init</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletConfig.html" class="javadoc">ServletConfig</a> config)   <span class="cmt">// <em>invoked before first request</em> (<a href="#" id="tl-d1104e2277" class="dottedTooltip" onclick="return tlClick('tl-d1104e2277','pp-d1104e2277');" onmouseover="return tlOver('tl-d1104e2277','pp-d1104e2277');" onmouseout="return tlOut('tl-d1104e2277','pp-d1104e2277');">more</a>)</span>
        throws <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletException.html" class="javadoc">ServletException</a> {
        super.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#init(javax.servlet.ServletConfig)" class="javadoc">init</a>(config);                  <span class="cmt">// required when overriding <span class="idf">init</span>!</span>
        <span class="cmt">// do all initialization here</span>
    }

    @Override
    protected void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
        throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a>, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletException.html" class="javadoc">ServletException</a> {
        <span class="cmt">// handle HTTP GET requests here</span>
    }

    @Override
    protected void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doPost</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
        throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a>, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletException.html" class="javadoc">ServletException</a> {
        <span class="cmt">// handle HTTP POST requests here</span>
    }

    @Override
    public void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#destroy()" class="javadoc">destroy</a>() {                  <span class="cmt">// invoked before server discards the servlet (<a href="#" id="tl-d1104e2406" class="dottedTooltip" onclick="return tlClick('tl-d1104e2406','pp-d1104e2406');" onmouseover="return tlOver('tl-d1104e2406','pp-d1104e2406');" onmouseout="return tlOut('tl-d1104e2406','pp-d1104e2406');">more</a>)</span>
        <span class="cmt">// release resources here</span>
    }
}
</code></pre></div></div><div id="colla_servicemethods" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="servlets.xhtml#servicemethods" name="servicemethods">Service Method</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('servicemethods');">Service Dispatching in the HttpServlet</a></div></div></div><div class="subSecRow1" id="sec_servicemethods" style="display: none"><div class="subSecHead" id="sechd_servicemethods"><a class="multipageHeadLink" href="servlets.xhtml#servicemethods" name="servicemethods">Service Method</a></div><div class="subSecContent" id="seccnt_servicemethods"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('servicemethods');">Service Dispatching in the HttpServlet</a></div><p class="subSecExplanation">The skeleton servlet above showed you methods like <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a> and <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doPost</a> to process requests. They are provided by the <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html" class="javadoc">HttpServlet</a> class, and overriding those methods is what you should do in 99% of all servlets.</p><p class="subSecExplanation">However, the actual <em><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/Servlet.html" class="javadoc">Servlet</a> interface is protocol agnostic</em> and thus does not know anything about the HTTP protocol and its commands, nor will it provide <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> and <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> objects, which are also HTTP-specific. Instead, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/Servlet.html" class="javadoc">Servlet</a> has a single method called <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/Servlet.html#service(javax.servlet.ServletRequest, javax.servlet.ServletResponse)" class="javadoc">service</a> which will be invoked for every request:</p><pre class="subSecCode"><code>void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/Servlet.html#service(javax.servlet.ServletRequest, javax.servlet.ServletResponse)" class="javadoc">service</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html" class="javadoc">ServletRequest</a> req, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html" class="javadoc">ServletResponse</a> res);
</code></pre><p class="subSecExplanation"><em><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html" class="javadoc">HttpServlet</a> overrides <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/Servlet.html#service(javax.servlet.ServletRequest, javax.servlet.ServletResponse)" class="javadoc">service</a> and will call one of the <span class="idf">doCommandName</span> methods</em> (<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>...), depending on the command of the request. It will also cast the generic request and response objects into HTTP-specific responses. </p></div></div><div id="colla_lifecycle" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="servlets.xhtml#lifecycle" name="lifecycle">Servlet Lifecyle</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('lifecycle');">The Servlet Lifecycle</a></div></div></div><div class="subSecRow2" id="sec_lifecycle" style="display: none"><div class="subSecHead" id="sechd_lifecycle"><a class="multipageHeadLink" href="servlets.xhtml#lifecycle" name="lifecycle">Servlet Lifecyle</a></div><div class="subSecContent" id="seccnt_lifecycle"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('lifecycle');">The Servlet Lifecycle</a></div><p class="subSecExplanation">The lifecyle of a servlet:</p><ol class="subSecList"><li>Class instantiation with the empty default constructor</li><li><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#init(javax.servlet.ServletConfig)" class="javadoc">init</a> method invoked</li><li>processing with <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doPost</a> etc (<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#service(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">service</a> methods)</li><li><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#destroy()" class="javadoc">destroy</a> method invoked</li></ol></div></div><div class="subSecRow1" id="sec_multithreading"><div class="subSecHead" id="sechd_multithreading"><a class="multipageHeadLink" href="servlets.xhtml#multithreading" name="multithreading">Multithreading</a></div><div class="subSecContent" id="seccnt_multithreading"><p class="subSecExplanation"> Servlets are multi-threaded. This means that the web server will call the service methods (<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doPost</a>...) from several threads, and thus your <em>servlet implementation must be thread-safe</em>.<br/> The next section shows you <a href="#twothreadsafeways" onclick="if (event.button == 0) return goTo('#twothreadsafeways', true); else return true;">two easy ways to make your servlets multi-threaded</a>. </p></div></div><div id="colla_twothreadsafeways" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="servlets.xhtml#twothreadsafeways" name="twothreadsafeways"/></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('twothreadsafeways');">Two Simple Ways to Write Thread-Safe Servlets</a></div></div></div><div class="subSecRow2" id="sec_twothreadsafeways" style="display: none"><div class="subSecHead" id="sechd_twothreadsafeways"><a class="multipageHeadLink" href="servlets.xhtml#twothreadsafeways" name="twothreadsafeways"/></div><div class="subSecContent" id="seccnt_twothreadsafeways"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('twothreadsafeways');">Two Simple Ways to Write Thread-Safe Servlets</a></div><p class="subSecExplanation"> Here are two <em>recipes that allow you to write thread-safe servlets</em> without knowing anything about multi-threading (<a href="#" id="tl-d1104e2593" class="dottedTooltip" onclick="return tlClick('tl-d1104e2593','pp-d1104e2593');" onmouseover="return tlOver('tl-d1104e2593','pp-d1104e2593');" onmouseout="return tlOut('tl-d1104e2593','pp-d1104e2593');">more</a>). </p><h4 class="subSecMiniHeadline">Recipe 1: Synchronize your Servlet</h4><p class="subSecExplanation">To make your servlet thread-safe, just <em>declare all overriden methods as <span class="idf">synchronized</span></em> (<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#init(javax.servlet.ServletConfig)" class="javadoc">init</a>, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#destroy()" class="javadoc">destroy</a>, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>...). This is the easiest way, but also means that you can <em>process only one request at a time</em>. Synchronizing the whole servlet is only feasible for low-volume sites. </p><p class="subSecExplanation"> The following example shows how to synchronize a Servlet so that only one thread runs in it at a time. Note that there is no constructor, but Java's default constructor will be taken. If you would provide an constructor, you'd need to put the code into a <span class="idf">synchronize</span> block with 'this' as synchronization object (<a href="#" id="tl-d1104e2624" class="dottedTooltip" onclick="return tlClick('tl-d1104e2624','pp-d1104e2624');" onmouseover="return tlOver('tl-d1104e2624','pp-d1104e2624');" onmouseout="return tlOut('tl-d1104e2624','pp-d1104e2624');">more</a>).</p><pre class="subSecCode"><code>public class SynchronizedSkeletonServlet extends <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html" class="javadoc">HttpServlet</a> {

    @Override
    public <em>synchronized</em> void init(ServletConfig config) {
        super.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#init(javax.servlet.ServletConfig)" class="javadoc">init</a>(config);
        <span class="cmt">// do all initialization here</span>
    }

    @Override
    protected <em>synchronized</em> void doGet(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
        throws IOException {
        <span class="cmt">// handle HTTP GET requests here</span>
    }
}
</code></pre><h4 class="subSecMiniHeadline">Recipe 2: Restrict Usage of Fields</h4><p class="subSecExplanation">Alternatively, restrict the use of fields and follow these simple five rules (<a href="#" id="tl-d1104e2703" class="dottedTooltip" onclick="return tlClick('tl-d1104e2703','pp-d1104e2703');" onmouseover="return tlOver('tl-d1104e2703','pp-d1104e2703');" onmouseout="return tlOut('tl-d1104e2703','pp-d1104e2703');">more</a>):</p><ol class="subSecList"><li>All fields in the <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/Servlet.html" class="javadoc">Servlet</a> class <em>must be <span class="idf">volatile</span></em>.</li><li><em>Only <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#init(javax.servlet.ServletConfig)" class="javadoc">init</a> can set and modify fields</em> (including objects reachable by those fields).</li><li>The <em>service methods</em> (<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doPost</a>...) can read the <span class="idf">volatile</span> fields, but <em>must not modify</em> any field.</li><li>Data in attributes, sessions etc must be treated like <span class="idf">volatile</span> members: write them in the <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#init(javax.servlet.ServletConfig)" class="javadoc">init</a> method, read-only access in the service methods.</li><li>Constant fields with <span class="idf">final</span> modifier are allowed, but can only be modified in the constructor.</li></ol><p class="subSecExplanation">Of course, the easiest way to achieve this is to <em>have no fields in your servlet class</em>, and to work only with local variables.</p><p class="subSecExplanation">This example shows a simple servlet that initializes a local field in <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#init(javax.servlet.ServletConfig)" class="javadoc">init</a>.</p><pre class="subSecCode"><code>public class RedirectServlet extends <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html" class="javadoc">HttpServlet</a> {

    private <em>volatile</em> String <em>newLocation</em>;

    @Override
    public void init(ServletConfig config) {
        super.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#init(javax.servlet.ServletConfig)" class="javadoc">init</a>(config);

        <em>newLocation</em> = config.getInitParameter("redirectUrl");
    }

    @Override
    protected void doGet(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
        throws IOException {
        response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html#sendRedirect(java.lang.String)" class="javadoc">sendRedirect</a>(<em>newLocation</em>);  <span class="cmt">// sends client to the configured URL</span>
    }
}
</code></pre></div></div><div class="subSecRow1" id="sec_webapplications"><div class="subSecHead" id="sechd_webapplications"><a class="multipageHeadLink" href="servlets.xhtml#webapplications" name="webapplications">Web Applications</a></div><div class="subSecContent" id="seccnt_webapplications"><p class="subSecExplanation"> To deploy your servlet in a web container, you need to package it as a web application and store it in a WAR file. WARs are <em><a href="#" id="tl-d1104e2865" class="dottedTooltip" onclick="return tpcClick('tl-d1104e2865','pp-d1104e184');" onmouseover="return tpcOver('tl-d1104e2865','pp-d1104e184');" onmouseout="return tpcOut('tl-d1104e2865','pp-d1104e184');">JARs</a> with a special file layout</em> and a ".war" extension. They also require a <em>deployment descriptor file called <span class="idf">web.xml</span></em> which must be located at <span class="idf">/WEB-INF/web.xml</span> in the WAR. </p><h4 class="subSecMiniHeadline">Web Application Layout</h4><div class="subSecTableDiv"><table><tr><th>Path Pattern</th><th>Description</th></tr><tr><td>/*</td><td>Static content (HTML, images, stylesheets..) and <a href="#" id="tl-d1104e2894" class="dottedTooltip" onclick="return tpcClick('tl-d1104e2894','pp-d1104e144');" onmouseover="return tpcOver('tl-d1104e2894','pp-d1104e144');" onmouseout="return tpcOut('tl-d1104e2894','pp-d1104e144');">JSPs</a> (<a href="#" id="tl-d1104e2897" class="dottedTooltip" onclick="return tlClick('tl-d1104e2897','pp-d1104e2897');" onmouseover="return tlOver('tl-d1104e2897','pp-d1104e2897');" onmouseout="return tlOut('tl-d1104e2897','pp-d1104e2897');">more</a>)</td></tr><tr><td>/WEB-INF/*</td><td>All data except static content</td></tr><tr><td>/WEB-INF/web.xml</td><td>Deployment descriptor (<a href="#webxml" onclick="if (event.button == 0) return goTo('#webxml', true); else return true;">shown below</a>)</td></tr><tr><td>/WEB-INF/classes/</td><td>The application's Java classes (e.g. your servlet class)</td></tr><tr><td>/WEB-INF/lib/*.jar</td><td>Libraries required by the application</td></tr><tr><td>/META-INF/*</td><td>optional <a href="#" id="tl-d1104e2935" class="dottedTooltip" onclick="return tpcClick('tl-d1104e2935','pp-d1104e184');" onmouseover="return tpcOver('tl-d1104e2935','pp-d1104e184');" onmouseout="return tpcOut('tl-d1104e2935','pp-d1104e184');">JAR</a> descriptors, vendor extensions (<a href="#" id="tl-d1104e2938" class="dottedTooltip" onclick="return tlClick('tl-d1104e2938','pp-d1104e2938');" onmouseover="return tlOver('tl-d1104e2938','pp-d1104e2938');" onmouseout="return tlOut('tl-d1104e2938','pp-d1104e2938');">more</a>)</td></tr></table></div><p class="subSecExplanation">There are <em>no required files</em> or directories for WARs. A WAR containing only static files does not need <span class="idf">WEB-INF</span> at all.</p><h4 class="subSecMiniHeadline">Creating the Web Application / WAR</h4><p class="subSecExplanation">To create a WAR, you need to</p><ul class="subSecList"><li>Copy your classes, libraries and static files into the directory structure shown above</li><li>Create a deployment descriptor at /WEB-INF/web.xml (<a href="#webxml" onclick="if (event.button == 0) return goTo('#webxml', true); else return true;">see below</a>)</li><li>Put the whole directory into a WAR archive (<a href="#" id="tl-d1104e2980" class="dottedTooltip" onclick="return tlClick('tl-d1104e2980','pp-d1104e2980');" onmouseover="return tlOver('tl-d1104e2980','pp-d1104e2980');" onmouseout="return tlOut('tl-d1104e2980','pp-d1104e2980');">more</a>)</li></ul><p class="subSecExplanation">If you use an IDE (such as Eclipse or Netbeans), <em>the IDE will help you assemble the WAR</em>, so you don't have to do this manually.<br/> Also, many application servers allow you to copy the directory directly instead of the deploying a WAR file. This makes deployment faster during development. </p></div></div><div class="subSecRow2" id="sec_webxml"><div class="subSecHead" id="sechd_webxml"><a class="multipageHeadLink" href="servlets.xhtml#webxml" name="webxml">web.xml</a></div><div class="subSecContent" id="seccnt_webxml"><p class="subSecExplanation">You need to <em>declare all servlets in the <span class="idf">web.xml</span> deployment descriptor</em>. </p><p class="subSecExplanation">Here is a very simple <span class="idf">web.xml</span>, declaring only one servlet and mapping it onto a path:</p><pre class="subSecConfig">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
<span class="tag">&lt;<a href="#" id="tl-d1104e3021" class="tooltip" onclick="return tlClick('tl-d1104e3021','pp-d1104e314');" onmouseover="return tlOver('tl-d1104e3021','pp-d1104e314');" onmouseout="return tlOut('tl-d1104e3021','pp-d1104e314');">web-app</a> <a href="#" id="tl-d1104e3023" class="tooltip" onclick="return tlClick('tl-d1104e3023','pp-d1104e321');" onmouseover="return tlOver('tl-d1104e3023','pp-d1104e321');" onmouseout="return tlOut('tl-d1104e3023','pp-d1104e321');">xmlns</a>="http://java.sun.com/xml/ns/j2ee"
         <a href="#" id="tl-d1104e3026" class="tooltip" onclick="return tlClick('tl-d1104e3026','pp-d1104e323');" onmouseover="return tlOver('tl-d1104e3026','pp-d1104e323');" onmouseout="return tlOut('tl-d1104e3026','pp-d1104e323');">xmlns:xsi</a>="http://www.w3.org/2001/XMLSchema-instance"
         <a href="#" id="tl-d1104e3029" class="tooltip" onclick="return tlClick('tl-d1104e3029','pp-d1104e328');" onmouseover="return tlOver('tl-d1104e3029','pp-d1104e328');" onmouseout="return tlOut('tl-d1104e3029','pp-d1104e328');">xsi:schemaLocation</a>="http://java.sun.com/xml/ns/j2ee
                             http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
         <a href="#" id="tl-d1104e3032" class="tooltip" onclick="return tlClick('tl-d1104e3032','pp-d1104e288');" onmouseover="return tlOver('tl-d1104e3032','pp-d1104e288');" onmouseout="return tlOut('tl-d1104e3032','pp-d1104e288');">version</a>="2.4"&gt;</span>
         
    <span class="cmt">&lt;!--  Declare the servlet class  --&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e3039" class="tooltip" onclick="return tlClick('tl-d1104e3039','pp-d1104e420');" onmouseover="return tlOver('tl-d1104e3039','pp-d1104e420');" onmouseout="return tlOut('tl-d1104e3039','pp-d1104e420');">servlet</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e3042" class="tooltip" onclick="return tlClick('tl-d1104e3042','pp-d1104e431');" onmouseover="return tlOver('tl-d1104e3042','pp-d1104e431');" onmouseout="return tlOut('tl-d1104e3042','pp-d1104e431');">servlet-name</a>&gt;</span>timeServlet1<span class="tag">&lt;/<a href="#" id="tl-d1104e3045" class="tooltip" onclick="return tlClick('tl-d1104e3045','pp-d1104e431');" onmouseover="return tlOver('tl-d1104e3045','pp-d1104e431');" onmouseout="return tlOut('tl-d1104e3045','pp-d1104e431');">servlet-name</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e3048" class="tooltip" onclick="return tlClick('tl-d1104e3048','pp-d1104e436');" onmouseover="return tlOver('tl-d1104e3048','pp-d1104e436');" onmouseout="return tlOut('tl-d1104e3048','pp-d1104e436');">servlet-class</a>&gt;</span>com.jarfiller.example.TimeServlet<span class="tag">&lt;/<a href="#" id="tl-d1104e3051" class="tooltip" onclick="return tlClick('tl-d1104e3051','pp-d1104e436');" onmouseover="return tlOver('tl-d1104e3051','pp-d1104e436');" onmouseout="return tlOut('tl-d1104e3051','pp-d1104e436');">servlet-class</a>&gt;</span>
    <span class="tag">&lt;/<a href="#" id="tl-d1104e3053" class="tooltip" onclick="return tlClick('tl-d1104e3053','pp-d1104e420');" onmouseover="return tlOver('tl-d1104e3053','pp-d1104e420');" onmouseout="return tlOut('tl-d1104e3053','pp-d1104e420');">servlet</a>&gt;</span>
    
    <span class="cmt">&lt;!--  Declare the URL path handled by this servlet (<a href="#" id="tl-d1104e3057" class="dottedTooltip" onclick="return tlClick('tl-d1104e3057','pp-d1104e3057');" onmouseover="return tlOver('tl-d1104e3057','pp-d1104e3057');" onmouseout="return tlOut('tl-d1104e3057','pp-d1104e3057');">more</a>)  --&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e3068" class="tooltip" onclick="return tlClick('tl-d1104e3068','pp-d1104e478');" onmouseover="return tlOver('tl-d1104e3068','pp-d1104e478');" onmouseout="return tlOut('tl-d1104e3068','pp-d1104e478');">servlet-mapping</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e3071" class="tooltip" onclick="return tlClick('tl-d1104e3071','pp-d1104e481');" onmouseover="return tlOver('tl-d1104e3071','pp-d1104e481');" onmouseout="return tlOut('tl-d1104e3071','pp-d1104e481');">servlet-name</a>&gt;</span>timeServlet1<span class="tag">&lt;/<a href="#" id="tl-d1104e3075" class="tooltip" onclick="return tlClick('tl-d1104e3075','pp-d1104e481');" onmouseover="return tlOver('tl-d1104e3075','pp-d1104e481');" onmouseout="return tlOut('tl-d1104e3075','pp-d1104e481');">servlet-name</a>&gt;</span> <span class="cmt">&lt;!-- <em>much match servlet-name</em> above! --&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e3082" class="tooltip" onclick="return tlClick('tl-d1104e3082','pp-d1104e312');" onmouseover="return tlOver('tl-d1104e3082','pp-d1104e312');" onmouseout="return tlOut('tl-d1104e3082','pp-d1104e312');">url-pattern</a>&gt;</span>/now<span class="tag">&lt;/<a href="#" id="tl-d1104e3085" class="tooltip" onclick="return tlClick('tl-d1104e3085','pp-d1104e312');" onmouseover="return tlOver('tl-d1104e3085','pp-d1104e312');" onmouseout="return tlOut('tl-d1104e3085','pp-d1104e312');">url-pattern</a>&gt;</span>
    <span class="tag">&lt;/<a href="#" id="tl-d1104e3087" class="tooltip" onclick="return tlClick('tl-d1104e3087','pp-d1104e478');" onmouseover="return tlOver('tl-d1104e3087','pp-d1104e478');" onmouseout="return tlOut('tl-d1104e3087','pp-d1104e478');">servlet-mapping</a>&gt;</span>
<span class="tag">&lt;/<a href="#" id="tl-d1104e3089" class="tooltip" onclick="return tlClick('tl-d1104e3089','pp-d1104e314');" onmouseover="return tlOver('tl-d1104e3089','pp-d1104e314');" onmouseout="return tlOut('tl-d1104e3089','pp-d1104e314');">web-app</a>&gt;</span>
		</pre><p class="subSecExplanation">For details on <span class="idf">web.xml</span>, visit Jarfiller's <a href="../../reference/webxml2x/">Web.xml Reference</a>.</p></div></div><div id="colla_applayout" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="servlets.xhtml#applayout" name="applayout">Example Layout</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('applayout');">Example Application Layout</a></div></div></div><div class="subSecRow1" id="sec_applayout" style="display: none"><div class="subSecHead" id="sechd_applayout"><a class="multipageHeadLink" href="servlets.xhtml#applayout" name="applayout">Example Layout</a></div><div class="subSecContent" id="seccnt_applayout"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('applayout');">Example Application Layout</a></div><p class="subSecExplanation"> As example, here all files of a web application called <span class="idf">timeapp.war</span>:</p><div class="subSecTableDiv"><table><tr><th>File</th><th>Description</th></tr><tr><td>/index.html</td><td>Default page</td></tr><tr><td>/images/clock.png</td><td>An Image (clock)</td></tr><tr><td>/images/logo.png</td><td>An Image (clock)</td></tr><tr><td>/WEB-INF/web.xml</td><td>Deployment descriptor</td></tr><tr><td>/WEB-INF/classes/com/jarfiller/example/TimeServlet.class</td><td>The servlet class</td></tr><tr><td>/WEB-INF/classes/com/jarfiller/example/Helper.class</td><td>Some other class</td></tr><tr><td>/WEB-INF/lib/joda-time.jar</td><td>A library for the servlet</td></tr></table></div></div></div><div class="subSecRow2" id="sec_contextroot"><div class="subSecHead" id="sechd_contextroot"><a class="multipageHeadLink" href="servlets.xhtml#contextroot" name="contextroot">Context Root</a></div><div class="subSecContent" id="seccnt_contextroot"><p class="subSecExplanation">The <em>context root is the web application's path on the web server</em>. All paths that you configure in <span class="idf">web.xml</span> are <em>relative to the context root</em>. The context root needs to be <em>set in the web container</em> (<a href="#" id="tl-d1104e3192" class="dottedTooltip" onclick="return tlClick('tl-d1104e3192','pp-d1104e3192');" onmouseover="return tlOver('tl-d1104e3192','pp-d1104e3192');" onmouseout="return tlOut('tl-d1104e3192','pp-d1104e3192');">more</a>). </p><p class="subSecExplanation"> Let's assume you have a web container running on <a href="http://en.wikipedia.org/wiki/Localhost">localhost</a> port 8080, and you set the context root to 'myapp'. Then all static files and all url patterns are relative to the URL "http://localhost:8080/myapp/".<br/> If you don't want your application to reside in a directory, you <em>must set your context root to '/'</em>. </p></div></div><div class="subSecRow1" id="sec_staticcontent"><div class="subSecHead" id="sechd_staticcontent"><a class="multipageHeadLink" href="servlets.xhtml#staticcontent" name="staticcontent">Static Content</a></div><div class="subSecContent" id="seccnt_staticcontent"><p class="subSecExplanation">All files in a WAR file (except <span class="idf">/WEB-INF/*</span> and <span class="idf">/META-INF/*</span>) will automatically be <em>served by the web server as static files</em>, located at the application's base URL (<a href="#" id="tl-d1104e3230" class="dottedTooltip" onclick="return tlClick('tl-d1104e3230','pp-d1104e3230');" onmouseover="return tlOver('tl-d1104e3230','pp-d1104e3230');" onmouseout="return tlOut('tl-d1104e3230','pp-d1104e3230');">more</a>).</p><h4 class="subSecMiniHeadline">Content Type / MIME Type Mapping</h4><p class="subSecExplanation">The server determines the content type (MIME type) of static files from their extension. The specification does not require the container to know any extensions, unless you define <em>content type mappings in your <span class="idf">web.xml</span> deployment descriptor</em>:</p><pre class="subSecConfig"><span class="tag">&lt;<a href="#" id="tl-d1104e3247" class="tooltip" onclick="return tlClick('tl-d1104e3247','pp-d1104e493');" onmouseover="return tlOver('tl-d1104e3247','pp-d1104e493');" onmouseout="return tlOut('tl-d1104e3247','pp-d1104e493');">mime-mapping</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e3250" class="tooltip" onclick="return tlClick('tl-d1104e3250','pp-d1104e495');" onmouseover="return tlOver('tl-d1104e3250','pp-d1104e495');" onmouseout="return tlOut('tl-d1104e3250','pp-d1104e495');">extension</a>&gt;</span>html<span class="tag">&lt;/<a href="#" id="tl-d1104e3253" class="tooltip" onclick="return tlClick('tl-d1104e3253','pp-d1104e495');" onmouseover="return tlOver('tl-d1104e3253','pp-d1104e495');" onmouseout="return tlOut('tl-d1104e3253','pp-d1104e495');">extension</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e3255" class="tooltip" onclick="return tlClick('tl-d1104e3255','pp-d1104e497');" onmouseover="return tlOver('tl-d1104e3255','pp-d1104e497');" onmouseout="return tlOut('tl-d1104e3255','pp-d1104e497');">mime-type</a>&gt;</span>text/html<span class="tag">&lt;/<a href="#" id="tl-d1104e3258" class="tooltip" onclick="return tlClick('tl-d1104e3258','pp-d1104e497');" onmouseover="return tlOver('tl-d1104e3258','pp-d1104e497');" onmouseout="return tlOut('tl-d1104e3258','pp-d1104e497');">mime-type</a>&gt;</span>
<span class="tag">&lt;/<a href="#" id="tl-d1104e3260" class="tooltip" onclick="return tlClick('tl-d1104e3260','pp-d1104e493');" onmouseover="return tlOver('tl-d1104e3260','pp-d1104e493');" onmouseout="return tlOut('tl-d1104e3260','pp-d1104e493');">mime-mapping</a>&gt;</span>
<span class="tag">&lt;<a href="#" id="tl-d1104e3263" class="tooltip" onclick="return tlClick('tl-d1104e3263','pp-d1104e493');" onmouseover="return tlOver('tl-d1104e3263','pp-d1104e493');" onmouseout="return tlOut('tl-d1104e3263','pp-d1104e493');">mime-mapping</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e3266" class="tooltip" onclick="return tlClick('tl-d1104e3266','pp-d1104e495');" onmouseover="return tlOver('tl-d1104e3266','pp-d1104e495');" onmouseout="return tlOut('tl-d1104e3266','pp-d1104e495');">extension</a>&gt;</span>xhtml<span class="tag">&lt;/<a href="#" id="tl-d1104e3269" class="tooltip" onclick="return tlClick('tl-d1104e3269','pp-d1104e495');" onmouseover="return tlOver('tl-d1104e3269','pp-d1104e495');" onmouseout="return tlOut('tl-d1104e3269','pp-d1104e495');">extension</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e3271" class="tooltip" onclick="return tlClick('tl-d1104e3271','pp-d1104e497');" onmouseover="return tlOver('tl-d1104e3271','pp-d1104e497');" onmouseout="return tlOut('tl-d1104e3271','pp-d1104e497');">mime-type</a>&gt;</span>application/xhtml+xml<span class="tag">&lt;/<a href="#" id="tl-d1104e3274" class="tooltip" onclick="return tlClick('tl-d1104e3274','pp-d1104e497');" onmouseover="return tlOver('tl-d1104e3274','pp-d1104e497');" onmouseout="return tlOut('tl-d1104e3274','pp-d1104e497');">mime-type</a>&gt;</span>
<span class="tag">&lt;/<a href="#" id="tl-d1104e3276" class="tooltip" onclick="return tlClick('tl-d1104e3276','pp-d1104e493');" onmouseover="return tlOver('tl-d1104e3276','pp-d1104e493');" onmouseout="return tlOut('tl-d1104e3276','pp-d1104e493');">mime-mapping</a>&gt;</span>
				</pre><p class="subSecExplanation">In practice, common file types such as HTML and PNG are known to containers though, and you don't have to define them (hardly anyone does).</p><h4 class="subSecMiniHeadline">Welcome Files</h4><p class="subSecExplanation">You can <em>define welcome files</em>, which are the names of files which will be shown when a user requests a directory (<a href="#" id="tl-d1104e3291" class="dottedTooltip" onclick="return tlClick('tl-d1104e3291','pp-d1104e3291');" onmouseover="return tlOver('tl-d1104e3291','pp-d1104e3291');" onmouseout="return tlOut('tl-d1104e3291','pp-d1104e3291');">more</a>). Without them, the server shows a <span class="idf">404 Not Found</span> error. This is a welcome file definition for <span class="idf">web.xml</span>: </p><pre class="subSecConfig"><span class="tag">&lt;<a href="#" id="tl-d1104e3302" class="tooltip" onclick="return tlClick('tl-d1104e3302','pp-d1104e499');" onmouseover="return tlOver('tl-d1104e3302','pp-d1104e499');" onmouseout="return tlOut('tl-d1104e3302','pp-d1104e499');">welcome-file-list</a>&gt;</span>  <span class="cmt">&lt;!-- ordered by preference --&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e3308" class="tooltip" onclick="return tlClick('tl-d1104e3308','pp-d1104e501');" onmouseover="return tlOver('tl-d1104e3308','pp-d1104e501');" onmouseout="return tlOut('tl-d1104e3308','pp-d1104e501');">welcome-file</a>&gt;</span>index.jsp<span class="tag">&lt;/<a href="#" id="tl-d1104e3311" class="tooltip" onclick="return tlClick('tl-d1104e3311','pp-d1104e501');" onmouseover="return tlOver('tl-d1104e3311','pp-d1104e501');" onmouseout="return tlOut('tl-d1104e3311','pp-d1104e501');">welcome-file</a>&gt;</span>    
    <span class="tag">&lt;<a href="#" id="tl-d1104e3313" class="tooltip" onclick="return tlClick('tl-d1104e3313','pp-d1104e501');" onmouseover="return tlOver('tl-d1104e3313','pp-d1104e501');" onmouseout="return tlOut('tl-d1104e3313','pp-d1104e501');">welcome-file</a>&gt;</span>index.xhtml<span class="tag">&lt;/<a href="#" id="tl-d1104e3316" class="tooltip" onclick="return tlClick('tl-d1104e3316','pp-d1104e501');" onmouseover="return tlOver('tl-d1104e3316','pp-d1104e501');" onmouseout="return tlOut('tl-d1104e3316','pp-d1104e501');">welcome-file</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e3319" class="tooltip" onclick="return tlClick('tl-d1104e3319','pp-d1104e501');" onmouseover="return tlOver('tl-d1104e3319','pp-d1104e501');" onmouseout="return tlOut('tl-d1104e3319','pp-d1104e501');">welcome-file</a>&gt;</span>index.html<span class="tag">&lt;/<a href="#" id="tl-d1104e3322" class="tooltip" onclick="return tlClick('tl-d1104e3322','pp-d1104e501');" onmouseover="return tlOver('tl-d1104e3322','pp-d1104e501');" onmouseout="return tlOut('tl-d1104e3322','pp-d1104e501');">welcome-file</a>&gt;</span>
<span class="tag">&lt;/<a href="#" id="tl-d1104e3324" class="tooltip" onclick="return tlClick('tl-d1104e3324','pp-d1104e499');" onmouseover="return tlOver('tl-d1104e3324','pp-d1104e499');" onmouseout="return tlOut('tl-d1104e3324','pp-d1104e499');">welcome-file-list</a>&gt;</span></pre><p class="subSecExplanation"/></div></div><div id="colla_eclipse" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="servlets.xhtml#eclipse" name="eclipse">Eclipse</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('eclipse');">How to Create a Web Application with Eclipse</a></div></div></div><div class="subSecRow2" id="sec_eclipse" style="display: none"><div class="subSecHead" id="sechd_eclipse"><a class="multipageHeadLink" href="servlets.xhtml#eclipse" name="eclipse">Eclipse</a></div><div class="subSecContent" id="seccnt_eclipse"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('eclipse');">How to Create a Web Application with Eclipse</a></div><p class="subSecExplanation"> Eclipse offers great support for web applications:</p><ul class="subSecList"><li>Create a '<em>Dynamic Web Project</em>' for web applications.</li><li>The <em>'Dynamic Web Module Version' is the Servlet API version</em>. Select "2.5".</li><li>All <em>files in <span class="idf">/WebContent</span> will be copied into the WAR</em>, in addition to all compiled classes. Use it for static files.</li><li>Eclipse can <em>run and debug your web application directly in a local Tomcat</em> server and most other containers (<a href="#" id="tl-d1104e3370" class="dottedTooltip" onclick="return tlClick('tl-d1104e3370','pp-d1104e3370');" onmouseover="return tlOver('tl-d1104e3370','pp-d1104e3370');" onmouseout="return tlOut('tl-d1104e3370','pp-d1104e3370');">more</a>).</li><li>Use 'Export..' with a 'Web/WAR file' destination to create a WAR.</li></ul></div></div><div id="colla_ant" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="servlets.xhtml#ant" name="ant">Ant Packaging</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('ant');">How to Create a Web Application (WAR) with Ant</a></div></div></div><div class="subSecRow1" id="sec_ant" style="display: none"><div class="subSecHead" id="sechd_ant"><a class="multipageHeadLink" href="servlets.xhtml#ant" name="ant">Ant Packaging</a></div><div class="subSecContent" id="seccnt_ant"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('ant');">How to Create a Web Application (WAR) with Ant</a></div><p class="subSecExplanation"> Use <a href="http://ant.apache.org/">Ant</a>'s <a href="http://ant.apache.org/manual/CoreTasks/war.html">war</a> task to create WAR files. You only need to specify the location of the WAR, the web.xml and your files: </p><pre class="subSecConfig">&lt;war destfile="build/timeapp.war" webxml="WebContent/WEB-INF/web.xml"&gt;
    &lt;fileset dir="WebContent/"/&gt;     &lt;!-- Copy static files --&gt;
    &lt;lib dir="lib/"/&gt;                &lt;!-- Copy all libraries (*.jar) --&gt;
    &lt;classes dir="build/classes/"/&gt;  &lt;!-- Copy classes --&gt;
&lt;/war&gt;   
				</pre></div></div><div id="colla_tomcat" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="servlets.xhtml#tomcat" name="tomcat">Tomcat</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('tomcat');">How to Deploy a Web Application on Tomcat</a></div></div></div><div class="subSecRow2" id="sec_tomcat" style="display: none"><div class="subSecHead" id="sechd_tomcat"><a class="multipageHeadLink" href="servlets.xhtml#tomcat" name="tomcat">Tomcat</a></div><div class="subSecContent" id="seccnt_tomcat"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('tomcat');">How to Deploy a Web Application on Tomcat</a></div><p class="subSecExplanation">Deployment of web applications in Tomcat is very easy:</p><ul class="subSecList"><li>To deploy an application, <em>copy the WAR into Tomcat's <span class="idf">webapps</span> directory</em>. The application will start automatically.</li><li>Alternatively, you can also <em>copy web application directories</em> (extracted WARs) into <span class="idf">webapps</span>.</li><li>You can configure your application either <em>by editing Tomcat's <span class="idf">conf/context.xml</span> file</em>, or by putting a file <span class="idf">/META-INF/context.xml</span> into your web application. Read Tomcat's <a href="http://tomcat.apache.org/tomcat-6.0-doc/config/context.html">Context Configuration documentation</a>.</li><li>The <em>context root is the application's WAR file name</em> (without extension) if you copied a WAR, or the directory name for directories. If the WAR file is called <span class="idf">ROOT.war</span> (or you copy a directory called <span class="idf">ROOT</span>), it will be deployed with the context root "/".</li></ul></div></div><h2 id="sec_responses" class="sectionHead"><a name="responses">Responses</a></h2><div class="subSecRow1" id="sec_textoutput"><div class="subSecHead" id="sechd_textoutput"><a class="multipageHeadLink" href="responses.xhtml#textoutput" name="textoutput">Text Output</a><br/>(<a href="#" id="tl-d1104e3483" class="dottedTooltip" onclick="return tlClick('tl-d1104e3483','pp-d1104e3488');" onmouseover="return tlOver('tl-d1104e3483','pp-d1104e3488');" onmouseout="return tlOut('tl-d1104e3483','pp-d1104e3488');">more</a>)
		</div><div class="subSecContent" id="seccnt_textoutput"><pre class="subSecCode"><code>import <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/package-summary.html" class="javadoc">javax.servlet.http.*</a>;
import <a href="http://java.sun.com/javase/6/docs/api/java/io/package-summary.html" class="javadoc">java.io.*</a>;

<span class="cmt">// Servlets that shows the current time</span>
public class TimeServlet extends <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html" class="javadoc">HttpServlet</a> {

  protected void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
      throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a> {

    response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setContentType(java.lang.String)" class="javadoc"><em>setContentType</em></a>("text/html; charset=UTF-8");  <span class="cmt">// <em>required</em>: HTML in UTF-8 (<a href="#" id="tl-d1104e3574" class="dottedTooltip" onclick="return tlClick('tl-d1104e3574','pp-d1104e3574');" onmouseover="return tlOver('tl-d1104e3574','pp-d1104e3574');" onmouseout="return tlOut('tl-d1104e3574','pp-d1104e3574');">more</a>)</span>
    response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setCharacterEncoding(java.lang.String)" class="javadoc"><em>setCharacterEncoding</em></a>("UTF-8");               <span class="cmt">// recommended: use UTF-8 (<a href="#" id="tl-d1104e3608" class="dottedTooltip" onclick="return tlClick('tl-d1104e3608','pp-d1104e3608');" onmouseover="return tlOver('tl-d1104e3608','pp-d1104e3608');" onmouseout="return tlOut('tl-d1104e3608','pp-d1104e3608');">more</a>)</span>

    <a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html" class="javadoc">PrintWriter</a> writer = response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#getWriter()" class="javadoc"><em>getWriter</em></a>();            <span class="cmt">// writer for sending text (<a href="#" id="tl-d1104e3625" class="dottedTooltip" onclick="return tlClick('tl-d1104e3625','pp-d1104e3625');" onmouseover="return tlOver('tl-d1104e3625','pp-d1104e3625');" onmouseout="return tlOut('tl-d1104e3625','pp-d1104e3625');">more</a>)</span>
    writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#print(java.lang.String)" class="javadoc">print</a>("&lt;html&gt;&lt;head&gt;&lt;title&gt;Time&lt;/title&gt;&lt;/head&gt;&lt;body&gt;");
    writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#print(java.lang.String)" class="javadoc">print</a>("The current time is: ");
    writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#print(java.lang.String)" class="javadoc">print</a>((new java.util.Date()).toString());
    writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#print(java.lang.String)" class="javadoc">print</a>("&lt;/body&gt;&lt;/html&gt;");
  }
}
</code></pre></div></div><div class="subSecRow2" id="sec_responsebinary"><div class="subSecHead" id="sechd_responsebinary"><a class="multipageHeadLink" href="responses.xhtml#responsebinary" name="responsebinary">Binary Output</a><br/>(<a href="#" id="tl-d1104e3682" class="dottedTooltip" onclick="return tlClick('tl-d1104e3682','pp-d1104e3687');" onmouseover="return tlOver('tl-d1104e3682','pp-d1104e3687');" onmouseout="return tlOut('tl-d1104e3682','pp-d1104e3687');">more</a>)
		</div><div class="subSecContent" id="seccnt_responsebinary"><pre class="subSecCode"><code>import <a href="http://java.sun.com/javase/6/docs/api/java/io/package-summary.html" class="javadoc">java.io.*</a>;
import <a href="http://java.sun.com/javase/6/docs/api/java/util/package-summary.html" class="javadoc">java.util.*</a>;
import <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/package-summary.html" class="javadoc">javax.servlet.http.*</a>;

<span class="cmt">// Servlet that sends one of two PNG images, depending on time of day</span>
public class AmPmFileServlet extends <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html" class="javadoc">HttpServlet</a> {

  <span class="cmt">// simple helper: copy data from InputStream to OutputStream</span>
  private void copy(<a href="http://java.sun.com/javase/6/docs/api/java/io/InputStream.html" class="javadoc">InputStream</a> in, <a href="http://java.sun.com/javase/6/docs/api/java/io/OutputStream.html" class="javadoc">OutputStream</a> out) 
      throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a> {
    byte buffer[] = new byte[4096];
    while (true) {
      int r = in.<a href="http://java.sun.com/javase/6/docs/api/java/io/InputStream.html#read(byte[])" class="javadoc">read</a>(buffer);
      if (r &lt; 0)                                    <span class="cmt">// end of stream?</span>
        break;
      out.<a href="http://java.sun.com/javase/6/docs/api/java/io/OutputStream.html#write(byte[], int, int)" class="javadoc">write</a>(buffer, 0, r);
    }
  }

  protected void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
      throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a> {

    <span class="cmt">// before or after noon? determine path to the right image in the WAR</span>
    boolean isPM = new <a href="http://java.sun.com/javase/6/docs/api/java/util/GregorianCalendar.html" class="javadoc">GregorianCalendar</a>().get(<a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#AM_PM" class="javadoc">Calendar.AM_PM</a>) == <a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#PM" class="javadoc">Calendar.PM</a>; 
    String resName = "/WEB-INF/images/time" + (isPM ? "PM" : "AM") + ".png";

    response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setContentType(java.lang.String)" class="javadoc"><em>setContentType</em></a>("image/png");           <span class="cmt">// required: content type PNG</span>
    <a href="http://java.sun.com/javase/6/docs/api/java/io/OutputStream.html" class="javadoc">OutputStream</a> out = response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#getOutputStream()" class="javadoc"><em>getOutputStream</em></a>();  <span class="cmt">// stream for binary files (<a href="#" id="tl-d1104e3865" class="dottedTooltip" onclick="return tlClick('tl-d1104e3865','pp-d1104e3625');" onmouseover="return tlOver('tl-d1104e3865','pp-d1104e3625');" onmouseout="return tlOut('tl-d1104e3865','pp-d1104e3625');">more</a>)</span>
    <a href="http://java.sun.com/javase/6/docs/api/java/io/InputStream.html" class="javadoc">InputStream</a> in = <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#getServletContext()" class="javadoc">getServletContext</a>().<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html#getResourceAsStream(java.lang.String)" class="javadoc">getResourceAsStream</a>(resName);
    <em>copy</em>(in, out);                                  <span class="cmt">// copy file to client</span>
  }
}
</code></pre></div></div><div id="colla_buffering" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="responses.xhtml#buffering" name="buffering">Buffering</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('buffering');">Buffering and Committing</a></div></div></div><div class="subSecRow1" id="sec_buffering" style="display: none"><div class="subSecHead" id="sechd_buffering"><a class="multipageHeadLink" href="responses.xhtml#buffering" name="buffering">Buffering</a></div><div class="subSecContent" id="seccnt_buffering"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('buffering');">Buffering and Committing</a></div><p class="subSecExplanation">As long as you <em>set the Content Type and other headers before writing the actual data</em>, your servlet will always work fine. However, the Servlet API allows you a bit more flexibility when you understand its <em>buffering mechanism</em>: </p><ul class="subSecList"><li>The web container <em>buffers all data</em> that you write to the client</li><li><em>Data will be sent to the client when ...</em> <ul><li>the buffer's capacity is exceeded, or</li><li>you call <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/flushBuffer.html" class="javadoc">flushBuffer</a>, or</li><li>the amount of bytes specified with <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/setContentLength.html" class="javadoc">setContentLength</a> has been written, or</li><li>the <a href="http://java.sun.com/javase/6/docs/api/java/io/OutputStream.html" class="javadoc">OutputStream</a> or <a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html" class="javadoc">PrintWriter</a> has been closed, or</li><li>the service method (doGet, doPost etc) has finished.</li></ul></li><li>Use <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/getBufferSize.html" class="javadoc">getBufferSize</a> to get the buffer size.</li><li>You may set the buffer size with <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/setBufferSize.html" class="javadoc">setBufferSize</a>, but only <em>before getting the stream/writer</em>.</li><li><em>The response is <span class="idf">committed</span></em> as soon as data has been sent to the client. </li><li>Find out whether the response is committed using <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/isCommitted.html" class="javadoc">isCommitted</a>.</li><li>The following things are only allowed <em>before the response is committed</em>: <ul><li>setting headers (<a href="#" id="tl-d1104e3995" class="dottedTooltip" onclick="return tlClick('tl-d1104e3995','pp-d1104e3995');" onmouseover="return tlOver('tl-d1104e3995','pp-d1104e3995');" onmouseout="return tlOut('tl-d1104e3995','pp-d1104e3995');">more</a>)</li><li>clearing the buffer with <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/resetBuffer.html" class="javadoc">resetBuffer</a> (<a href="#" id="tl-d1104e4003" class="dottedTooltip" onclick="return tlClick('tl-d1104e4003','pp-d1104e4003');" onmouseover="return tlOver('tl-d1104e4003','pp-d1104e4003');" onmouseout="return tlOut('tl-d1104e4003','pp-d1104e4003');">more</a>)</li><li>clearing buffer and headers with <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/reset.html" class="javadoc">reset</a> (<a href="#" id="tl-d1104e4020" class="dottedTooltip" onclick="return tlClick('tl-d1104e4020','pp-d1104e4020');" onmouseover="return tlOver('tl-d1104e4020','pp-d1104e4020');" onmouseout="return tlOut('tl-d1104e4020','pp-d1104e4020');">more</a>)</li></ul> </li></ul></div></div><div class="subSecRow2" id="sec_errors"><div class="subSecHead" id="sechd_errors"><a class="multipageHeadLink" href="responses.xhtml#errors" name="errors">Error Code</a><br/>(<a href="#" id="tl-d1104e4031" class="dottedTooltip" onclick="return tlClick('tl-d1104e4031','pp-d1104e4036');" onmouseover="return tlOver('tl-d1104e4031','pp-d1104e4036');" onmouseout="return tlOut('tl-d1104e4031','pp-d1104e4036');">more</a>)
		</div><div class="subSecContent" id="seccnt_errors"><pre class="subSecCode"><code>protected void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
    throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a> {

  <span class="cmt">// send status code 403 (<a href="#" id="tl-d1104e4090" class="dottedTooltip" onclick="return tlClick('tl-d1104e4090','pp-d1104e4090');" onmouseover="return tlOver('tl-d1104e4090','pp-d1104e4090');" onmouseout="return tlOut('tl-d1104e4090','pp-d1104e4090');">more</a>):</span>
  response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html#sendError(int, java.lang.String)" class="javadoc"><em>sendError</em></a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html#SC_FORBIDDEN" class="javadoc">HttpServletResponse.SC_FORBIDDEN</a>, "Access not allowed");
  <span class="cmt">// Important: return from service method immediately (<a href="#" id="tl-d1104e4118" class="dottedTooltip" onclick="return tlClick('tl-d1104e4118','pp-d1104e4118');" onmouseover="return tlOver('tl-d1104e4118','pp-d1104e4118');" onmouseout="return tlOut('tl-d1104e4118','pp-d1104e4118');">more</a>)</span>
}
</code></pre></div></div><div class="subSecRow1" id="sec_redirection"><div class="subSecHead" id="sechd_redirection"><a class="multipageHeadLink" href="responses.xhtml#redirection" name="redirection">Redirection</a><br/>(<a href="#" id="tl-d1104e4139" class="dottedTooltip" onclick="return tlClick('tl-d1104e4139','pp-d1104e4144');" onmouseover="return tlOver('tl-d1104e4139','pp-d1104e4144');" onmouseout="return tlOut('tl-d1104e4139','pp-d1104e4144');">more</a>)
		</div><div class="subSecContent" id="seccnt_redirection"><pre class="subSecCode"><code>protected void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
    throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a> {

  response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html#sendRedirect(java.lang.String)" class="javadoc"><em>sendRedirect</em></a>("http://jarfiller.com/");
  <span class="cmt">// Important: return from service method immediately (<a href="#" id="tl-d1104e4194" class="dottedTooltip" onclick="return tlClick('tl-d1104e4194','pp-d1104e4118');" onmouseover="return tlOver('tl-d1104e4194','pp-d1104e4118');" onmouseout="return tlOut('tl-d1104e4194','pp-d1104e4118');">more</a>)</span>
}
</code></pre></div></div><h2 id="sec_requests" class="sectionHead"><a name="requests">Requests</a></h2><div class="sectionExpandAll">
			(<a href="#" onclick="&#xA;return showAll([['colla_parameternames','sec_parameternames'],['colla_headers','sec_headers'], null]); &#xA;">expand everything</a>)
		</div><div class="subSecRow2" id="sec_reqparameters"><div class="subSecHead" id="sechd_reqparameters"><a class="multipageHeadLink" href="requests.xhtml#reqparameters" name="reqparameters">Request Parameters</a><br/>(<a href="#" id="tl-d1104e4208" class="dottedTooltip" onclick="return tlClick('tl-d1104e4208','pp-d1104e4213');" onmouseover="return tlOver('tl-d1104e4208','pp-d1104e4213');" onmouseout="return tlOut('tl-d1104e4208','pp-d1104e4213');">more</a>)
		</div><div class="subSecContent" id="seccnt_reqparameters"><pre class="subSecCode"><code>import <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/package-summary.html" class="javadoc">javax.servlet.http.*</a>;
import <a href="http://java.sun.com/javase/6/docs/api/java/io/package-summary.html" class="javadoc">java.io.*</a>;

<span class="cmt">// Servlet that shows a simple form with two text fields, </span>
<span class="cmt">// allowing the user to enter numbers and showing their sum</span>
public class CalculatorServlet extends <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html" class="javadoc">HttpServlet</a> {

  <span class="cmt">// Prints the calculator HTML</span>
  private void printCalculator(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response, Integer result) 
      throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a> {

    response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setContentType(java.lang.String)" class="javadoc">setContentType</a>("text/html; charset=UTF-8");  <span class="cmt">// HTML in UTF8</span>
    response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setCharacterEncoding(java.lang.String)" class="javadoc">setCharacterEncoding</a>("UTF-8");

    <a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html" class="javadoc">PrintWriter</a> writer = response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#getWriter()" class="javadoc">getWriter</a>();
    writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#print(java.lang.String)" class="javadoc">print</a>("&lt;html&gt;&lt;head&gt;&lt;title&gt;Calculator&lt;/title&gt;&lt;/head&gt;&lt;body&gt;");
    writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#print(java.lang.String)" class="javadoc">print</a>("&lt;form&gt;&lt;input <em>name='x'</em>&gt; + &lt;input <em>name='y'</em>&gt; &lt;input type='submit' value='='&gt; ");
    if (result != null)
      writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#print(java.lang.String)" class="javadoc">print</a>(result);
    writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#print(java.lang.String)" class="javadoc">print</a>("&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;");
  }

  <span class="cmt">// handles GET and POST (<a href="#" id="tl-d1104e4362" class="dottedTooltip" onclick="return tlClick('tl-d1104e4362','pp-d1104e4362');" onmouseover="return tlOver('tl-d1104e4362','pp-d1104e4362');" onmouseout="return tlOut('tl-d1104e4362','pp-d1104e4362');">more</a>)</span>
  private void doAll(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
      throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a> {

    Integer result = null;
    String x = request.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html#getParameter(java.lang.String)" class="javadoc"><em>getParameter</em></a>("x");
    String y = request.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html#getParameter(java.lang.String)" class="javadoc"><em>getParameter</em></a>("y");

    <span class="cmt">// validation: check parameters are numeric (<a href="#" id="tl-d1104e4413" class="dottedTooltip" onclick="return tlClick('tl-d1104e4413','pp-d1104e4413');" onmouseover="return tlOver('tl-d1104e4413','pp-d1104e4413');" onmouseout="return tlOut('tl-d1104e4413','pp-d1104e4413');">more</a>)</span>
    if (x != null &amp;&amp; y != null &amp;&amp;
        x.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#matches(java.lang.String)" class="javadoc">matches</a>("[0-9]+") &amp;&amp; y.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#matches(java.lang.String)" class="javadoc">matches</a>("[0-9]+")) {

      result = Integer.parseInt(x) + Integer.parseInt(y);
    }

  protected void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
      throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a> {
    doAll(request, response);
  }
  protected void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doPost</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
      throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a> {
    doAll(request, response);
  }
}
</code></pre></div></div><div id="colla_parameternames" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="requests.xhtml#parameternames" name="parameternames">Parameter Names</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('parameternames');">How to find out which parameters have been sent</a></div></div></div><div class="subSecRow1" id="sec_parameternames" style="display: none"><div class="subSecHead" id="sechd_parameternames"><a class="multipageHeadLink" href="requests.xhtml#parameternames" name="parameternames">Parameter Names</a></div><div class="subSecContent" id="seccnt_parameternames"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('parameternames');">How to find out which parameters have been sent</a></div><p class="subSecExplanation">The Servlet API offers two ways of getting a list of all parameters. <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html#getParameterNames()" class="javadoc">getParameterNames</a> returns an <a href="#" id="tl-d1104e4514" class="dottedTooltip" onclick="return tlClick('tl-d1104e4514','pp-d1104e4518');" onmouseover="return tlOver('tl-d1104e4514','pp-d1104e4518');" onmouseout="return tlOut('tl-d1104e4514','pp-d1104e4518');">Enumeration</a><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/.html" class="javadoc"/> of names. The alternative, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html#getParameterMap()" class="javadoc">getParameterMap</a>, returns a <a href="http://java.sun.com/javase/6/docs/api/java/util/Map.html" class="javadoc">Map</a> of all parameter name/value pairs, but with one catch: the <em>value is a String array</em> (<a href="#" id="tl-d1104e4543" class="dottedTooltip" onclick="return tlClick('tl-d1104e4543','pp-d1104e4639');" onmouseover="return tlOver('tl-d1104e4543','pp-d1104e4639');" onmouseout="return tlOut('tl-d1104e4543','pp-d1104e4639');">more</a>).</p><p class="subSecExplanation">The following example uses <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html#getParameterMap()" class="javadoc">getParameterMap</a> to print all request parameters that it got:</p><pre class="subSecCode"><code>protected void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
    throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a> {

  response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setContentType(java.lang.String)" class="javadoc">setContentType</a>("text/plain; charset=UTF-8");  <span class="cmt">// plain text (<a href="#" id="tl-d1104e4581" class="dottedTooltip" onclick="return tlClick('tl-d1104e4581','pp-d1104e4581');" onmouseover="return tlOver('tl-d1104e4581','pp-d1104e4581');" onmouseout="return tlOut('tl-d1104e4581','pp-d1104e4581');">more</a>)</span>
  response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setCharacterEncoding(java.lang.String)" class="javadoc">setCharacterEncoding</a>("UTF-8");
  <a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html" class="javadoc">PrintWriter</a> writer = response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#getWriter()" class="javadoc">getWriter</a>();

  <a href="http://java.sun.com/javase/6/docs/api/java/util/Map.html" class="javadoc">Map</a>&lt;String, String[]&gt; params = (<a href="http://java.sun.com/javase/6/docs/api/java/util/Map.html" class="javadoc">Map</a>&lt;String, String[]&gt;) request.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html#getParameterMap()" class="javadoc"><em>getParameterMap</em></a>();

  writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#println(java.lang.String)" class="javadoc">println</a>("Request parameters:");
  for (String name: params.<a href="http://java.sun.com/javase/6/docs/api/java/util/Map.html#keySet()" class="javadoc">keySet</a>())
    for (String value: params.<a href="http://java.sun.com/javase/6/docs/api/java/util/Map.html#get(java.lang.Object)" class="javadoc">get</a>(name))                 <span class="cmt">// <em>values are arrays</em> (<a href="#" id="tl-d1104e4639" class="dottedTooltip" onclick="return tlClick('tl-d1104e4639','pp-d1104e4639');" onmouseover="return tlOver('tl-d1104e4639','pp-d1104e4639');" onmouseout="return tlOut('tl-d1104e4639','pp-d1104e4639');">more</a>)</span>
      writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#printf(java.lang.String, java.lang.Object...)" class="javadoc">printf</a>("%s=%s\n", name, value);             <span class="cmt">// formatted print (<a href="#" id="tl-d1104e4652" class="dottedTooltip" onclick="return tlClick('tl-d1104e4652','pp-d1104e4652');" onmouseover="return tlOver('tl-d1104e4652','pp-d1104e4652');" onmouseout="return tlOut('tl-d1104e4652','pp-d1104e4652');">more</a>)</span>
}
</code></pre></div></div><div id="colla_headers" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="requests.xhtml#headers" name="headers">Headers</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('headers');">How to read header values</a></div></div></div><div class="subSecRow2" id="sec_headers" style="display: none"><div class="subSecHead" id="sechd_headers"><a class="multipageHeadLink" href="requests.xhtml#headers" name="headers">Headers</a></div><div class="subSecContent" id="seccnt_headers"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('headers');">How to read header values</a></div><p class="subSecExplanation">This example reads the <span class="idf">User-Agent</span> request header sent by the client to guess the user's browser (<a href="#" id="tl-d1104e4688" class="dottedTooltip" onclick="return tlClick('tl-d1104e4688','pp-d1104e4688');" onmouseover="return tlOver('tl-d1104e4688','pp-d1104e4688');" onmouseout="return tlOut('tl-d1104e4688','pp-d1104e4688');">more</a>):</p><pre class="subSecCode"><code>protected void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
    throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a> {

  response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setContentType(java.lang.String)" class="javadoc">setContentType</a>("text/plain; charset=UTF-8");  <span class="cmt">// plain text (<a href="#" id="tl-d1104e4730" class="dottedTooltip" onclick="return tlClick('tl-d1104e4730','pp-d1104e4581');" onmouseover="return tlOver('tl-d1104e4730','pp-d1104e4581');" onmouseout="return tlOut('tl-d1104e4730','pp-d1104e4581');">more</a>)</span>
  response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setCharacterEncoding(java.lang.String)" class="javadoc">setCharacterEncoding</a>("UTF-8");

  String userAgent = request.<em><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getHeader(java.lang.String)" class="javadoc">getHeader</a>("User-Agent")</em>;

  String browserGuess = "some other browser";
  if (userAgent != null) {
    if (userAgent.contains("Firefox/"))
      browserGuess = "Firefox";
    else if (userAgent.contains("MSIE"))
      browserGuess = "Internet Explorer";
  }

  response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#getWriter()" class="javadoc">getWriter</a>().<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#println(java.lang.String)" class="javadoc">println</a>("Request parameters:");
}
</code></pre><p class="subSecExplanation">Find out more about browser detection in the <a href="#browserdetection" onclick="if (event.button == 0) return goTo('#browserdetection', true); else return true;">browser detection section</a> below.</p></div></div><div class="subSecRow1" id="sec_paths"><div class="subSecHead" id="sechd_paths"><a class="multipageHeadLink" href="requests.xhtml#paths" name="paths">Paths</a></div><div class="subSecContent" id="seccnt_paths"><p class="subSecExplanation">With the <span class="tag">&lt;<a href="#" id="tl-d1104e4804" class="tooltip" onclick="return tlClick('tl-d1104e4804','pp-d1104e478');" onmouseover="return tlOver('tl-d1104e4804','pp-d1104e478');" onmouseout="return tlOut('tl-d1104e4804','pp-d1104e478');">servlet-mapping</a>&gt;</span> element you can define for which paths your servlet will be invoked. Paths are <em>defined using URL patterns</em>.</p><h4 class="subSecMiniHeadline">URL Pattern</h4><p class="subSecExplanation">The <span class="tag">&lt;<a href="#" id="tl-d1104e4816" class="tooltip" onclick="return tlClick('tl-d1104e4816','pp-d1104e312');" onmouseover="return tlOver('tl-d1104e4816','pp-d1104e312');" onmouseout="return tlOut('tl-d1104e4816','pp-d1104e312');">url-pattern</a>&gt;</span> element in the servlet mapping supports <em>only two kinds of wildcards</em>:</p><ul class="subSecList"><li>'/*' at the end, to <em>map the servlet on a virtual directory</em></li><li>'*.ext', to <em>map the servlet on a file extension</em></li></ul><p class="subSecExplanation">Other uses of wildcards are not allowed.</p><h4 class="subSecMiniHeadline">Servlet Mapping</h4><p class="subSecExplanation">This <span class="idf">web.xml</span> snippet maps the servlet both on the directory '/libs' and the file extension '*.do':</p><pre class="subSecConfig"><span class="tag">&lt;<a href="#" id="tl-d1104e4848" class="tooltip" onclick="return tlClick('tl-d1104e4848','pp-d1104e478');" onmouseover="return tlOver('tl-d1104e4848','pp-d1104e478');" onmouseout="return tlOut('tl-d1104e4848','pp-d1104e478');">servlet-mapping</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e4851" class="tooltip" onclick="return tlClick('tl-d1104e4851','pp-d1104e481');" onmouseover="return tlOver('tl-d1104e4851','pp-d1104e481');" onmouseout="return tlOut('tl-d1104e4851','pp-d1104e481');">servlet-name</a>&gt;</span>myServlet<span class="tag">&lt;/<a href="#" id="tl-d1104e4854" class="tooltip" onclick="return tlClick('tl-d1104e4854','pp-d1104e481');" onmouseover="return tlOver('tl-d1104e4854','pp-d1104e481');" onmouseout="return tlOut('tl-d1104e4854','pp-d1104e481');">servlet-name</a>&gt;</span> 
    <span class="tag">&lt;<a href="#" id="tl-d1104e4856" class="tooltip" onclick="return tlClick('tl-d1104e4856','pp-d1104e312');" onmouseover="return tlOver('tl-d1104e4856','pp-d1104e312');" onmouseout="return tlOut('tl-d1104e4856','pp-d1104e312');">url-pattern</a>&gt;</span><em>/libs/*</em><span class="tag">&lt;/<a href="#" id="tl-d1104e4860" class="tooltip" onclick="return tlClick('tl-d1104e4860','pp-d1104e312');" onmouseover="return tlOver('tl-d1104e4860','pp-d1104e312');" onmouseout="return tlOut('tl-d1104e4860','pp-d1104e312');">url-pattern</a>&gt;</span>
<span class="tag">&lt;/<a href="#" id="tl-d1104e4862" class="tooltip" onclick="return tlClick('tl-d1104e4862','pp-d1104e478');" onmouseover="return tlOver('tl-d1104e4862','pp-d1104e478');" onmouseout="return tlOut('tl-d1104e4862','pp-d1104e478');">servlet-mapping</a>&gt;</span>
<span class="tag">&lt;<a href="#" id="tl-d1104e4865" class="tooltip" onclick="return tlClick('tl-d1104e4865','pp-d1104e478');" onmouseover="return tlOver('tl-d1104e4865','pp-d1104e478');" onmouseout="return tlOut('tl-d1104e4865','pp-d1104e478');">servlet-mapping</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e4868" class="tooltip" onclick="return tlClick('tl-d1104e4868','pp-d1104e481');" onmouseover="return tlOver('tl-d1104e4868','pp-d1104e481');" onmouseout="return tlOut('tl-d1104e4868','pp-d1104e481');">servlet-name</a>&gt;</span>myServlet<span class="tag">&lt;/<a href="#" id="tl-d1104e4871" class="tooltip" onclick="return tlClick('tl-d1104e4871','pp-d1104e481');" onmouseover="return tlOver('tl-d1104e4871','pp-d1104e481');" onmouseout="return tlOut('tl-d1104e4871','pp-d1104e481');">servlet-name</a>&gt;</span> 
    <span class="tag">&lt;<a href="#" id="tl-d1104e4873" class="tooltip" onclick="return tlClick('tl-d1104e4873','pp-d1104e312');" onmouseover="return tlOver('tl-d1104e4873','pp-d1104e312');" onmouseout="return tlOut('tl-d1104e4873','pp-d1104e312');">url-pattern</a>&gt;</span><em>*.do</em><span class="tag">&lt;/<a href="#" id="tl-d1104e4877" class="tooltip" onclick="return tlClick('tl-d1104e4877','pp-d1104e312');" onmouseover="return tlOver('tl-d1104e4877','pp-d1104e312');" onmouseout="return tlOut('tl-d1104e4877','pp-d1104e312');">url-pattern</a>&gt;</span>
<span class="tag">&lt;/<a href="#" id="tl-d1104e4879" class="tooltip" onclick="return tlClick('tl-d1104e4879','pp-d1104e478');" onmouseover="return tlOver('tl-d1104e4879','pp-d1104e478');" onmouseout="return tlOut('tl-d1104e4879','pp-d1104e478');">servlet-mapping</a>&gt;</span>
		</pre><h4 class="subSecMiniHeadline">Path Methods</h4><p class="subSecExplanation">When using wildcards like this, there are a number of <em>methods in <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> to find out the request path</em>:</p><ul class="subSecList"><li><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getRequestURI()" class="javadoc">getRequestURI</a> - the <em>complete path</em>, starting at the server's root</li><li><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getContextPath()" class="javadoc">getContextPath</a> - the <em>context root</em> of the servlet (empty for context root "/")</li><li><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getServletPath()" class="javadoc">getServletPath</a> - for <a href="#" id="tl-d1104e4917" class="dottedTooltip" onclick="return tlClick('tl-d1104e4917','pp-d1104e4920');" onmouseover="return tlOver('tl-d1104e4917','pp-d1104e4920');" onmouseout="return tlOut('tl-d1104e4917','pp-d1104e4920');">directory patterns</a>: <em>the mapped directory</em>; for <a href="#" id="tl-d1104e4928" class="dottedTooltip" onclick="return tlClick('tl-d1104e4928','pp-d1104e4931');" onmouseover="return tlOver('tl-d1104e4928','pp-d1104e4931');" onmouseout="return tlOut('tl-d1104e4928','pp-d1104e4931');">extension patterns</a>: path relative to context root</li><li><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getPathInfo()" class="javadoc">getPathInfo</a> - for <a href="#" id="tl-d1104e4941" class="dottedTooltip" onclick="return tlClick('tl-d1104e4941','pp-d1104e4920');" onmouseover="return tlOver('tl-d1104e4941','pp-d1104e4920');" onmouseout="return tlOut('tl-d1104e4941','pp-d1104e4920');">directory patterns</a>: path <em>relative to servlet path</em>; for <a href="#" id="tl-d1104e4946" class="dottedTooltip" onclick="return tlClick('tl-d1104e4946','pp-d1104e4931');" onmouseover="return tlOver('tl-d1104e4946','pp-d1104e4931');" onmouseout="return tlOut('tl-d1104e4946','pp-d1104e4931');">extension patterns</a>: always <span class="idf">null</span></li></ul><h4 class="subSecMiniHeadline">URL Examples</h4><p class="subSecExplanation">Assuming the servlet mapped above has the context root 'myapp', here a few example URLs and their resulting paths:</p><div class="subSecTableDiv"><table><tr><th>URL</th><th>getRequestURI</th><th>getContextPath</th><th>getServletPath</th><th>getPathInfo</th></tr><tr><td>http://localhost/myapp/lib/x/y/a.htm</td><td>/myapp/lib/x/y/a.htm</td><td>/myapp</td><td>/lib</td><td>/x/y/a.htm</td></tr><tr><td>http://localhost/myapp/lib/abc/</td><td>/myapp/lib/abc/</td><td>/myapp</td><td>/lib</td><td>/abc/</td></tr><tr><td>http://localhost/myapp/help.do</td><td>/myapp/help.do</td><td>/myapp</td><td>/myapp/help.do</td><td><span class="idf">null</span></td></tr><tr><td>http://localhost/myapp/abc/run.do</td><td>/myapp/abc/run.do</td><td>/myapp</td><td>/myapp/abc/run.do</td><td><span class="idf">null</span></td></tr></table></div><h4 class="subSecMiniHeadline">Root Pattern</h4><p class="subSecExplanation"> You can also set the <span class="tag">&lt;<a href="#" id="tl-d1104e5027" class="tooltip" onclick="return tlClick('tl-d1104e5027','pp-d1104e312');" onmouseover="return tlOver('tl-d1104e5027','pp-d1104e312');" onmouseout="return tlOut('tl-d1104e5027','pp-d1104e312');">url-pattern</a>&gt;</span> to "/". The <em>servlet will then handle all paths</em>, and the path methods return the same values as they do for mapped extensions. </p></div></div><h2 id="sec_sessionsandcookies" class="sectionHead"><a name="sessionsandcookies">Sessions and Cookies</a></h2><div class="sectionExpandAll">
			(<a href="#" onclick="&#xA;return showAll([['colla_distributablesessions','sec_distributablesessions'],['colla_sessioncaveat','sec_sessioncaveat'], null]); &#xA;">expand everything</a>)
		</div><div class="subSecRow2" id="sec_cookies"><div class="subSecHead" id="sechd_cookies"><a class="multipageHeadLink" href="sessionsandcookies.xhtml#cookies" name="cookies">Cookies</a><br/>(<a href="#" id="tl-d1104e5041" class="dottedTooltip" onclick="return tlClick('tl-d1104e5041','pp-d1104e5046');" onmouseover="return tlOver('tl-d1104e5041','pp-d1104e5046');" onmouseout="return tlOut('tl-d1104e5041','pp-d1104e5046');">more</a>)
		</div><div class="subSecContent" id="seccnt_cookies"><pre class="subSecCode"><code>final static String COOKIE_NAME = "visitCounter";

<span class="cmt">// This method uses <a href="#" id="tl-d1104e5068" class="dottedTooltip" onclick="return tlClick('tl-d1104e5068','pp-d1104e5071');" onmouseover="return tlOver('tl-d1104e5068','pp-d1104e5071');" onmouseout="return tlOut('tl-d1104e5068','pp-d1104e5071');">cookies</a> to find out how many times the user</span>
<span class="cmt">// has visited the servlet before:</span>
protected void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
      throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a> {

    response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setContentType(java.lang.String)" class="javadoc">setContentType</a>("text/plain; charset=UTF-8");     <span class="cmt">// plain text (<a href="#" id="tl-d1104e5112" class="dottedTooltip" onclick="return tlClick('tl-d1104e5112','pp-d1104e4581');" onmouseover="return tlOver('tl-d1104e5112','pp-d1104e4581');" onmouseout="return tlOut('tl-d1104e5112','pp-d1104e4581');">more</a>)</span>
    response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setCharacterEncoding(java.lang.String)" class="javadoc">setCharacterEncoding</a>("UTF-8");
    <a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html" class="javadoc">PrintWriter</a> writer = response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#getWriter()" class="javadoc">getWriter</a>();

    <span class="cmt">// Finding the cookie (if it exists)</span>
    int visits = 0;
    if (request.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/getCookies().html" class="javadoc">getCookies()</a> != null)                         <span class="cmt">// may be null if no cookies (<a href="#" id="tl-d1104e5147" class="dottedTooltip" onclick="return tlClick('tl-d1104e5147','pp-d1104e5147');" onmouseover="return tlOver('tl-d1104e5147','pp-d1104e5147');" onmouseout="return tlOut('tl-d1104e5147','pp-d1104e5147');">more</a>)</span>
        for (<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/Cookie.html" class="javadoc">Cookie</a> c: request.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getContextPath()" class="javadoc"><em>getCookies</em></a>())
            if (c.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/Cookie.html#getName()" class="javadoc">getName</a>().equals(COOKIE_NAME) &amp;&amp; c.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/Cookie.html#getValue()" class="javadoc">getValue</a>().<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#matches(java.lang.String)" class="javadoc">matches</a>("[0-9]+"))
                visits = Integer.parseInt(c.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/Cookie.html#getValue()" class="javadoc">getValue</a>());

    <span class="cmt">// Print a message for the user</span>
    if (visits == 0)
        writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#println(java.lang.String)" class="javadoc">println</a>("This is your first visit.");
    else
        writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#printf(java.lang.String, java.lang.Object...)" class="javadoc">printf</a>("This is visit number %d.\n", visits);  <span class="cmt">// formatted printing (<a href="#" id="tl-d1104e5208" class="dottedTooltip" onclick="return tlClick('tl-d1104e5208','pp-d1104e4652');" onmouseover="return tlOver('tl-d1104e5208','pp-d1104e4652');" onmouseout="return tlOut('tl-d1104e5208','pp-d1104e4652');">more</a>)</span>

    <span class="cmt">// Set / Update the cookie (<a href="#" id="tl-d1104e5217" class="dottedTooltip" onclick="return tlClick('tl-d1104e5217','pp-d1104e5217');" onmouseover="return tlOver('tl-d1104e5217','pp-d1104e5217');" onmouseout="return tlOut('tl-d1104e5217','pp-d1104e5217');">more</a>)</span>
    <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/Cookie.html" class="javadoc">Cookie</a> c = <em>new <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/Cookie.html" class="javadoc">Cookie</a></em>(COOKIE_NAME, Integer.toString(visits + 1));
    c.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/Cookie.html#setMaxAge(int)" class="javadoc"><em>setMaxAge</em></a>(60*60*24*28);                                 <span class="cmt">// valid for 28 days (<a href="#" id="tl-d1104e5261" class="dottedTooltip" onclick="return tlClick('tl-d1104e5261','pp-d1104e5261');" onmouseover="return tlOver('tl-d1104e5261','pp-d1104e5261');" onmouseout="return tlOut('tl-d1104e5261','pp-d1104e5261');">more</a>)</span>
    response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html#addCookie(javax.servlet.http.Cookie)" class="javadoc"><em>addCookie</em></a>(c);
}
</code></pre></div></div><div class="subSecRow1" id="sec_sessions"><div class="subSecHead" id="sechd_sessions"><a class="multipageHeadLink" href="sessionsandcookies.xhtml#sessions" name="sessions">Sessions</a></div><div class="subSecContent" id="seccnt_sessions"><p class="subSecExplanation"><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpSession.html" class="javadoc">HttpSession</a> allows you to <em>store arbitrary objects</em> for a user as named <em>attributes</em>. Sessions are <em>managed by the web container</em>, which <em>associates a session id with every session</em> and uses mechanisms such as cookies to <em>store the session id in the client</em> (<a href="#" id="tl-d1104e5315" class="dottedTooltip" onclick="return tlClick('tl-d1104e5315','pp-d1104e5315');" onmouseover="return tlOver('tl-d1104e5315','pp-d1104e5315');" onmouseout="return tlOut('tl-d1104e5315','pp-d1104e5315');">more</a>).<br/> Sessions are typically <em>short lived</em>, and do not survive neither a browser-restart nor a server-restart (<a href="#" id="tl-d1104e5337" class="dottedTooltip" onclick="return tlClick('tl-d1104e5337','pp-d1104e5337');" onmouseover="return tlOver('tl-d1104e5337','pp-d1104e5337');" onmouseout="return tlOut('tl-d1104e5337','pp-d1104e5337');">more</a>).</p><p class="subSecExplanation">The following example implements a visitor counter with HttpSessions:</p><pre class="subSecCode"><code>final static String ATTRIBUTE_NAME = "visitCounter";

protected void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
      throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a> {

    response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setContentType(java.lang.String)" class="javadoc">setContentType</a>("text/plain; charset=UTF-8");     <span class="cmt">// plain text (<a href="#" id="tl-d1104e5389" class="dottedTooltip" onclick="return tlClick('tl-d1104e5389','pp-d1104e4581');" onmouseover="return tlOver('tl-d1104e5389','pp-d1104e4581');" onmouseout="return tlOut('tl-d1104e5389','pp-d1104e4581');">more</a>)</span>
    response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setCharacterEncoding(java.lang.String)" class="javadoc">setCharacterEncoding</a>("UTF-8");
    <a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html" class="javadoc">PrintWriter</a> writer = response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#getWriter()" class="javadoc">getWriter</a>();

    <span class="cmt">// Reading the session</span>
    int visits = 0;
    <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpSession.html" class="javadoc">HttpSession</a> session = request.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getSession()" class="javadoc">getSession</a>();               <span class="cmt">// can create session (<a href="#" id="tl-d1104e5427" class="dottedTooltip" onclick="return tlClick('tl-d1104e5427','pp-d1104e5427');" onmouseover="return tlOver('tl-d1104e5427','pp-d1104e5427');" onmouseout="return tlOut('tl-d1104e5427','pp-d1104e5427');">more</a>)</span>
    if (session.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpSession.html#getAttribute(java.lang.String)" class="javadoc">getAttribute</a>(ATTRIBUTE_NAME) != null)         <span class="cmt">// not set in new sessions</span>
        if (c.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/Cookie.html#getName()" class="javadoc">getName</a>().equals(COOKIE_NAME) &amp;&amp; c.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/Cookie.html#getValue()" class="javadoc">getValue</a>().<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#matches(java.lang.String)" class="javadoc">matches</a>("[0-9]+"))
            visits = (Integer) session.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpSession.html#getAttribute(java.lang.String)" class="javadoc">getAttribute</a>(ATTRIBUTE_NAME);

    <span class="cmt">// Print a message for the user</span>
    if (visits == 0)
        writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#println(java.lang.String)" class="javadoc">println</a>("This is your first visit.");
    else
        writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#printf(java.lang.String, java.lang.Object...)" class="javadoc">printf</a>("This is visit number %d.\n", visits);  <span class="cmt">// formatted printing (<a href="#" id="tl-d1104e5485" class="dottedTooltip" onclick="return tlClick('tl-d1104e5485','pp-d1104e4652');" onmouseover="return tlOver('tl-d1104e5485','pp-d1104e4652');" onmouseout="return tlOut('tl-d1104e5485','pp-d1104e4652');">more</a>)</span>

    <span class="cmt">// Update the session</span>
    session.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpSession.html#setAttribute(java.lang.String, java.lang.Object)" class="javadoc">setAttribute</a>(ATTRIBUTE_NAME, visits + 1);
    session.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpSession.html#setMaxInactiveInterval(int)" class="javadoc">setMaxInactiveInterval</a>(60*60*24);                 <span class="cmt">// valid for 24 hours max</span>
}
</code></pre></div></div><div id="colla_distributablesessions" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="sessionsandcookies.xhtml#distributablesessions" name="distributablesessions">Distributable Sessions</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('distributablesessions');">Sessions in Distributed Servers (Clusters)</a></div></div></div><div class="subSecRow2" id="sec_distributablesessions" style="display: none"><div class="subSecHead" id="sechd_distributablesessions"><a class="multipageHeadLink" href="sessionsandcookies.xhtml#distributablesessions" name="distributablesessions">Distributable Sessions</a></div><div class="subSecContent" id="seccnt_distributablesessions"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('distributablesessions');">Sessions in Distributed Servers (Clusters)</a></div><p class="subSecExplanation">When you configure your web application to be <em>distributable</em> (thus you have not a single container, but a cluster of containers hosting your application), you must be sure that you <em>store only serializable objects</em> in the session (some containers also support EJB references). Distributable containers can move sessions across servers, and serialization allows the container to do this. Objects stored in a session can implement the <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpSessionActivationListener.html" class="javadoc">HttpSessionActivationListener</a> interface to be notified before and after such a migration.</p><p class="subSecExplanation">See also <a href="#distributedapps" onclick="if (event.button == 0) return goTo('#distributedapps', true); else return true;">How to Write Distributed Applications</a> below.</p></div></div><div id="colla_sessioncaveat" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="sessionsandcookies.xhtml#sessioncaveat" name="sessioncaveat">Session Caveat</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('sessioncaveat');">Be Careful When Using HttpSession</a></div></div></div><div class="subSecRow1" id="sec_sessioncaveat" style="display: none"><div class="subSecHead" id="sechd_sessioncaveat"><a class="multipageHeadLink" href="sessionsandcookies.xhtml#sessioncaveat" name="sessioncaveat">Session Caveat</a></div><div class="subSecContent" id="seccnt_sessioncaveat"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('sessioncaveat');">Be Careful When Using HttpSession</a></div><p class="subSecExplanation"> <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpSession.html" class="javadoc">HttpSession</a> looks simple and easy to use. In practice, however, you should <em>consider carefully what you store in a session</em>. There are three pitfalls:</p><ol class="subSecList"><li>Attribute values put into the session will be <em>accessed by several threads simultanously</em>, so proper synchronization and/or thread-safe objects are required.</li><li>In general, you should <em>store only the user's identity and configuration</em> in the session. Using it for most other purposes, for example storing the state of a multi-page form in the session, is a very bad idea (<a href="#" id="tl-d1104e5578" class="dottedTooltip" onclick="return tlClick('tl-d1104e5578','pp-d1104e5578');" onmouseover="return tlOver('tl-d1104e5578','pp-d1104e5578');" onmouseout="return tlOut('tl-d1104e5578','pp-d1104e5578');">more</a>).</li><li>When working with sessions, <em>be careful about memory use</em>. If you store large objects in your session and have many visitors, you may run out of heap memory. Be aware that <em>people with disabled cookies create a new session with every hit</em>, because they always look like a new visitor to the server.</li></ol><p class="subSecExplanation">Often <em>using cookies is easier than using sessions</em>. You may need to write a few more lines to use them, but they are easier to debug and implement correctly. </p></div></div><h2 id="sec_resources" class="sectionHead"><a name="resources">Resources</a></h2><div class="sectionExpandAll">
			(<a href="#" onclick="&#xA;return showAll([['colla_jndilookup','sec_jndilookup'],['colla_tomcatresources','sec_tomcatresources'], null]); &#xA;">expand everything</a>)
		</div><div class="subSecRow2" id="sec_resourceannotations"><div class="subSecHead" id="sechd_resourceannotations"><a class="multipageHeadLink" href="resources.xhtml#resourceannotations" name="resourceannotations">Resource Annotations</a></div><div class="subSecContent" id="seccnt_resourceannotations"><p class="subSecExplanation">To configure your servlet for the web container's environment, <em>declare required resources with the <a href="http://java.sun.com/javaee/5/docs/api/javax/annotation/Resource.html" class="javadoc">@Resource</a> annotation</em> in the servlet. The container will <em>inject those resources right after instantiation</em> (but before <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#init(javax.servlet.ServletConfig)" class="javadoc">init</a> is called).<br/> The <a href="#" id="tl-d1104e5630" class="dottedTooltip" onclick="return tlClick('tl-d1104e5630','pp-d1104e5633');" onmouseover="return tlOver('tl-d1104e5630','pp-d1104e5633');" onmouseout="return tlOut('tl-d1104e5630','pp-d1104e5633');">deployer</a> is responsible for configuring the web container to provide the values required by the application. The <em>configuration itself is container-specific</em>. </p><p class="subSecExplanation">The following Servlet declares a requirement for a String and a JDBC <a href="http://java.sun.com/javase/6/docs/api/javax/sql/DataSource.html" class="javadoc">DataSource</a>:</p><pre class="subSecCode"><code>package com.jarfiller.example;

import <a href="http://java.sun.com/javase/6/docs/api/javax/sql/package-summary.html" class="javadoc">javax.sql.*</a>;
import <a href="http://java.sun.com/javase/6/docs/api/java/sql/package-summary.html" class="javadoc">java.sql.*</a>;
import <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/package-summary.html" class="javadoc">javax.servlet.http.*</a>;
import <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/package-summary.html" class="javadoc">javax.servlet.*</a>;
import <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/javax.annotation.*.html" class="javadoc">javax.annotation.*</a>;
import <a href="http://java.sun.com/javase/6/docs/api/java/io/package-summary.html" class="javadoc">java.io.*</a>;

public class ResourceServlet extends <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html" class="javadoc">HttpServlet</a> {

  <em><a href="http://java.sun.com/javaee/5/docs/api/javax/annotation/Resource.html" class="javadoc">@Resource</a>(name="jdbc/db")</em>
  private <a href="http://java.sun.com/javase/6/docs/api/javax/sql/DataSource.html" class="javadoc">DataSource</a> db;                           <span class="cmt">// inject database connection (<a href="#" id="tl-d1104e5719" class="dottedTooltip" onclick="return tlClick('tl-d1104e5719','pp-d1104e5719');" onmouseover="return tlOver('tl-d1104e5719','pp-d1104e5719');" onmouseout="return tlOut('tl-d1104e5719','pp-d1104e5719');">more</a>)</span>

  <em><a href="http://java.sun.com/javaee/5/docs/api/javax/annotation/Resource.html" class="javadoc">@Resource</a>(name="param/webmaster")</em>
  private String webmaster;                        <span class="cmt">// inject string (<a href="#" id="tl-d1104e5746" class="dottedTooltip" onclick="return tlClick('tl-d1104e5746','pp-d1104e5746');" onmouseover="return tlOver('tl-d1104e5746','pp-d1104e5746');" onmouseout="return tlOut('tl-d1104e5746','pp-d1104e5746');">more</a>)</span>

  protected void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
        throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a>, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletException.html" class="javadoc">ServletException</a> {
    try {
      <a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection = <em>db</em>.<a href="http://java.sun.com/javase/6/docs/api/javax/sql/DataSource.html#getConnection()" class="javadoc">getConnection</a>();  <span class="cmt">// use injected value</span>

      <span class="cmt">// <span class="abstract">do something ...</span></span>

    }
    catch (<a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLException.html" class="javadoc">SQLException</a> e) {
      throw new <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletException.html" class="javadoc">ServletException</a>(e);               <span class="cmt">// simple error handling (<a href="#" id="tl-d1104e5825" class="dottedTooltip" onclick="return tlClick('tl-d1104e5825','pp-d1104e5825');" onmouseover="return tlOver('tl-d1104e5825','pp-d1104e5825');" onmouseout="return tlOut('tl-d1104e5825','pp-d1104e5825');">more</a>)</span>
    }
  }
}
</code></pre></div></div><div id="colla_jndilookup" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="resources.xhtml#jndilookup" name="jndilookup">JNDI Lookup</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('jndilookup');">How to get resources with JNDI</a></div></div></div><div class="subSecRow1" id="sec_jndilookup" style="display: none"><div class="subSecHead" id="sechd_jndilookup"><a class="multipageHeadLink" href="resources.xhtml#jndilookup" name="jndilookup">JNDI Lookup</a></div><div class="subSecContent" id="seccnt_jndilookup"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('jndilookup');">How to get resources with JNDI</a></div><p class="subSecExplanation">Instead of declaring resources with JNDI, you can also <em>look them up manually using the JNDI API</em>. This was also the only way to get resources in Servlet 2.4 API and earlier.<br/>In order to look up resources, you need to <em>declare them in your <span class="idf">web.xml</span></em> like this:</p><pre class="subSecConfig"><span class="tag">&lt;<a href="#" id="tl-d1104e5870" class="tooltip" onclick="return tlClick('tl-d1104e5870','pp-d1104e656');" onmouseover="return tlOver('tl-d1104e5870','pp-d1104e656');" onmouseout="return tlOut('tl-d1104e5870','pp-d1104e656');">env-entry</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e5873" class="tooltip" onclick="return tlClick('tl-d1104e5873','pp-d1104e330');" onmouseover="return tlOver('tl-d1104e5873','pp-d1104e330');" onmouseout="return tlOut('tl-d1104e5873','pp-d1104e330');">description</a>&gt;</span>Name of the webmaster<span class="tag">&lt;/<a href="#" id="tl-d1104e5876" class="tooltip" onclick="return tlClick('tl-d1104e5876','pp-d1104e330');" onmouseover="return tlOver('tl-d1104e5876','pp-d1104e330');" onmouseout="return tlOut('tl-d1104e5876','pp-d1104e330');">description</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e5878" class="tooltip" onclick="return tlClick('tl-d1104e5878','pp-d1104e661');" onmouseover="return tlOver('tl-d1104e5878','pp-d1104e661');" onmouseout="return tlOut('tl-d1104e5878','pp-d1104e661');">env-entry-name</a>&gt;</span><em>param/webmaster</em><span class="tag">&lt;/<a href="#" id="tl-d1104e5882" class="tooltip" onclick="return tlClick('tl-d1104e5882','pp-d1104e661');" onmouseover="return tlOver('tl-d1104e5882','pp-d1104e661');" onmouseout="return tlOut('tl-d1104e5882','pp-d1104e661');">env-entry-name</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e5884" class="tooltip" onclick="return tlClick('tl-d1104e5884','pp-d1104e666');" onmouseover="return tlOver('tl-d1104e5884','pp-d1104e666');" onmouseout="return tlOut('tl-d1104e5884','pp-d1104e666');">env-entry-type</a>&gt;</span>java.lang.String<span class="tag">&lt;/<a href="#" id="tl-d1104e5888" class="tooltip" onclick="return tlClick('tl-d1104e5888','pp-d1104e666');" onmouseover="return tlOver('tl-d1104e5888','pp-d1104e666');" onmouseout="return tlOut('tl-d1104e5888','pp-d1104e666');">env-entry-type</a>&gt;</span>
<span class="tag">&lt;/<a href="#" id="tl-d1104e5890" class="tooltip" onclick="return tlClick('tl-d1104e5890','pp-d1104e656');" onmouseover="return tlOver('tl-d1104e5890','pp-d1104e656');" onmouseout="return tlOut('tl-d1104e5890','pp-d1104e656');">env-entry</a>&gt;</span>

<span class="tag">&lt;<a href="#" id="tl-d1104e5892" class="tooltip" onclick="return tlClick('tl-d1104e5892','pp-d1104e747');" onmouseover="return tlOver('tl-d1104e5892','pp-d1104e747');" onmouseout="return tlOut('tl-d1104e5892','pp-d1104e747');">resource-ref</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e5895" class="tooltip" onclick="return tlClick('tl-d1104e5895','pp-d1104e330');" onmouseover="return tlOver('tl-d1104e5895','pp-d1104e330');" onmouseout="return tlOut('tl-d1104e5895','pp-d1104e330');">description</a>&gt;</span>A DataSource for our database<span class="tag">&lt;/<a href="#" id="tl-d1104e5898" class="tooltip" onclick="return tlClick('tl-d1104e5898','pp-d1104e330');" onmouseover="return tlOver('tl-d1104e5898','pp-d1104e330');" onmouseout="return tlOut('tl-d1104e5898','pp-d1104e330');">description</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e5900" class="tooltip" onclick="return tlClick('tl-d1104e5900','pp-d1104e761');" onmouseover="return tlOver('tl-d1104e5900','pp-d1104e761');" onmouseout="return tlOut('tl-d1104e5900','pp-d1104e761');">res-ref-name</a>&gt;</span><em>jdbc/db</em><span class="tag">&lt;/<a href="#" id="tl-d1104e5905" class="tooltip" onclick="return tlClick('tl-d1104e5905','pp-d1104e761');" onmouseover="return tlOver('tl-d1104e5905','pp-d1104e761');" onmouseout="return tlOut('tl-d1104e5905','pp-d1104e761');">res-ref-name</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e5907" class="tooltip" onclick="return tlClick('tl-d1104e5907','pp-d1104e766');" onmouseover="return tlOver('tl-d1104e5907','pp-d1104e766');" onmouseout="return tlOut('tl-d1104e5907','pp-d1104e766');">res-type</a>&gt;</span>javax.sql.DataSource<span class="tag">&lt;/<a href="#" id="tl-d1104e5910" class="tooltip" onclick="return tlClick('tl-d1104e5910','pp-d1104e766');" onmouseover="return tlOver('tl-d1104e5910','pp-d1104e766');" onmouseout="return tlOut('tl-d1104e5910','pp-d1104e766');">res-type</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e5912" class="tooltip" onclick="return tlClick('tl-d1104e5912','pp-d1104e768');" onmouseover="return tlOver('tl-d1104e5912','pp-d1104e768');" onmouseout="return tlOut('tl-d1104e5912','pp-d1104e768');">res-auth</a>&gt;</span>Container<span class="tag">&lt;/<a href="#" id="tl-d1104e5915" class="tooltip" onclick="return tlClick('tl-d1104e5915','pp-d1104e768');" onmouseover="return tlOver('tl-d1104e5915','pp-d1104e768');" onmouseout="return tlOut('tl-d1104e5915','pp-d1104e768');">res-auth</a>&gt;</span>
<span class="tag">&lt;/<a href="#" id="tl-d1104e5918" class="tooltip" onclick="return tlClick('tl-d1104e5918','pp-d1104e747');" onmouseover="return tlOver('tl-d1104e5918','pp-d1104e747');" onmouseout="return tlOut('tl-d1104e5918','pp-d1104e747');">resource-ref</a>&gt;</span>
</pre><p class="subSecExplanation">As with <a href="http://java.sun.com/javaee/5/docs/api/javax/annotation/Resource.html" class="javadoc">@Resource</a> annotations, the <a href="#" id="tl-d1104e5926" class="dottedTooltip" onclick="return tlClick('tl-d1104e5926','pp-d1104e5633');" onmouseover="return tlOver('tl-d1104e5926','pp-d1104e5633');" onmouseout="return tlOut('tl-d1104e5926','pp-d1104e5633');">deployer</a> must <em>provide values for those resources</em> by configuring a web container (in a container specific way).</p><p class="subSecExplanation">With the resources being declared, you can use JNDI to look them up:</p><pre class="subSecCode"><code>import <a href="http://java.sun.com/javase/6/docs/api/javax/naming/package-summary.html" class="javadoc">javax.naming.*</a>;
import <a href="http://java.sun.com/javase/6/docs/api/javax/sql/package-summary.html" class="javadoc">javax.sql.*</a>;
import <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/package-summary.html" class="javadoc">javax.servlet.http.*</a>;
import <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/package-summary.html" class="javadoc">javax.servlet.*</a>;
import <a href="http://java.sun.com/javase/6/docs/api/java/io/package-summary.html" class="javadoc">java.io.*</a>;

public class JNDIServlet extends <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html" class="javadoc">HttpServlet</a> {

  protected void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
        throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a>, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletException.html" class="javadoc">ServletException</a> {
    try {
      <a href="http://java.sun.com/javase/6/docs/api/javax/naming/Context.html" class="javadoc">Context</a> ic = new <a href="http://java.sun.com/javase/6/docs/api/javax/naming/InitialContext.html http://java.sun.com/javase/6/docs/api/javax/naming/InitialContext.html" class="javadoc">InitialContext</a>();
      <a href="http://java.sun.com/javase/6/docs/api/javax/naming/Context.html" class="javadoc">Context</a> ctx = (<a href="http://java.sun.com/javase/6/docs/api/javax/naming/Context.html" class="javadoc">Context</a>) ic.<em><a href="http://java.sun.com/javase/6/docs/api/javax/naming/Context.html#lookup(java.lang.String)" class="javadoc">lookup</a>("java:comp/env")</em>;  <span class="cmt">// enter ENC (<a href="#" id="tl-d1104e6027" class="dottedTooltip" onclick="return tlClick('tl-d1104e6027','pp-d1104e6027');" onmouseover="return tlOver('tl-d1104e6027','pp-d1104e6027');" onmouseout="return tlOut('tl-d1104e6027','pp-d1104e6027');">more</a>)</span>

      String wm = (String) ctx.<em><a href="http://java.sun.com/javase/6/docs/api/javax/naming/Context.html#lookup(java.lang.String)" class="javadoc">lookup</a>("param/webmaster")</em>;  <span class="cmt">// lookup string (<a href="#" id="tl-d1104e6041" class="dottedTooltip" onclick="return tlClick('tl-d1104e6041','pp-d1104e6041');" onmouseover="return tlOver('tl-d1104e6041','pp-d1104e6041');" onmouseout="return tlOut('tl-d1104e6041','pp-d1104e6041');">more</a>)</span>
      <a href="http://java.sun.com/javase/6/docs/api/javax/sql/DataSource.html" class="javadoc">DataSource</a> db = (<a href="http://java.sun.com/javase/6/docs/api/javax/sql/DataSource.html" class="javadoc">DataSource</a>) ctx.<em><a href="http://java.sun.com/javase/6/docs/api/javax/naming/Context.html#lookup(java.lang.String)" class="javadoc">lookup</a>("jdbc/db")</em>;  <span class="cmt">// lookup <a href="http://java.sun.com/javase/6/docs/api/javax/sql/DataSource.html" class="javadoc">DataSource</a> (<a href="#" id="tl-d1104e6065" class="dottedTooltip" onclick="return tlClick('tl-d1104e6065','pp-d1104e6065');" onmouseover="return tlOver('tl-d1104e6065','pp-d1104e6065');" onmouseout="return tlOut('tl-d1104e6065','pp-d1104e6065');">more</a>)</span>

      <span class="cmt">// <span class="abstract">do something ...</span></span>

    }
    catch (<a href="http://java.sun.com/javase/6/docs/api/javax/naming/NamingException.html" class="javadoc">NamingException</a> e) {
      throw new <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletException.html" class="javadoc">ServletException</a>(e);                       <span class="cmt">// simple error handling (<a href="#" id="tl-d1104e6098" class="dottedTooltip" onclick="return tlClick('tl-d1104e6098','pp-d1104e5825');" onmouseover="return tlOver('tl-d1104e6098','pp-d1104e5825');" onmouseout="return tlOut('tl-d1104e6098','pp-d1104e5825');">more</a>)</span>
    }
  }
}
</code></pre></div></div><div id="colla_tomcatresources" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="resources.xhtml#tomcatresources" name="tomcatresources">Tomcat</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('tomcatresources');">How to Provide Resources in Tomcat</a></div></div></div><div class="subSecRow2" id="sec_tomcatresources" style="display: none"><div class="subSecHead" id="sechd_tomcatresources"><a class="multipageHeadLink" href="resources.xhtml#tomcatresources" name="tomcatresources">Tomcat</a></div><div class="subSecContent" id="seccnt_tomcatresources"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('tomcatresources');">How to Provide Resources in Tomcat</a></div><p class="subSecExplanation">In <a href="http://tomcat.apache.org">Tomcat</a>, resources are <em>configured in files called <a href="http://tomcat.apache.org/tomcat-6.0-doc/config/context.html">context.xml</a></em>. Global resources are defined in <span class="idf">$TOMCAT_HOME/conf/context.xml</span>. Web applications can add additional resources by putting a file <span class="idf">/META-INF/context.xml</span> into the WAR.</p><p class="subSecExplanation">The following example <span class="idf">context.xml</span> defines resources for the last two examples. It can be either placed in the WAR's <span class="idf">/META-INF/context.xml</span> or at <span class="idf">$TOMCAT_HOME/conf/context.xml</span>.</p><pre class="subSecConfig">&lt;Context&gt;
  &lt;Environment name="<em>param/webmaster</em>" value="tim@jarfiller.com" type="java.lang.String" 
  		<em>override="false"</em>/&gt; &lt;!-- <em>required for web.xml version</em> (<a href="#" id="tl-d1104e6163" class="dottedTooltip" onclick="return tlClick('tl-d1104e6163','pp-d1104e6163');" onmouseover="return tlOver('tl-d1104e6163','pp-d1104e6163');" onmouseout="return tlOut('tl-d1104e6163','pp-d1104e6163');">more</a>) --&gt;

  &lt;Resource name="<em>jdbc/db</em>" 
               auth="Container" type="javax.sql.DataSource"
               driverClassName="org.apache.derby.jdbc.EmbeddedDriver"
               url="jdbc:derby:c:\tmp\JarfillerDB;create=true"/&gt;
&lt;/Context&gt;
				</pre><p class="subSecExplanation">For more details read Tomcat's <a href="http://tomcat.apache.org/tomcat-6.0-doc/config/context.html">context documentation</a>.</p></div></div><h2 id="sec_howtorequestresponses" class="sectionHead"><a name="howtorequestresponses">How to... Requests and Responses</a></h2><div class="sectionExpandAll">
			(<a href="#" onclick="&#xA;return showAll([['colla_customheaders','sec_customheaders'],['colla_attributes','sec_attributes'],['colla_getlastmodified','sec_getlastmodified'],['colla_contentlength','sec_contentlength'],['colla_fileupload','sec_fileupload'],['colla_browserdetection','sec_browserdetection'],['colla_contentlanguage','sec_contentlanguage'],['colla_acceptedlanguages','sec_acceptedlanguages'],['colla_sendingxml','sec_sendingxml'],['colla_dynamicimages','sec_dynamicimages'],['colla_jspforward','sec_jspforward'],['colla_requestdispatcher','sec_requestdispatcher'],['colla_virtualhosts','sec_virtualhosts'],['colla_filters','sec_filters'], null]); &#xA;">expand everything</a>)
		</div><div id="colla_customheaders" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="customheaders.xhtml#customheaders" name="customheaders">Custom headers</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('customheaders');">How to Read and Write Additional Headers</a></div></div></div><div class="subSecRow1" id="sec_customheaders" style="display: none"><div class="subSecHead" id="sechd_customheaders"><a class="multipageHeadLink" href="customheaders.xhtml#customheaders" name="customheaders">Custom headers</a></div><div class="subSecContent" id="seccnt_customheaders"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('customheaders');">How to Read and Write Additional Headers</a></div><p class="subSecExplanation">Reading request header values and setting headers for the response is straight-forward:</p><ul class="subSecList"><li>Use <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getHeader(java.lang.String)" class="javadoc">getHeader</a> to <em>read a request header value</em>. <ul><li><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getIntHeader(java.lang.String)" class="javadoc">getIntHeader</a> and <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getDateHeader(java.lang.String)" class="javadoc">getDateHeader</a> are convenience methods that convert the value to <span class="idf">int</span> or a <a href="#" id="tl-d1104e6239" class="dottedTooltip" onclick="return tlClick('tl-d1104e6239','pp-d1104e6243');" onmouseover="return tlOver('tl-d1104e6239','pp-d1104e6243');" onmouseout="return tlOut('tl-d1104e6239','pp-d1104e6243');">date</a>.</li><li><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getHeaderNames()" class="javadoc">getHeaderNames</a> returns an <a href="http://java.sun.com/javase/6/docs/api/java/util/Enumeration.html" class="javadoc">Enumeration</a> of all headers in the request.</li></ul> </li><li>Use <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html#setHeader(java.lang.String, java.lang.String)" class="javadoc">setHeader</a> to <em>set a response header value</em> (possibly overwriting a previous value). <ul><li><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html#setIntHeader(java.lang.String, int)" class="javadoc">setIntHeader</a> and <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html#setDateHeader(java.lang.String, long)" class="javadoc">setDateHeader</a> are convenience methods for <span class="idf">int</span> and <a href="#" id="tl-d1104e6289" class="dottedTooltip" onclick="return tlClick('tl-d1104e6289','pp-d1104e6243');" onmouseover="return tlOver('tl-d1104e6289','pp-d1104e6243');" onmouseout="return tlOut('tl-d1104e6289','pp-d1104e6243');">date</a> values.</li></ul> </li><li>Use <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html#addHeader(java.lang.String, java.lang.String)" class="javadoc">addHeader</a> to <em>add a response header value</em> (if there already was a value before, you add a second header). <ul><li><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html#addIntHeader(java.lang.String, int)" class="javadoc">addIntHeader</a> and <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html#addDateHeader(java.lang.String, long)" class="javadoc">addDateHeader</a> are convenience methods for <span class="idf">int</span> and <a href="#" id="tl-d1104e6314" class="dottedTooltip" onclick="return tlClick('tl-d1104e6314','pp-d1104e6243');" onmouseover="return tlOver('tl-d1104e6314','pp-d1104e6243');" onmouseout="return tlOut('tl-d1104e6314','pp-d1104e6243');">date</a> values.</li><li><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html#containsHeader(java.lang.String)" class="javadoc">containsHeader</a> allows you to find out whether there is already a header of the same name.</li></ul> </li></ul><p class="subSecExplanation">This example uses the <span class="idf">User-Agent</span> header to detect whether the browser supports <a href="http://code.google.com/chrome/chromeframe/">Google Chrome Frame</a> and if it does, enables it: </p><pre class="subSecCode"><code>protected void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
      throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a> {

    String ua = request.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getHeader(java.lang.String)" class="javadoc"><em>getHeader</em></a>("user-agent");        <span class="cmt">// name is <em>case-insensitive</em></span>
    if (ua != null &amp;&amp; ua.contains("chromeframe"))       <span class="cmt">// detect google chrome frame (<a href="#" id="tl-d1104e6371" class="dottedTooltip" onclick="return tlClick('tl-d1104e6371','pp-d1104e6371');" onmouseover="return tlOver('tl-d1104e6371','pp-d1104e6371');" onmouseout="return tlOut('tl-d1104e6371','pp-d1104e6371');">more</a>)</span>
    response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html#addHeader(java.lang.String, java.lang.String)" class="javadoc"><em>addHeader</em></a>("X-UA-Compatible", "chrome=1");  <span class="cmt">// add header (<a href="#" id="tl-d1104e6385" class="dottedTooltip" onclick="return tlClick('tl-d1104e6385','pp-d1104e6385');" onmouseover="return tlOver('tl-d1104e6385','pp-d1104e6385');" onmouseout="return tlOut('tl-d1104e6385','pp-d1104e6385');">more</a>)</span>

    <span class="cmt">// <span class="abstract">...</span></span>
}
</code></pre></div></div><div id="colla_attributes" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="attributes.xhtml#attributes" name="attributes">Attributes</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('attributes');">How to Use Attributes in Request and Context</a></div></div></div><div class="subSecRow2" id="sec_attributes" style="display: none"><div class="subSecHead" id="sechd_attributes"><a class="multipageHeadLink" href="attributes.xhtml#attributes" name="attributes">Attributes</a></div><div class="subSecContent" id="seccnt_attributes"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('attributes');">How to Use Attributes in Request and Context</a></div><p class="subSecExplanation">Attributes are <em>named objects stored in <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html" class="javadoc">ServletRequest</a> and <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html" class="javadoc">ServletContext</a></em>. They are used by containers to <em>provide additional data</em> to the web application, especially for <em>container-specific extensions</em>. You can also set attributes yourself for <em>communication between components</em>, for example if your servlet invokes a JSP, you can use pass arguments as request attributes. </p><p class="subSecExplanation">By convention, attribute names should <em>start with your package name</em>. Names starting with <span class="idf">java.</span>, <span class="idf">javax.</span> or <span class="idf">com.sun.</span> are reserved. The following example prints all available attributes:</p><pre class="subSecCode"><code>protected void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
    throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a> {

  response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setContentType(java.lang.String)" class="javadoc">setContentType</a>("text/plain; charset=UTF-8");
  response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setCharacterEncoding(java.lang.String)" class="javadoc">setCharacterEncoding</a>("UTF-8");
  <a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html" class="javadoc">PrintWriter</a> writer = response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#getWriter()" class="javadoc">getWriter</a>();

  writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#println(java.lang.String)" class="javadoc">println</a>("Request attributes:");
  for (String name: <a href="http://java.sun.com/javase/6/docs/api/java/util/Collections.html#list(java.util.Enumeration)" class="javadoc">Collections.list</a>((<a href="http://java.sun.com/javase/6/docs/api/java/util/Enumeration.html" class="javadoc">Enumeration</a>&lt;String&gt;) request.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html#getAttributeNames()" class="javadoc"><em>getAttributeNames</em></a>()))
    writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#printf(java.lang.String, java.lang.Object...)" class="javadoc">printf</a>("%s=%s\n", name, request.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html#getAttribute(java.lang.String)" class="javadoc"><em>getAttribute</em></a>(name));

  writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#println(java.lang.String)" class="javadoc">println</a>("Context attributes:");
  <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html" class="javadoc">ServletContext</a> ctx = <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#getServletContext()" class="javadoc">getServletContext</a>();
  for (String name: <a href="http://java.sun.com/javase/6/docs/api/java/util/Collections.html#list(java.util.Enumeration)" class="javadoc">Collections.list</a>((<a href="http://java.sun.com/javase/6/docs/api/java/util/Enumeration.html" class="javadoc">Enumeration</a>&lt;String&gt;) ctx.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html#getAttributeNames()" class="javadoc"><em>getAttributeNames</em></a>()))
    writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#printf(java.lang.String, java.lang.Object...)" class="javadoc">printf</a>("%s=%s\n", name, ctx.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html#getAttribute(java.lang.String)" class="javadoc"><em>getAttribute</em></a>(name));
}
</code></pre><p class="subSecExplanation"> This is a list of all standard attributes that are part of the Servlet API:</p><div class="subSecTableDiv"><table><tr><th>Where?</th><th>Name</th><th>Type</th><th>Description</th></tr><tr><td>ServletContext</td><td>javax.servlet.context.tempdir</td><td>java.io.File</td><td>temporary directory (<a href="#" id="tl-d1104e6594" class="dottedTooltip" onclick="return tlClick('tl-d1104e6594','pp-d1104e6594');" onmouseover="return tlOver('tl-d1104e6594','pp-d1104e6594');" onmouseout="return tlOut('tl-d1104e6594','pp-d1104e6594');">more</a>)</td></tr><tr><td>ServletRequest</td><td>javax.servlet.request.cipher_suite</td><td>String</td><td>for SSL requests only: name of cipher</td></tr><tr><td>ServletRequest</td><td>javax.servlet.request.key_size</td><td>Integer</td><td>for SSL requests only: key size in bits</td></tr><tr><td>ServletRequest</td><td>javax.servlet.request.X509Certificate</td><td><a href="http://java.sun.com/javase/6/docs/api/java/security/cert/X509Certificate.html" class="javadoc">X509Certificate</a>[]</td><td>for SSL requests only: array of client certificates</td></tr><tr><td>ServletRequest</td><td>javax.servlet.include.request_uri</td><td>String</td><td>included servlets only: included request URI (<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getRequestURI()" class="javadoc">getRequestURI</a>)</td></tr><tr><td>ServletRequest</td><td>javax.servlet.include.context_path</td><td>String</td><td>included servlets only: included context path (<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getContextPath()" class="javadoc">getContextPath</a>)</td></tr><tr><td>ServletRequest</td><td>javax.servlet.include.servlet_path</td><td>String</td><td>included servlets only: included context path (<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getServletPath()" class="javadoc">getServletPath</a>)</td></tr><tr><td>ServletRequest</td><td>javax.servlet.include.path_info</td><td>String</td><td>included servlets only: included path info (<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getPathInfo()" class="javadoc">getPathInfo</a>)</td></tr><tr><td>ServletRequest</td><td>javax.servlet.include.query_string</td><td>String</td><td>included servlets only: included query string (<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getQueryString()" class="javadoc">getQueryString</a>)</td></tr><tr><td>ServletRequest</td><td>javax.servlet.forward.request_uri</td><td>String</td><td>forwarded servlets only: original request URI (<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getRequestURI()" class="javadoc">getRequestURI</a>)</td></tr><tr><td>ServletRequest</td><td>javax.servlet.forward.context_path</td><td>String</td><td>forwarded servlets only: original context path (<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getContextPath()" class="javadoc">getContextPath</a>)</td></tr><tr><td>ServletRequest</td><td>javax.servlet.forward.servlet_path</td><td>String</td><td>forwarded servlets only: original context path (<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getServletPath()" class="javadoc">getServletPath</a>)</td></tr><tr><td>ServletRequest</td><td>javax.servlet.forward.path_info</td><td>String</td><td>forwarded servlets only: original path info (<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getPathInfo()" class="javadoc">getPathInfo</a>)</td></tr><tr><td>ServletRequest</td><td>javax.servlet.forward.query_string</td><td>String</td><td>forwarded servlets only: original query string (<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getQueryString()" class="javadoc">getQueryString</a>)</td></tr><tr><td>ServletRequest</td><td>javax.servlet.error.status_code</td><td>Integer</td><td>for error pages only: HTTP status code</td></tr><tr><td>ServletRequest</td><td>javax.servlet.error.exception_type</td><td>Class</td><td>for error pages only: exception class</td></tr><tr><td>ServletRequest</td><td>javax.servlet.error.message</td><td>String</td><td>for error pages only: error message</td></tr><tr><td>ServletRequest</td><td>javax.servlet.error.exception</td><td>Throwable</td><td>for error pages only: exception</td></tr><tr><td>ServletRequest</td><td>javax.servlet.error.request_uri</td><td>String</td><td>for error pages only: original request URI (<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getRequestURI()" class="javadoc">getRequestURI</a>)</td></tr><tr><td>ServletRequest</td><td>javax.servlet.error.servlet_name</td><td>String</td><td>for error pages only: servlet name</td></tr></table></div></div></div><div id="colla_getlastmodified" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="getlastmodified.xhtml#getlastmodified" name="getlastmodified">getLastModified</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('getlastmodified');">How to Use HttpServlet.getLastModified to Improve Client-Side Caching</a></div></div></div><div class="subSecRow1" id="sec_getlastmodified" style="display: none"><div class="subSecHead" id="sechd_getlastmodified"><a class="multipageHeadLink" href="getlastmodified.xhtml#getlastmodified" name="getlastmodified">getLastModified</a></div><div class="subSecContent" id="seccnt_getlastmodified"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('getlastmodified');">How to Use HttpServlet.getLastModified to Improve Client-Side Caching</a></div><p class="subSecExplanation">HTTP <em>clients often use a local cache</em> to avoid requesting the same files again and again. To validate that the cache is not outdated and update the cache with a single request, the client can send <em>a conditional GET</em>: the <span class="idf">If-Modified-Since</span> header attribute tells the server to <em>send the document only if it has been modified since the value given in <span class="idf">If-Modified-Since</span></em>. Otherwise the server responds with the status code 304 (Not Modified). </p><p class="subSecExplanation">It's easy to implement <span class="idf">If-Modified-Since</span> with the Servlet API: just override the method <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#getLastModified(javax.servlet.http.HttpServletRequest)" class="javadoc">getLastModified</a> to return the last modification date of the requested document, and the container will transparently take care of conditional GETs for you:</p><pre class="subSecCode"><code>import <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/package-summary.html" class="javadoc">javax.servlet.http.*</a>;
import <a href="http://java.sun.com/javase/6/docs/api/java/io/package-summary.html" class="javadoc">java.io.*</a>;
import <a href="http://java.sun.com/javase/6/docs/api/java/util/package-summary.html" class="javadoc">java.util.*</a>;

<span class="cmt">// Servlets that shows the current date</span>
public class DateServlet extends <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html" class="javadoc">HttpServlet</a> {

    protected void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
      throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a> {

        response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setContentType(java.lang.String)" class="javadoc">setContentType</a>("text/html; charset=UTF-8");
        response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setCharacterEncoding(java.lang.String)" class="javadoc">setCharacterEncoding</a>("UTF-8");

        <a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html" class="javadoc">PrintWriter</a> writer = response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#getWriter()" class="javadoc">getWriter</a>();
        writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#print(java.lang.String)" class="javadoc">print</a>("&lt;html&gt;&lt;head&gt;&lt;title&gt;Time&lt;/title&gt;&lt;/head&gt;&lt;body&gt;");
        writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#printf(java.lang.String, java.lang.Object...)" class="javadoc">printf</a>("The current date is: %tF", new Date());  <span class="cmt">// '%tF': format as yyyy-mm-dd</span>
        writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#print(java.lang.String)" class="javadoc">print</a>("&lt;/body&gt;&lt;/html&gt;");
    }

    protected long <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#getLastModified(javax.servlet.http.HttpServletRequest)" class="javadoc"><em>getLastModified</em></a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request) {
        <span class="cmt">// the date changes every day at midnight!</span>
        <a href="http://java.sun.com/javase/6/docs/api/java/util/GregorianCalendar.html" class="javadoc">GregorianCalendar</a> cal = new <a href="http://java.sun.com/javase/6/docs/api/java/util/GregorianCalendar.html" class="javadoc">GregorianCalendar</a>();        <span class="cmt">// current time</span>
        cal.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/set.html" class="javadoc">set</a>(<a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#HOUR" class="javadoc">Calendar.HOUR</a>, 0);                              <span class="cmt">// set to midnight</span>
        cal.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/set.html" class="javadoc">set</a>(<a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#MINUTE" class="javadoc">Calendar.MINUTE</a>, 0);
        cal.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/set.html" class="javadoc">set</a>(<a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#SECOND" class="javadoc">Calendar.SECOND</a>, 0);
        cal.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/set.html" class="javadoc">set</a>(<a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#MILLISECOND" class="javadoc">Calendar.MILLISECOND</a>, 0);
        return cal.<a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#getTimeInMillis()" class="javadoc">getTimeInMillis</a>();                           <span class="cmt">// convert to ms since 1970</span>
    }
}
</code></pre></div></div><div id="colla_contentlength" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="contentlength.xhtml#contentlength" name="contentlength">Content Length</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('contentlength');">How to Set the Content Length</a></div></div></div><div class="subSecRow2" id="sec_contentlength" style="display: none"><div class="subSecHead" id="sechd_contentlength"><a class="multipageHeadLink" href="contentlength.xhtml#contentlength" name="contentlength">Content Length</a></div><div class="subSecContent" id="seccnt_contentlength"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('contentlength');">How to Set the Content Length</a></div><p class="subSecExplanation"> If you already know the size of your response body before you start writing to the <a href="http://java.sun.com/javase/6/docs/api/java/io/OutputStream.html" class="javadoc">OutputStream</a> (e.g. you have the response as a byte array or file), then you can <em>help container and client by calling the <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setContentLength(int)" class="javadoc">setContentLength</a></em> method: </p><pre class="subSecCode"><code>request.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setContentLength(int)" class="javadoc"><em>setContentLength</em></a>(1024);  <span class="cmt">// set length in bytes</span>
</code></pre><p class="subSecExplanation"> The method sets the <span class="idf">Content-Length</span> header value in the response and allows various optimizations in both server and client. Note that <em>the server will automatically close</em> the <a href="http://java.sun.com/javase/6/docs/api/java/io/OutputStream.html" class="javadoc">OutputStream</a> as soon as you wrote the specified amount of bytes. </p><p class="subSecExplanation">Setting the content length is usually <em>no good idea when using a <a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html" class="javadoc">PrintWriter</a></em> for output, as you can't know the content length in bytes without encoding the characters first (and if you already have an encoded result, just use an <a href="http://java.sun.com/javase/6/docs/api/java/io/OutputStream.html" class="javadoc">OutputStream</a>).</p></div></div><div id="colla_fileupload" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="fileupload.xhtml#fileupload" name="fileupload">File Upload</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('fileupload');">How to Receive File Uploads (Multi-Part File Upload)</a></div></div></div><div class="subSecRow1" id="sec_fileupload" style="display: none"><div class="subSecHead" id="sechd_fileupload"><a class="multipageHeadLink" href="fileupload.xhtml#fileupload" name="fileupload">File Upload</a></div><div class="subSecContent" id="seccnt_fileupload"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('fileupload');">How to Receive File Uploads (Multi-Part File Upload)</a></div><p class="subSecExplanation"> Unfortunately the Servlet API 2.5 does not support file upload yet (3.0 does). Handling file uploads from a form is rather complicated, so you <em>should use a library to parse the upload</em>. The most popular choice for this is <a href="http://commons.apache.org/fileupload/">Apache Commons FileUpload</a>, as it is free, flexible and fairly easy to use. </p><p class="subSecExplanation"> The following example should give you an idea of how to use Apache Commons FileUpload. For details you should consult the documentation provided by the project. </p><pre class="subSecCode"><code>import org.apache.commons.fileupload.*;
import org.apache.commons.fileupload.disk.*;
import org.apache.commons.fileupload.servlet.*;
import <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/package-summary.html" class="javadoc">javax.servlet.http.*</a>;
import <a href="http://java.sun.com/javase/6/docs/api/java/nio/package-summary.html" class="javadoc">java.nio.*</a>;
import <a href="http://java.sun.com/javase/6/docs/api/java/io/package-summary.html" class="javadoc">java.io.*</a>;
import <a href="http://java.sun.com/javase/6/docs/api/java/util/package-summary.html" class="javadoc">java.util.*</a>;

<span class="cmt">// Show form to let user upload a text file. Then print content as ASCII.</span>
public class UploadServlet extends <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html" class="javadoc">HttpServlet</a> {

    private void doGet(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
        throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a> {

        response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setContentType(java.lang.String)" class="javadoc">setContentType</a>("text/html; charset=US-ASCII");
        response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setCharacterEncoding(java.lang.String)" class="javadoc">setCharacterEncoding</a>("US-ASCII");

        <a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html" class="javadoc">PrintWriter</a> writer = response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#getWriter()" class="javadoc">getWriter</a>();
        writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#print(java.lang.String)" class="javadoc">print</a>("&lt;html&gt;&lt;head&gt;&lt;title&gt;Calculator&lt;/title&gt;&lt;/head&gt;&lt;body&gt;");
        writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#print(java.lang.String)" class="javadoc">print</a>("&lt;form method='POST' <em>enctype='multipart/form-data'</em>&gt;&lt;br&gt;");
        writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#print(java.lang.String)" class="javadoc">print</a>("&lt;input <em>type='file'</em> name='file'&gt;&lt;input type='submit'&gt;");
        writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#print(java.lang.String)" class="javadoc">print</a>("&lt;/form&gt;&lt;/html&gt;");
    }

    private void doPost(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
        throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a>, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletException.html" class="javadoc">ServletException</a> {

        if (!ServletFileUpload.isMultipartContent(request)) {
            throw new <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletException.html" class="javadoc">ServletException</a>("file missing");

        try {
            response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setContentType(java.lang.String)" class="javadoc">setContentType</a>("text/plain; charset=US-ASCII");
            response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setCharacterEncoding(java.lang.String)" class="javadoc">setCharacterEncoding</a>("US-ASCII");

            <a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html" class="javadoc">PrintWriter</a> writer = response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#getWriter()" class="javadoc">getWriter</a>();
            writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#println(java.lang.String)" class="javadoc">println</a>("Processing upload:\n");

            ServletFileUpload upload = new ServletFileUpload(new DiskFileItemFactory());
            List&lt;FileItem&gt; items = (List&lt;FileItem&gt;) upload.<em>parseRequest</em>(request);
            for (FileItem item: items) {
                w.printf("File '%s' for field '%s':\n", item.getName(), item.getFieldName());
                byte[] content = item.get();   <span class="cmt">// warning: use streams for long files</span>

                <span class="cmt">// this line decodes the byte array content as ASCII into a char array:</span>
                char[] decoded = <a href="http://java.sun.com/javase/6/docs/api/java/nio/charset/Charset.html#forName(java.lang.String)" class="javadoc">Charset.forName</a>("US-ASCII")
                    .<a href="http://java.sun.com/javase/6/docs/api/java/nio/charset/Charset.html#decode(java.nio.ByteBuffer)" class="javadoc">decode</a>(<a href="http://java.sun.com/javase/6/docs/api/java/nio/ByteBuffer.html#wrap(byte[])" class="javadoc">ByteBuffer.wrap</a>(content)).<a href="http://java.sun.com/javase/6/docs/api/java/nio/CharBuffer.html#array()" class="javadoc">array</a>();

                w.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#print(char[])" class="javadoc">print</a>(decoded);
                w.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#print(java.lang.String)" class="javadoc">print</a>("\n\n");
            }
        }
        catch (FileUploadException e) {
            throw new <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletException.html" class="javadoc">ServletException</a>(e);
        }
    }
}
</code></pre><p class="subSecExplanation"/></div></div><div id="colla_browserdetection" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="browserdetection.xhtml#browserdetection" name="browserdetection">Browser Detection</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('browserdetection');">How to Detect the User's Web Browser</a></div></div></div><div class="subSecRow2" id="sec_browserdetection" style="display: none"><div class="subSecHead" id="sechd_browserdetection"><a class="multipageHeadLink" href="browserdetection.xhtml#browserdetection" name="browserdetection">Browser Detection</a></div><div class="subSecContent" id="seccnt_browserdetection"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('browserdetection');">How to Detect the User's Web Browser</a></div><p class="subSecExplanation">Browsers usually identify themselves using the <em>user-agent</em> header. For example, Firefox 3.6 sends this value (split into two lines because it is so long):</p><pre class="subSecConfig">Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.2) 
      Gecko/20100115 Firefox/3.6 (.NET CLR 3.5.30729)</pre><p class="subSecExplanation"> While Internet Explorer 8.0 sends this: </p><pre class="subSecConfig">Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0; SLCC1; 
      .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.5.30729; .NET CLR 3.0.30729)</pre><p class="subSecExplanation">Both strings start with "Mozilla" to claim compatibility with the old <a href="http://en.wikipedia.org/wiki/Netscape_Navigator">Netscape Navigator</a>, but also include the operating system ("Windows NT 6.0" = Windows Vista), browser's internal rendering engine ("Gecko/20100115" and "Trident/4.0") as well as the browser itself ("Firefox/3.6" and "MSIE 8.0"). There is <em>no definite way of identifying the browser</em>, as there is no exact format for the user agent string. Another problem is that browsers try to improve compatibility by including the names of similar browsers into their user agent. Some obscure browsers even copy popular browser's user agent string (usually Internet Explorer's) to prevent sites from rejecting them.</p><p class="subSecExplanation">When you really need to identify the exact browser version, use a library like <a href="http://code.google.com/p/user-agent-utils/">user-agent-utils</a>. Those libraries usually come with large collections of known user agents and add some browser-specific forensics.</p><p class="subSecExplanation">Otherwise I would suggest to be pragmatic: identify strings in the user agent that look unique for that particular browser, and check whether the user agent strings contains them. This simple example checks for Internet Explorers and Firefoxes:</p><pre class="subSecCode"><code>String ua = request.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getHeader(java.lang.String)" class="javadoc">getHeader</a>("user-agent");
if (ua.contains("Firefox"))
    log("User seems to use Firefox");
else if (ua.contains("MSIE"))
    log("User seems to use Internet Explorer");
else
    log("User seems to use unknown browser.");
</code></pre></div></div><div id="colla_contentlanguage" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="contentlanguage.xhtml#contentlanguage" name="contentlanguage">Content Language</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('contentlanguage');">How to Declare the Content Language</a></div></div></div><div class="subSecRow1" id="sec_contentlanguage" style="display: none"><div class="subSecHead" id="sechd_contentlanguage"><a class="multipageHeadLink" href="contentlanguage.xhtml#contentlanguage" name="contentlanguage">Content Language</a></div><div class="subSecContent" id="seccnt_contentlanguage"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('contentlanguage');">How to Declare the Content Language</a></div><p class="subSecExplanation">The <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html" class="javadoc">ServletResponse</a> interface has a method <em><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setLocale(java.util.Locale)" class="javadoc">setLocale</a></em> that allows you to <em>set the content's locale</em>. It has two effects:</p><ul class="subSecList"><li>It <em>sets the <span class="idf">Content-Language</span></em> header field to declare the page's language.</li><li>If you are using a <span class="idf">Writer</span> <em>and don't set the character encoding</em> explicitly with <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setCharacterEncoding(java.lang.String)" class="javadoc">setCharacterEncoding</a>, the <em>container will choose an appropriate encoding</em> for your locale (<a href="#" id="tl-d1104e7541" class="dottedTooltip" onclick="return tlClick('tl-d1104e7541','pp-d1104e7541');" onmouseover="return tlOver('tl-d1104e7541','pp-d1104e7541');" onmouseout="return tlOut('tl-d1104e7541','pp-d1104e7541');">more</a>). In most cases you <em>should call <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setCharacterEncoding(java.lang.String)" class="javadoc">setCharacterEncoding</a></em> for more predictable behaviour.</li></ul><p class="subSecExplanation">Note that the <em><span class="idf">Content-Language</span> is hardly used</em> in browsers, but may be important for search engines. </p><p class="subSecExplanation">The following example prints the time in German language and declares it accordingly.</p><pre class="subSecCode"><code>protected void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
        throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a> {

    response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setContentType(java.lang.String)" class="javadoc">setContentType</a>("text/html; charset=UTF-8");
    response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setCharacterEncoding(java.lang.String)" class="javadoc">setCharacterEncoding</a>("UTF-8");
    response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setLocale(java.util.Locale)" class="javadoc"><em>setLocale</em></a>(<a href="http://java.sun.com/javase/6/docs/api/java/util/Locale.html#GERMAN" class="javadoc">Locale.GERMAN</a>);

    <a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html" class="javadoc">PrintWriter</a> writer = response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#getWriter()" class="javadoc">getWriter</a>();
    writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#print(java.lang.String)" class="javadoc">print</a>("&lt;html&gt;&lt;head&gt;&lt;title&gt;Zeit&lt;/title&gt;&lt;/head&gt;&lt;body&gt;");
    writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#format(java.util.Locale, java.lang.String, java.lang.Object...)" class="javadoc">printf</a>(<a href="http://java.sun.com/javase/6/docs/api/java/util/Locale.html#GERMAN" class="javadoc"><em>Locale.GERMAN</em></a>, "Die aktuelle Zeit ist: %tc", new Date());
    writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#print(java.lang.String)" class="javadoc">print</a>("&lt;/body&gt;&lt;/html&gt;");
}
</code></pre><p class="subSecExplanation"/></div></div><div id="colla_acceptedlanguages" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="acceptedlanguages.xhtml#acceptedlanguages" name="acceptedlanguages">Accepted Languages</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('acceptedlanguages');">How to Detect the Client's Preferred Languages</a></div></div></div><div class="subSecRow2" id="sec_acceptedlanguages" style="display: none"><div class="subSecHead" id="sechd_acceptedlanguages"><a class="multipageHeadLink" href="acceptedlanguages.xhtml#acceptedlanguages" name="acceptedlanguages">Accepted Languages</a></div><div class="subSecContent" id="seccnt_acceptedlanguages"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('acceptedlanguages');">How to Detect the Client's Preferred Languages</a></div><p class="subSecExplanation">Browsers <em>send a list of the user's preferred languages</em> in the <span class="idf">Accept-Language</span> header field. The Servlet API helps you using it with two methods in the <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html" class="javadoc">ServletRequest</a>:</p><ul class="subSecList"><li><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html#getLocale()" class="javadoc">getLocale</a> returns the client's preferred language</li><li><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html#getLocales()" class="javadoc">getLocales</a> returns all language the client accepts in order of preference</li></ul><p class="subSecExplanation">This example greets a visitor either in German or English, depending on what the user prefers:</p><pre class="subSecCode"><code>protected void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
        throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a> {

    <span class="cmt">// Locales supported by the servlet:</span>
    List&lt;<a href="http://java.sun.com/javase/6/docs/api/java/util/Locale.html" class="javadoc">Locale</a>&gt; supported = <a href="http://java.sun.com/javase/6/docs/api/java/util/Arrays.html#asList(java.lang.Object[])" class="javadoc">Arrays.asList</a>(<a href="http://java.sun.com/javase/6/docs/api/java/util/Locale.html#ENGLISH" class="javadoc">Locale.ENGLISH</a>, <a href="http://java.sun.com/javase/6/docs/api/java/util/Locale.html#GERMAN" class="javadoc">Locale.GERMAN</a>);

    <span class="cmt">// Locales supported by the client (ordered by preference):</span>
    List&lt;<a href="http://java.sun.com/javase/6/docs/api/java/util/Locale.html" class="javadoc">Locale</a>&gt; accepted = <a href="http://java.sun.com/javase/6/docs/api/java/util/Collections.html#list(java.util.Enumeration)" class="javadoc">Collections.list</a>(<em>request.getLocales()</em>);

    <span class="cmt">// determine best locale for the client</span>
    <a href="http://java.sun.com/javase/6/docs/api/java/util/Locale.html" class="javadoc">Locale</a> locale = <a href="http://java.sun.com/javase/6/docs/api/java/util/Locale.html#ENGLISH" class="javadoc">Locale.ENGLISH</a>;  <span class="cmt">// fallback default</span>
    for (<a href="http://java.sun.com/javase/6/docs/api/java/util/Locale.html" class="javadoc">Locale</a> a: accepted)
        for (<a href="http://java.sun.com/javase/6/docs/api/java/util/Locale.html" class="javadoc">Locale</a> s: supported)
            if (s.equals(a)) {
                locale = a;
                break;
            }

    response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setContentType(java.lang.String)" class="javadoc">setContentType</a>("text/plain; charset=UTF-8");
    response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setCharacterEncoding(java.lang.String)" class="javadoc">setCharacterEncoding</a>("UTF-8");
    response.<em><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setLocale(java.util.Locale)" class="javadoc">setLocale</a>(locale)</em>;      <span class="cmt">// declare content language</span>

    <a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html" class="javadoc">PrintWriter</a> writer = response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#getWriter()" class="javadoc">getWriter</a>();
    if (locale.equals(<a href="http://java.sun.com/javase/6/docs/api/java/util/Locale.html#ENGLISH" class="javadoc">Locale.ENGLISH</a>))
        writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#println(java.lang.String)" class="javadoc">println</a>("Hello, visitor!");
    else
        writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#println(java.lang.String)" class="javadoc">println</a>("Hallo, Besucher!");
    else
        assert false;                <span class="cmt">// can't happen</span>
}
</code></pre><p class="subSecExplanation"/></div></div><div id="colla_sendingxml" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="sendingxml.xhtml#sendingxml" name="sendingxml">Sending XML</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('sendingxml');">How to Send XML as Response</a></div></div></div><div class="subSecRow1" id="sec_sendingxml" style="display: none"><div class="subSecHead" id="sechd_sendingxml"><a class="multipageHeadLink" href="sendingxml.xhtml#sendingxml" name="sendingxml">Sending XML</a></div><div class="subSecContent" id="seccnt_sendingxml"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('sendingxml');">How to Send XML as Response</a></div><p class="subSecExplanation">You can use practially any XML API to create XML, just <em>set the content type correctly and write the XML to the <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/OuputStream.html" class="javadoc">OuputStream</a></em>. Alternatively you can also use a <a href="#" id="tl-d1104e7891" class="dottedTooltip" onclick="return tpcClick('tl-d1104e7891','pp-d1104e144');" onmouseover="return tpcOver('tl-d1104e7891','pp-d1104e144');" onmouseout="return tpcOut('tl-d1104e7891','pp-d1104e144');">JSP</a> to create the XML, which can sometimes be more convenient.</p><p class="subSecExplanation">The following example shows you how to send XML with the JAXB API:</p><pre class="subSecCode"><code>protected void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
    throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a> {

    MovieLibrary library = <span class="abstract">...</span>;                         <span class="cmt">// example tree from the <a href="/guide/jaxb/">JAXB Guide</a></span>

    response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setContentType(java.lang.String)" class="javadoc">setContentType</a>("<em>text/xml</em>");                <span class="cmt">// generic XML content type (<a href="#" id="tl-d1104e7946" class="dottedTooltip" onclick="return tlClick('tl-d1104e7946','pp-d1104e7946');" onmouseover="return tlOver('tl-d1104e7946','pp-d1104e7946');" onmouseout="return tlOut('tl-d1104e7946','pp-d1104e7946');">more</a>)</span>
    <em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXB.html#marshal(java.lang.Object, java.io.File)" class="javadoc">JAXB.marshal</a></em>(library, response.<em><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#getOutputStream()" class="javadoc">getOutputStream</a></em>());  <span class="cmt">// write XML with JAXB</span>
}
</code></pre><p class="subSecExplanation"/></div></div><div id="colla_dynamicimages" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="dynamicimages.xhtml#dynamicimages" name="dynamicimages">Dynamic Images</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('dynamicimages');">How to Generate Images as Response</a></div></div></div><div class="subSecRow2" id="sec_dynamicimages" style="display: none"><div class="subSecHead" id="sechd_dynamicimages"><a class="multipageHeadLink" href="dynamicimages.xhtml#dynamicimages" name="dynamicimages">Dynamic Images</a></div><div class="subSecContent" id="seccnt_dynamicimages"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('dynamicimages');">How to Generate Images as Response</a></div><p class="subSecExplanation">You can use the <a href="http://java.sun.com/products/java-media/2D/index.jsp">Java 2D API</a> to create images dynamically, encode them as PNG or JPEG and send them to the client. The following servlet draws a simple clock with the current time and sends it as response:</p><pre class="subSecCode"><code>import <a href="http://java.sun.com/javase/6/docs/api/java/awt/package-summary.html" class="javadoc">java.awt.*</a>;
import <a href="http://java.sun.com/javase/6/docs/api/java/awt/image/package-summary.html" class="javadoc">java.awt.image.*</a>;
import <a href="http://java.sun.com/javase/6/docs/api/javax/imageio/package-summary.html" class="javadoc">javax.imageio.*</a>;
import <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/package-summary.html" class="javadoc">javax.servlet.http.*</a>;
import <a href="http://java.sun.com/javase/6/docs/api/java/io/package-summary.html" class="javadoc">java.io.*</a>;
import <a href="http://java.sun.com/javase/6/docs/api/java/util/package-summary.html" class="javadoc">java.util.*</a>;

<span class="cmt">// Servlet that draws a clock</span>
public class ClockServlet extends <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html" class="javadoc">HttpServlet</a> {

    <span class="cmt">// create the image</span>
    private BufferedImage createClockImage() {
        <a href="http://java.sun.com/javase/6/docs/api/java/util/GregorianCalendar.html" class="javadoc">GregorianCalendar</a> cal = new <a href="http://java.sun.com/javase/6/docs/api/java/util/GregorianCalendar.html" class="javadoc">GregorianCalendar</a>();

        <a href="http://java.sun.com/javase/6/docs/api/java/awt/image/BufferedImage.html" class="javadoc">BufferedImage</a> img = <em>new <a href="http://java.sun.com/javase/6/docs/api/java/awt/image/BufferedImage.html" class="javadoc">BufferedImage</a></em>(400, 400, <a href="http://java.sun.com/javase/6/docs/api/java/awt/image/BufferedImage.html#TYPE_3BYTE_BGR" class="javadoc">BufferedImage.TYPE_3BYTE_BGR</a>);
        <a href="http://java.sun.com/javase/6/docs/api/java/awt/Graphics2D.html" class="javadoc">Graphics2D</a> g = img.<a href="http://java.sun.com/javase/6/docs/api/java/awt/image/BufferedImage.html#createGraphics()" class="javadoc">createGraphics</a>();

        <span class="cmt">// white background</span>
        g.<a href="http://java.sun.com/javase/6/docs/api/java/awt/Graphics.html#setColor(java.awt.Color)" class="javadoc">setColor</a>(<a href="http://java.sun.com/javase/6/docs/api/java/awt/Color.html#WHITE" class="javadoc">Color.WHITE</a>);
        g.<a href="http://java.sun.com/javase/6/docs/api/java/awt/Graphics.html#fillRect(int, int, int, int)" class="javadoc">fillRect</a>(0, 0, 400, 400);

        <span class="cmt">// draw black circle around clock</span>
        g.<a href="http://java.sun.com/javase/6/docs/api/java/awt/Graphics.html#setColor(java.awt.Color)" class="javadoc">setColor</a>(<a href="http://java.sun.com/javase/6/docs/api/java/awt/Color.html#BLACK" class="javadoc">Color.BLACK</a>);
        g.<a href="http://java.sun.com/javase/6/docs/api/java/awt/Graphics2D.html#setStroke(java.awt.Stroke)" class="javadoc">setStroke</a>(new <a href="http://java.sun.com/javase/6/docs/api/java/awt/BasicStroke.html" class="javadoc">BasicStroke</a>(5));
        g.<a href="http://java.sun.com/javase/6/docs/api/java/awt/Graphics.html#drawOval(int, int, int, int)" class="javadoc">drawOval</a>(20, 20, 360, 360);

        <span class="cmt">// draw hour hand</span>
        double hourRad = cal.<a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#get(int)" class="javadoc">get</a>(<a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#HOUR" class="javadoc">Calendar.HOUR</a>) * 2 * Math.PI / 12 - 0.5 * Math.PI;
        g.<a href="http://java.sun.com/javase/6/docs/api/java/awt/Graphics.html#drawLine(int, int, int, int)" class="javadoc">drawLine</a>(200, 200, 200 + (int) (100 * Math.cos(hourRad)), 
                   200 + (int) (100 * Math.sin(hourRad)));

        <span class="cmt">// draw minute hand</span>
        double minuteRad = cal.get(<a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#MINUTE" class="javadoc">Calendar.MINUTE</a>) * 2 * Math.PI / 60 - 0.5 * Math.PI;
        g.<a href="http://java.sun.com/javase/6/docs/api/java/awt/Graphics.html#drawLine(int, int, int, int)" class="javadoc">drawLine</a>(200, 200, 200 + (int) (170 * Math.cos(minuteRad)), 
                   200 + (int) (170 * Math.sin(minuteRad)));
        return img;
    }

    protected void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
          throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a> {

        response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setContentType(java.lang.String)" class="javadoc">setContentType</a>("image/png");

        OutputStream os = response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#getOutputStream()" class="javadoc">getOutputStream</a>();
        <a href="http://java.sun.com/javase/6/docs/api/javax/imageio/ImageIO.html#write(java.awt.image.RenderedImage, java.lang.String, java.io.OutputStream)" class="javadoc"><em>ImageIO.write</em></a>(createClockImage(), "PNG", os);  <span class="cmt">// write image as PNG (<a href="#" id="tl-d1104e8242" class="dottedTooltip" onclick="return tlClick('tl-d1104e8242','pp-d1104e8242');" onmouseover="return tlOver('tl-d1104e8242','pp-d1104e8242');" onmouseout="return tlOut('tl-d1104e8242','pp-d1104e8242');">more</a>)</span>
    }
}
</code></pre><p class="subSecExplanation"/></div></div><div id="colla_jspforward" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="jspforward.xhtml#jspforward" name="jspforward">JSP Forward</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('jspforward');">How to Use a JSP as Template</a></div></div></div><div class="subSecRow1" id="sec_jspforward" style="display: none"><div class="subSecHead" id="sechd_jspforward"><a class="multipageHeadLink" href="jspforward.xhtml#jspforward" name="jspforward">JSP Forward</a></div><div class="subSecContent" id="seccnt_jspforward"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('jspforward');">How to Use a JSP as Template</a></div><p class="subSecExplanation"> It's easy to <em>use a <a href="#" id="tl-d1104e8280" class="dottedTooltip" onclick="return tpcClick('tl-d1104e8280','pp-d1104e144');" onmouseover="return tpcOver('tl-d1104e8280','pp-d1104e144');" onmouseout="return tpcOut('tl-d1104e8280','pp-d1104e144');">JSP</a> to create your servlet's response</em> and even pass arguments to the JSP. <br/>The following JSP is stored in "/WEB-INF/jsps/time.jsp" and expects a variable 'myTime' containing a <span class="idf">java.util.Date</span>: </p><pre class="subSecConfig">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;%@ page language="java" contentType="text/html" pageEncoding="UTF-8"%&gt;
&lt;%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %&gt;
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
	"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html xmlns="http://www.w3.org/1999/xhtml"&gt;
	&lt;head&gt;&lt;title&gt;Time&lt;/title&gt;&lt;/head&gt;
	&lt;body&gt;
		Time: &lt;fmt:formatDate value="${<em>myTime</em>}" pattern="yyyy-MM-dd HH:mm:ss"/&gt;
	&lt;/body&gt;
&lt;/html&gt;
				</pre><p class="subSecExplanation"> To invoke the JSP, get a <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/RequestDispatcher.html" class="javadoc">RequestDispatcher</a> instance for the JSP from your <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html" class="javadoc">ServletContext</a> and tell the dispatcher to forward to the JSP. Variables are passed to the JSP by setting request attributes (<a href="#" id="tl-d1104e8304" class="dottedTooltip" onclick="return tlClick('tl-d1104e8304','pp-d1104e8304');" onmouseover="return tlOver('tl-d1104e8304','pp-d1104e8304');" onmouseout="return tlOut('tl-d1104e8304','pp-d1104e8304');">more</a>). </p><pre class="subSecCode"><code>protected void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
    throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a>, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletException.html" class="javadoc">ServletException</a> {

    <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/RequestDispatcher.html" class="javadoc">RequestDispatcher</a> rd = <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#getServletContext()" class="javadoc">getServletContext</a>().<em><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html#getRequestDispatcher(java.lang.String)" class="javadoc">getRequestDispatcher</a>("/WEB-INF/jsps/time.jsp")</em>;

    request.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html#setAttribute(java.lang.String, java.lang.Object)" class="javadoc">setAttribute</a>("<em>myTime</em>", new Date());  <span class="cmt">// pass current time</span>

    rd.<em><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/RequestDispatcher.html#forward(javax.servlet.ServletRequest, javax.servlet.ServletResponse)" class="javadoc">forward</a></em>(request, response);               <span class="cmt">// invoke JSP and return (<a href="#" id="tl-d1104e8371" class="dottedTooltip" onclick="return tlClick('tl-d1104e8371','pp-d1104e8371');" onmouseover="return tlOver('tl-d1104e8371','pp-d1104e8371');" onmouseout="return tlOut('tl-d1104e8371','pp-d1104e8371');">more</a>)</span>
}
</code></pre><p class="subSecExplanation"/></div></div><div id="colla_requestdispatcher" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="requestdispatcher.xhtml#requestdispatcher" name="requestdispatcher">RequestDispatcher</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('requestdispatcher');">How to Invoke Servlets and JSPs with the RequestDispatcher</a></div></div></div><div class="subSecRow2" id="sec_requestdispatcher" style="display: none"><div class="subSecHead" id="sechd_requestdispatcher"><a class="multipageHeadLink" href="requestdispatcher.xhtml#requestdispatcher" name="requestdispatcher">RequestDispatcher</a></div><div class="subSecContent" id="seccnt_requestdispatcher"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('requestdispatcher');">How to Invoke Servlets and JSPs with the RequestDispatcher</a></div><p class="subSecExplanation"> The <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/RequestDispatcher.html" class="javadoc">RequestDispatcher</a> allows your servlet to <em>invoke other servlets, JSPs or static pages</em>. You can either <em><a href="#" id="tl-d1104e8410" class="dottedTooltip" onclick="return tlClick('tl-d1104e8410','pp-d1104e8413');" onmouseover="return tlOver('tl-d1104e8410','pp-d1104e8413');" onmouseout="return tlOut('tl-d1104e8410','pp-d1104e8413');">forward</a> to them or only <a href="#" id="tl-d1104e8416" class="dottedTooltip" onclick="return tlClick('tl-d1104e8416','pp-d1104e8419');" onmouseover="return tlOver('tl-d1104e8416','pp-d1104e8419');" onmouseout="return tlOut('tl-d1104e8416','pp-d1104e8419');">include</a></em> their output. </p><h4 class="subSecMiniHeadline">Getting the RequestDispatcher</h4><p class="subSecExplanation">There are three ways to obtain a <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/RequestDispatcher.html" class="javadoc">RequestDispatcher</a>:</p><ul class="subSecList"><li><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html" class="javadoc">ServletContext</a>.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html#getNamedDispatcher(java.lang.String)" class="javadoc">getNamedDispatcher</a> returns a <em>dispatcher for a servlet with the specified <a href="#" id="tl-d1104e8443" class="dottedTooltip" onclick="return tlClick('tl-d1104e8443','pp-d1104e8446');" onmouseover="return tlOver('tl-d1104e8443','pp-d1104e8446');" onmouseout="return tlOut('tl-d1104e8443','pp-d1104e8446');">name</a></em>.</li><li><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html" class="javadoc">ServletContext</a>.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html#getRequestDispatcher(java.lang.String)" class="javadoc">getRequestDispatcher</a> looks up a <em>dispatcher that handles the given path</em>. The path must start with '/' and is relative to the web application root. It can be located in '/WEB-INF/'. If the path contains a query (like '/path?param1=value'), those value will be available in the invoked servlet's request parameters.</li><li><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html" class="javadoc">ServletRequest</a>.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html#getRequestDispatcher(java.lang.String)" class="javadoc">getRequestDispatcher</a> works like the method in <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html" class="javadoc">ServletContext</a>, but it also allows <em>paths relative to the original request path</em>.</li></ul><h4 class="subSecMiniHeadline">Request Attributes</h4><p class="subSecExplanation"> If a servlet's <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/RequestDispatcher.html" class="javadoc">RequestDispatcher</a> was obtained using one of the <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html#getRequestDispatcher(java.lang.String)" class="javadoc">getRequestDispatcher</a> methods (and <em>not using <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html#getNamedDispatcher(java.lang.String)" class="javadoc">getNamedDispatcher</a></em>), the following <em>attributes are available</em> in the <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html" class="javadoc">ServletRequest</a>:</p><div class="subSecTableDiv"><table><tr><th>When?</th><th>Name</th><th>Description</th></tr><tr><td>forward</td><td>javax.servlet.forward.request_uri</td><td>original request URI (see <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getRequestURI()" class="javadoc">getRequestURI</a>)</td></tr><tr><td>forward</td><td>javax.servlet.forward.context_path</td><td>original context path (see <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getContextPath()" class="javadoc">getContextPath</a>)</td></tr><tr><td>forward</td><td>javax.servlet.forward.servlet_path</td><td>original context path (see <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getServletPath()" class="javadoc">getServletPath</a>)</td></tr><tr><td>forward</td><td>javax.servlet.forward.path_info</td><td>original path info (see <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getPathInfo()" class="javadoc">getPathInfo</a>)</td></tr><tr><td>forward</td><td>javax.servlet.forward.query_string</td><td>original query string (see <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getQueryString()" class="javadoc">getQueryString</a>)</td></tr><tr><td>include</td><td>javax.servlet.include.request_uri</td><td>included request URI (see <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getRequestURI()" class="javadoc">getRequestURI</a>)</td></tr><tr><td>include</td><td>javax.servlet.include.context_path</td><td>included context path (see <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getContextPath()" class="javadoc">getContextPath</a>)</td></tr><tr><td>include</td><td>javax.servlet.include.servlet_path</td><td>included context path (see <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getServletPath()" class="javadoc">getServletPath</a>)</td></tr><tr><td>include</td><td>javax.servlet.include.path_info</td><td>included path info (see <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getPathInfo()" class="javadoc">getPathInfo</a>)</td></tr><tr><td>include</td><td>javax.servlet.include.query_string</td><td>included query string (see <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getQueryString()" class="javadoc">getQueryString</a>)</td></tr></table></div><h4 class="subSecMiniHeadline">Forwarding</h4><p class="subSecExplanation">Forwards are often useful if you need to return different pages depending on user input. This example displays a simple form in its GET method, and parses submitted values in its POST method. Depending on the input values, it will either forward to an error JSP or a result servlet (the JSP and result servlet are not shown here): </p><pre class="subSecCode"><code>import <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/package-summary.html" class="javadoc">javax.servlet.http.*</a>;

public class SumServlet extends <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html" class="javadoc">HttpServlet</a> {

    private void doGet(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
        throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a> {

        response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setContentType(java.lang.String)" class="javadoc">setContentType</a>("text/html; charset=UTF-8");
        response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setCharacterEncoding(java.lang.String)" class="javadoc">setCharacterEncoding</a>("UTF-8");

        <a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html" class="javadoc">PrintWriter</a> writer = response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#getWriter()" class="javadoc">getWriter</a>();
        writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#print(java.lang.String)" class="javadoc">print</a>("&lt;html&gt;&lt;head&gt;&lt;title&gt;Calculator&lt;/title&gt;&lt;/head&gt;&lt;body&gt;");
        writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#print(java.lang.String)" class="javadoc">print</a>("&lt;form method='POST'&gt;&lt;input name='x'&gt; + &lt;input name='y'&gt; ");
        writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#print(java.lang.String)" class="javadoc">print</a>("&lt;input type='submit' value='='&gt;&lt;/form&gt;");
        writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#print(java.lang.String)" class="javadoc">print</a>("&lt;/body&gt;&lt;/html&gt;");
    }

    private void doPost(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
        throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a> {

        String x = request.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html#getParameter(java.lang.String)" class="javadoc">getParameter</a>("x");
        String y = request.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html#getParameter(java.lang.String)" class="javadoc">getParameter</a>("y");

        <span class="cmt">// find target</span>
        <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/RequestDispatcher.html" class="javadoc">RequestDispatcher</a> disp;
        if (x != null &amp;&amp; y != null &amp;&amp;  x.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#matches(java.lang.String)" class="javadoc">matches</a>("[0-9]+") &amp;&amp; y.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#matches(java.lang.String)" class="javadoc">matches</a>("[0-9]+"))
            disp = <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#getServletContext()" class="javadoc">getServletContext</a>().<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html#getNamedDispatcher(java.lang.String)" class="javadoc"><em>getNamedDispatcher</em></a>("result-servlet");  <span class="cmt">// by servlet name</span>
        else
            disp = request.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html#getRequestDispatcher(java.lang.String)" class="javadoc"><em>getRequestDispatcher</em></a>("/WEB-INF/jsps/error.jsp");

        <span class="cmt">// forward to target</span>
        disp.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/RequestDispatcher.html#forward(javax.servlet.ServletRequest, javax.servlet.ServletResponse)" class="javadoc"><em>forward</em></a>(request, response);
    }
}
</code></pre><h4 class="subSecMiniHeadline">Forward to Static Content</h4><p class="subSecExplanation"> You can also forward to static files. Here is a much shorter implementation of the <span class="idf">AmPmFileServlet</span> <a href="#responsebinary" onclick="if (event.button == 0) return goTo('#responsebinary', true); else return true;">shown above</a>: </p><pre class="subSecCode"><code>import <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/package-summary.html" class="javadoc">javax.servlet.http.*</a>;

<span class="cmt">// Servlet that sends one of two PNG images, depending on time of day</span>
public class AmPmFileServlet extends <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html" class="javadoc">HttpServlet</a> {

    protected void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
           throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a>, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletException.html" class="javadoc">ServletException</a> {

        <span class="cmt">// before or after noon? determine path to the right image in the WAR</span>
        boolean isPM = new <a href="http://java.sun.com/javase/6/docs/api/java/util/GregorianCalendar.html" class="javadoc">GregorianCalendar</a>().get(<a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#AM_PM" class="javadoc">Calendar.AM_PM</a>) == <a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#PM" class="javadoc">Calendar.PM</a>; 
        String resName = "/WEB-INF/images/time" + (isPM ? "PM" : "AM") + ".png";

        <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#getServletContext()" class="javadoc">getServletContext</a>().<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html#getRequestDispatcher(java.lang.String)" class="javadoc">getRequestDispatcher</a>(resName).<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/RequestDispatcher.html#forward(javax.servlet.ServletRequest, javax.servlet.ServletResponse)" class="javadoc"><em>forward</em></a>(request, response);
    }
}
</code></pre><h4 class="subSecMiniHeadline">Including Content</h4><p class="subSecExplanation">When including a servlet, JSP or static content, <em>their output is written to including servlet's output</em>, but any changes to the header will be discarded:</p><pre class="subSecCode"><code>protected void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
      throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a>, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletException.html" class="javadoc">ServletException</a> {

    response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setContentType(java.lang.String)" class="javadoc">setContentType</a>("text/html; charset=UTF-8");
    response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setCharacterEncoding(java.lang.String)" class="javadoc">setCharacterEncoding</a>("UTF-8");
    <a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html" class="javadoc">PrintWriter</a> writer = response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#getWriter()" class="javadoc">getWriter</a>();

    request.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html#getRequestDispatcher(java.lang.String)" class="javadoc">getRequestDispatcher</a>("header.jsp").<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/RequestDispatcher.html#include(javax.servlet.ServletRequest, javax.servlet.ServletResponse)" class="javadoc"><em>include</em></a>(request, response);
    writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#println(java.lang.String)" class="javadoc">println</a>((new Date()).toString());
    request.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html#getRequestDispatcher(java.lang.String)" class="javadoc">getRequestDispatcher</a>("footer.jsp").<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/RequestDispatcher.html#include(javax.servlet.ServletRequest, javax.servlet.ServletResponse)" class="javadoc"><em>include</em></a>(request, response);
}
</code></pre><h4 class="subSecMiniHeadline">sendRedirect vs RequestDispatcher</h4><p class="subSecExplanation">The difference between a <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/RequestDispatcher.html" class="javadoc">RequestDispatcher</a> <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/RequestDispatcher.html#forward(javax.servlet.ServletRequest, javax.servlet.ServletResponse)" class="javadoc">forward</a> and the <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html#sendRedirect(java.lang.String)" class="javadoc">sendRedirect</a> method is that with a <span class="idf">forward</span>, everything happens on the server-side. <em>POST parameters will not be lost</em> and <em>the client will not notice</em> that it is being forwarded.<br/> With a redirect, the server <em>tells the client to request the new URL</em>, and thus the clients notices that it is being redirected. From the perspective of a web browser's user, the difference is that with a redirection she sees the new URL in the location bar. In many browsers going back to a page with redirection means that the user is being redirected again, effectively breaking the 'back' button.</p></div></div><div id="colla_virtualhosts" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="virtualhosts.xhtml#virtualhosts" name="virtualhosts">Virtual Hosts</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('virtualhosts');">How to Handle Virtual Hosts and Multiple IP Addresses?</a></div></div></div><div class="subSecRow1" id="sec_virtualhosts" style="display: none"><div class="subSecHead" id="sechd_virtualhosts"><a class="multipageHeadLink" href="virtualhosts.xhtml#virtualhosts" name="virtualhosts">Virtual Hosts</a></div><div class="subSecContent" id="seccnt_virtualhosts"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('virtualhosts');">How to Handle Virtual Hosts and Multiple IP Addresses?</a></div><p class="subSecExplanation"> A <em>web server may listen on several IP addresses</em>, and <em>each IP address may be used for several host names</em> (virtual hosts). The Servlet Specification established the following rules for virtual hosts:</p><ul class="subSecList"><li><em>Virtual servers can not share <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html" class="javadoc">ServletContext</a>s</em>. If you configure your server to use virtual hosts, you usually need to deploy your application for each virtual host separately.</li><li>A web container can use a single <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html" class="javadoc">ServletContext</a> for several addresses or names <em>if they all behave identically</em> (and thus behave like a single server).</li><li>Use the <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html" class="javadoc">ServletRequest</a>'s <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html#getLocalAddr()" class="javadoc">getLocalAddr</a> method to find out on which address a request has been received.</li><li>Read the <span class="idf">Host</span> header value with <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getHeader(java.lang.String)" class="javadoc">getHeader</a> to find out which virtual host name was requested by the client (note that some primitive clients may not send a <span class="idf">Host</span>).</li></ul></div></div><div id="colla_filters" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="filters.xhtml#filters" name="filters">Filters</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('filters');">How to Write Filters</a></div></div></div><div class="subSecRow2" id="sec_filters" style="display: none"><div class="subSecHead" id="sechd_filters"><a class="multipageHeadLink" href="filters.xhtml#filters" name="filters">Filters</a></div><div class="subSecContent" id="seccnt_filters"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('filters');">How to Write Filters</a></div><p class="subSecExplanation">By writing a <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/Filter.html" class="javadoc">Filter</a> class you can <em>analyze and modify a <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html" class="javadoc">ServletRequest</a></em> before it is processed by the container's regular dispatcher, and then <em>analyze and modify the resulting <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html" class="javadoc">ServletResponse</a></em>. Filters can be chained, meaning the request and response may run through several filters before being processed by the original handler (which may be a servlet, JSP or the container's handler for static content). <br/> The following filter writes all request parameters to the log: </p><pre class="subSecCode"><code>package com.jarfiller.example;
import <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/package-summary.html" class="javadoc">javax.servlet.*</a>;
import <a href="http://java.sun.com/javase/6/docs/api/java/io/package-summary.html" class="javadoc">java.io.*</a>;
import <a href="http://java.sun.com/javase/6/docs/api/java/util/package-summary.html" class="javadoc">java.util.*</a>;

<span class="cmt">// Logs parameters of every request</span>
public class LoggingFilter implements <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/Filter.html" class="javadoc">Filter</a> {
    private <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html" class="javadoc">ServletContext</a> ctx;

    public void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/Filter.html#init(javax.servlet.FilterConfig)" class="javadoc">init</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/FilterConfig.html" class="javadoc">FilterConfig</a> config) {
        ctx = config.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/FilterConfig.html#getServletContext()" class="javadoc">getServletContext</a>();
        ctx.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html#log(java.lang.String)" class="javadoc">log</a>("LoggingFilter started");
    }

    public void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/Filter.html#doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)" class="javadoc">doFilter</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html" class="javadoc">ServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html" class="javadoc">ServletResponse</a> response, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/FilterChain.html" class="javadoc">FilterChain</a> chain) 
        throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a>, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletException.html" class="javadoc">ServletException</a> {

        for (String name: <a href="http://java.sun.com/javase/6/docs/api/java/util/Collections.html#list(java.util.Enumeration)" class="javadoc">Collections.list</a>((<a href="http://java.sun.com/javase/6/docs/api/java/util/Enumeration.html" class="javadoc">Enumeration</a>&lt;String&gt;)request.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html#getParameterNames()" class="javadoc">getParameterNames</a>()))
            ctx.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html#log(java.lang.String)" class="javadoc">log</a>(String.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#format(java.lang.String, java.lang.Object...)" class="javadoc">format</a>("%s=%s", name, request.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html#getParameter(java.lang.String)" class="javadoc">getParameter</a>(name)));

        chain.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/FilterChain.html#doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse)" class="javadoc"><em>doFilter</em></a>(request, response);  <span class="cmt">// <em>important!</em> invoke the dispatcher (<a href="#" id="tl-d1104e9264" class="dottedTooltip" onclick="return tlClick('tl-d1104e9264','pp-d1104e9264');" onmouseover="return tlOver('tl-d1104e9264','pp-d1104e9264');" onmouseout="return tlOut('tl-d1104e9264','pp-d1104e9264');">more</a>)</span>
    }

    public void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/Filter.html#destroy()" class="javadoc">destroy</a>() {
        ctx.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html#log(java.lang.String)" class="javadoc">log</a>("LoggingFilter will destroyed now");
    }
}
</code></pre><p class="subSecExplanation">The filter's <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/Filter.html#doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)" class="javadoc">doFilter</a> method is invoked for every filtered request. It allows the filter to manipulate the request and response before either the original handler or the next filter in the chain is being invoked explicitly via <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/FilterChain.html" class="javadoc">FilterChain</a>.</p><p class="subSecExplanation">Like servlets, filters need to be <em>declared and mapped in your <span class="idf">web.xml</span></em>:</p><pre class="subSecConfig"><span class="tag">&lt;<a href="#" id="tl-d1104e9316" class="tooltip" onclick="return tlClick('tl-d1104e9316','pp-d1104e358');" onmouseover="return tlOver('tl-d1104e9316','pp-d1104e358');" onmouseout="return tlOut('tl-d1104e9316','pp-d1104e358');">filter</a>&gt;</span>                                  <span class="cmt">&lt;!-- <em>declares the <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/Filter.html" class="javadoc">Filter</a> class</em> --&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e9326" class="tooltip" onclick="return tlClick('tl-d1104e9326','pp-d1104e370');" onmouseover="return tlOver('tl-d1104e9326','pp-d1104e370');" onmouseout="return tlOut('tl-d1104e9326','pp-d1104e370');">filter-name</a>&gt;</span><em>logfilter</em><span class="tag">&lt;/<a href="#" id="tl-d1104e9330" class="tooltip" onclick="return tlClick('tl-d1104e9330','pp-d1104e370');" onmouseover="return tlOver('tl-d1104e9330','pp-d1104e370');" onmouseout="return tlOut('tl-d1104e9330','pp-d1104e370');">filter-name</a>&gt;</span>  <span class="cmt">&lt;!-- name must be unique --&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e9335" class="tooltip" onclick="return tlClick('tl-d1104e9335','pp-d1104e375');" onmouseover="return tlOver('tl-d1104e9335','pp-d1104e375');" onmouseout="return tlOut('tl-d1104e9335','pp-d1104e375');">filter-class</a>&gt;</span>com.jarfiller.example.LoggingFilter<span class="tag">&lt;/<a href="#" id="tl-d1104e9339" class="tooltip" onclick="return tlClick('tl-d1104e9339','pp-d1104e375');" onmouseover="return tlOver('tl-d1104e9339','pp-d1104e375');" onmouseout="return tlOut('tl-d1104e9339','pp-d1104e375');">filter-class</a>&gt;</span>
<span class="tag">&lt;/<a href="#" id="tl-d1104e9341" class="tooltip" onclick="return tlClick('tl-d1104e9341','pp-d1104e358');" onmouseover="return tlOver('tl-d1104e9341','pp-d1104e358');" onmouseout="return tlOut('tl-d1104e9341','pp-d1104e358');">filter</a>&gt;</span>


<span class="tag">&lt;<a href="#" id="tl-d1104e9343" class="tooltip" onclick="return tlClick('tl-d1104e9343','pp-d1104e396');" onmouseover="return tlOver('tl-d1104e9343','pp-d1104e396');" onmouseout="return tlOut('tl-d1104e9343','pp-d1104e396');">filter-mapping</a>&gt;</span>                          <span class="cmt">&lt;!-- <em>maps the LoggingFilter</em> --&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e9350" class="tooltip" onclick="return tlClick('tl-d1104e9350','pp-d1104e401');" onmouseover="return tlOver('tl-d1104e9350','pp-d1104e401');" onmouseout="return tlOut('tl-d1104e9350','pp-d1104e401');">filter-name</a>&gt;</span><em>logfilter</em><span class="tag">&lt;/<a href="#" id="tl-d1104e9354" class="tooltip" onclick="return tlClick('tl-d1104e9354','pp-d1104e401');" onmouseover="return tlOver('tl-d1104e9354','pp-d1104e401');" onmouseout="return tlOut('tl-d1104e9354','pp-d1104e401');">filter-name</a>&gt;</span>  <span class="cmt">&lt;!-- must be the same as filter-name above --&gt;</span>
    
    <span class="tag">&lt;<a href="#" id="tl-d1104e9360" class="tooltip" onclick="return tlClick('tl-d1104e9360','pp-d1104e290');" onmouseover="return tlOver('tl-d1104e9360','pp-d1104e290');" onmouseout="return tlOut('tl-d1104e9360','pp-d1104e290');">url-pattern</a>&gt;</span>*.jsp<span class="tag">&lt;/<a href="#" id="tl-d1104e9363" class="tooltip" onclick="return tlClick('tl-d1104e9363','pp-d1104e290');" onmouseover="return tlOver('tl-d1104e9363','pp-d1104e290');" onmouseout="return tlOut('tl-d1104e9363','pp-d1104e290');">url-pattern</a>&gt;</span>      <span class="cmt">&lt;!-- match all JSPs,  --&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e9368" class="tooltip" onclick="return tlClick('tl-d1104e9368','pp-d1104e290');" onmouseover="return tlOver('tl-d1104e9368','pp-d1104e290');" onmouseout="return tlOut('tl-d1104e9368','pp-d1104e290');">url-pattern</a>&gt;</span>/work/*<span class="tag">&lt;/<a href="#" id="tl-d1104e9371" class="tooltip" onclick="return tlClick('tl-d1104e9371','pp-d1104e290');" onmouseover="return tlOver('tl-d1104e9371','pp-d1104e290');" onmouseout="return tlOut('tl-d1104e9371','pp-d1104e290');">url-pattern</a>&gt;</span>    <span class="cmt">&lt;!-- plus everything in /work,  --&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e9377" class="tooltip" onclick="return tlClick('tl-d1104e9377','pp-d1104e298');" onmouseover="return tlOver('tl-d1104e9377','pp-d1104e298');" onmouseout="return tlOut('tl-d1104e9377','pp-d1104e298');">servlet-name</a>&gt;</span>counter<span class="tag">&lt;/<a href="#" id="tl-d1104e9380" class="tooltip" onclick="return tlClick('tl-d1104e9380','pp-d1104e298');" onmouseover="return tlOver('tl-d1104e9380','pp-d1104e298');" onmouseout="return tlOut('tl-d1104e9380','pp-d1104e298');">servlet-name</a>&gt;</span>  <span class="cmt">&lt;!-- plus the 'counter' servlet --&gt;</span>
    
    <span class="tag">&lt;<a href="#" id="tl-d1104e9385" class="tooltip" onclick="return tlClick('tl-d1104e9385','pp-d1104e409');" onmouseover="return tlOver('tl-d1104e9385','pp-d1104e409');" onmouseout="return tlOut('tl-d1104e9385','pp-d1104e409');">dispatcher</a>&gt;</span>REQUEST<span class="tag">&lt;/<a href="#" id="tl-d1104e9388" class="tooltip" onclick="return tlClick('tl-d1104e9388','pp-d1104e409');" onmouseover="return tlOver('tl-d1104e9388','pp-d1104e409');" onmouseout="return tlOut('tl-d1104e9388','pp-d1104e409');">dispatcher</a>&gt;</span>      <span class="cmt">&lt;!-- filter regular requests (default if omitted), --&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e9394" class="tooltip" onclick="return tlClick('tl-d1104e9394','pp-d1104e409');" onmouseover="return tlOver('tl-d1104e9394','pp-d1104e409');" onmouseout="return tlOut('tl-d1104e9394','pp-d1104e409');">dispatcher</a>&gt;</span>FORWARD<span class="tag">&lt;/<a href="#" id="tl-d1104e9397" class="tooltip" onclick="return tlClick('tl-d1104e9397','pp-d1104e409');" onmouseover="return tlOver('tl-d1104e9397','pp-d1104e409');" onmouseout="return tlOut('tl-d1104e9397','pp-d1104e409');">dispatcher</a>&gt;</span>      <span class="cmt">&lt;!-- filter forwards, --&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e9402" class="tooltip" onclick="return tlClick('tl-d1104e9402','pp-d1104e409');" onmouseover="return tlOver('tl-d1104e9402','pp-d1104e409');" onmouseout="return tlOut('tl-d1104e9402','pp-d1104e409');">dispatcher</a>&gt;</span>INCLUDE<span class="tag">&lt;/<a href="#" id="tl-d1104e9405" class="tooltip" onclick="return tlClick('tl-d1104e9405','pp-d1104e409');" onmouseover="return tlOver('tl-d1104e9405','pp-d1104e409');" onmouseout="return tlOut('tl-d1104e9405','pp-d1104e409');">dispatcher</a>&gt;</span>      <span class="cmt">&lt;!-- filter includes, --&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e9411" class="tooltip" onclick="return tlClick('tl-d1104e9411','pp-d1104e409');" onmouseover="return tlOver('tl-d1104e9411','pp-d1104e409');" onmouseout="return tlOut('tl-d1104e9411','pp-d1104e409');">dispatcher</a>&gt;</span>ERROR<span class="tag">&lt;/<a href="#" id="tl-d1104e9414" class="tooltip" onclick="return tlClick('tl-d1104e9414','pp-d1104e409');" onmouseover="return tlOver('tl-d1104e9414','pp-d1104e409');" onmouseout="return tlOut('tl-d1104e9414','pp-d1104e409');">dispatcher</a>&gt;</span>        <span class="cmt">&lt;!-- and filter errors --&gt;</span>
<span class="tag">&lt;/<a href="#" id="tl-d1104e9419" class="tooltip" onclick="return tlClick('tl-d1104e9419','pp-d1104e396');" onmouseover="return tlOver('tl-d1104e9419','pp-d1104e396');" onmouseout="return tlOut('tl-d1104e9419','pp-d1104e396');">filter-mapping</a>&gt;</span>
</pre><p class="subSecExplanation">If several filter mappings match a request, they will be <em>processed in the order of their declaration</em>. Mappings for URL patterns are always processed before servlet name mappings.</p><h4 class="subSecMiniHeadline">Request/Response Wrapping</h4><p class="subSecExplanation">You can modify the request passed down the filter chain as well as the generated response by <em>wrapping the request and response objects</em>. The API provides you with two <a href="#" id="tl-d1104e9437" class="dottedTooltip" onclick="return tlClick('tl-d1104e9437','pp-d1104e9440');" onmouseover="return tlOver('tl-d1104e9437','pp-d1104e9440');" onmouseout="return tlOut('tl-d1104e9437','pp-d1104e9440');">call-through wrappers</a>, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequestWrapper.html" class="javadoc">HttpServletRequestWrapper</a> and <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponseWrapper.html" class="javadoc">HttpServletResponseWrapper</a>, that you can extend. Note that even with those helper classes, <em>writing a wrapper can be quite complex</em>, especially if you want to modify the content body and thus also need to wrap the <a href="http://java.sun.com/javase/6/docs/api/java/io/InputStream.html" class="javadoc">InputStream</a> or <a href="http://java.sun.com/javase/6/docs/api/java/io/OutputStream.html" class="javadoc">OutputStream</a>.</p><p class="subSecExplanation">This example filter uses wrappers to remove all cookies from the request and also blocks any cookies the handler tries to set in the response:</p><pre class="subSecCode"><code>package com.jarfiller.example;
import <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/package-summary.html" class="javadoc">javax.servlet.http.*</a>;
import <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/package-summary.html" class="javadoc">javax.servlet.*</a>;
import <a href="http://java.sun.com/javase/6/docs/api/java/io/package-summary.html" class="javadoc">java.io.*</a>;

<span class="cmt">// Removes cookies from request and response</span>
public class CookieFilter implements <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/Filter.html" class="javadoc">Filter</a> {
    private <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html" class="javadoc">ServletContext</a> ctx;

    public void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/Filter.html#init(javax.servlet.FilterConfig)" class="javadoc">init</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/FilterConfig.html" class="javadoc">FilterConfig</a> config) {
    }

    public void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/Filter.html#doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse, javax.servlet.FilterChain)" class="javadoc">doFilter</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html" class="javadoc">ServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html" class="javadoc">ServletResponse</a> response, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/FilterChain.html" class="javadoc">FilterChain</a> chain) 
        throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a>, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletException.html" class="javadoc">ServletException</a> {

        chain.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/FilterChain.html#doFilter(javax.servlet.ServletRequest, javax.servlet.ServletResponse)" class="javadoc">doFilter</a>(new NonCookieRequest(request), new NonCookieResponse(response));
    }

    public void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/Filter.html#destroy()" class="javadoc">destroy</a>() {
    }

    static class CookieRemovingServletRequest extends <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequestWrapper.html" class="javadoc">HttpServletRequestWrapper</a> {
        public CookieRemovingServletRequest(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html" class="javadoc">ServletRequest</a> request) {
            super((<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a>)request);
        }

        public <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/Cookie.html" class="javadoc">Cookie</a>[] <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getContextPath()" class="javadoc">getCookies</a>() {
            return null;  <span class="cmt">// no cookies visible</span>
        }
    }

    static class CookieRemovingServletResponse extends <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponseWrapper.html" class="javadoc">HttpServletResponseWrapper</a> {
        public CookieRemovingServletResponse(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html" class="javadoc">ServletResponse</a> response) {
            super((<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a>)response);
        }

        public void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html#addCookie(javax.servlet.http.Cookie)" class="javadoc">addCookie</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/Cookie.html" class="javadoc">Cookie</a> cookie) {
            <span class="cmt">// ignore!</span>
        }
    }
}
</code></pre><p class="subSecExplanation">Like <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/Servlet.html" class="javadoc">Servlet</a> implementations, <em>filter classes can use the <a href="http://java.sun.com/javaee/5/docs/api/javax/annotation/Resource.html" class="javadoc">@Resource</a> annotation</em>.</p></div></div><h2 id="sec_howtosessionssecurity" class="sectionHead"><a name="howtosessionssecurity">How to... Sessions and Security</a></h2><div class="sectionExpandAll">
			(<a href="#" onclick="&#xA;return showAll([['colla_usermanagement','sec_usermanagement'],['colla_declarativesecurity','sec_declarativesecurity'],['colla_requiringssl','sec_requiringssl'],['colla_programmaticsecurity','sec_programmaticsecurity'],['colla_cookielessessions','sec_cookielessessions'], null]); &#xA;">expand everything</a>)
		</div><div id="colla_usermanagement" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="usermanagement.xhtml#usermanagement" name="usermanagement">Authentication</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('usermanagement');">How to Authenticate and Manage Users</a></div></div></div><div class="subSecRow1" id="sec_usermanagement" style="display: none"><div class="subSecHead" id="sechd_usermanagement"><a class="multipageHeadLink" href="usermanagement.xhtml#usermanagement" name="usermanagement">Authentication</a></div><div class="subSecContent" id="seccnt_usermanagement"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('usermanagement');">How to Authenticate and Manage Users</a></div><p class="subSecExplanation">The Servlet API requires the container to offer a <em>rudimentary security system</em> which should be sufficient for most internal and corporate sites, but <em>not for consumer-oriented internet sites</em> (<a href="#" id="tl-d1104e9704" class="dottedTooltip" onclick="return tlClick('tl-d1104e9704','pp-d1104e9704');" onmouseover="return tlOver('tl-d1104e9704','pp-d1104e9704');" onmouseout="return tlOut('tl-d1104e9704','pp-d1104e9704');">more</a>).</p><ul class="subSecList"><li><em>Authentication mechanisms</em>: <ul><li><a href="http://en.wikipedia.org/wiki/Basic_access_authentication">HTTP Basic Authentication</a></li><li><a href="http://en.wikipedia.org/wiki/Digest_access_authentication">HTTP Digest Authentication</a> (optional)</li><li><a href="#" id="tl-d1104e9726" class="dottedTooltip" onclick="return tlClick('tl-d1104e9726','pp-d1104e9729');" onmouseover="return tlOver('tl-d1104e9726','pp-d1104e9729');" onmouseout="return tlOut('tl-d1104e9726','pp-d1104e9729');">SSL Client Authentication</a></li><li>Simple <a href="#" id="tl-d1104e9734" class="dottedTooltip" onclick="return tlClick('tl-d1104e9734','pp-d1104e9737');" onmouseover="return tlOver('tl-d1104e9734','pp-d1104e9737');" onmouseout="return tlOut('tl-d1104e9734','pp-d1104e9737');">form-based authentication</a></li></ul> </li><li><em>User management is container-specific</em> (<a href="#" id="tl-d1104e9751" class="dottedTooltip" onclick="return tlClick('tl-d1104e9751','pp-d1104e9751');" onmouseover="return tlOver('tl-d1104e9751','pp-d1104e9751');" onmouseout="return tlOut('tl-d1104e9751','pp-d1104e9751');">more</a>). In any case, a web application can <em>only get the request user's name and role</em>, but not any additional information, from the container.</li><li>Security is mostly role-based. A <em>web application declares security roles</em> in its <span class="idf">web.xml</span>, and the application defines the rights each role has. Each user can be in one or more roles. The mapping between users and their roles is container specific and must be done by an administrator or the deployer.</li></ul><p class="subSecExplanation"> In order to use the security system, the application needs to <em>declare roles and authentication mechanism</em> in its <span class="idf">web.xml</span> deployment descriptor. </p><h4 class="subSecMiniHeadline">Declaring Roles</h4><p class="subSecExplanation">All roles used by the application must be declared using the <span class="tag">&lt;<a href="#" id="tl-d1104e9785" class="tooltip" onclick="return tlClick('tl-d1104e9785','pp-d1104e622');" onmouseover="return tlOver('tl-d1104e9785','pp-d1104e622');" onmouseout="return tlOut('tl-d1104e9785','pp-d1104e622');">security-role</a>&gt;</span> element in the <span class="idf">web.xml</span> deployment descriptor. </p><pre class="subSecConfig"><span class="tag">&lt;<a href="#" id="tl-d1104e9794" class="tooltip" onclick="return tlClick('tl-d1104e9794','pp-d1104e622');" onmouseover="return tlOver('tl-d1104e9794','pp-d1104e622');" onmouseout="return tlOut('tl-d1104e9794','pp-d1104e622');">security-role</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e9797" class="tooltip" onclick="return tlClick('tl-d1104e9797','pp-d1104e330');" onmouseover="return tlOver('tl-d1104e9797','pp-d1104e330');" onmouseout="return tlOut('tl-d1104e9797','pp-d1104e330');">description</a>&gt;</span>Administrator Role<span class="tag">&lt;/<a href="#" id="tl-d1104e9800" class="tooltip" onclick="return tlClick('tl-d1104e9800','pp-d1104e330');" onmouseover="return tlOver('tl-d1104e9800','pp-d1104e330');" onmouseout="return tlOut('tl-d1104e9800','pp-d1104e330');">description</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e9802" class="tooltip" onclick="return tlClick('tl-d1104e9802','pp-d1104e630');" onmouseover="return tlOver('tl-d1104e9802','pp-d1104e630');" onmouseout="return tlOut('tl-d1104e9802','pp-d1104e630');">role-name</a>&gt;</span><em>admin</em><span class="tag">&lt;/<a href="#" id="tl-d1104e9806" class="tooltip" onclick="return tlClick('tl-d1104e9806','pp-d1104e630');" onmouseover="return tlOver('tl-d1104e9806','pp-d1104e630');" onmouseout="return tlOut('tl-d1104e9806','pp-d1104e630');">role-name</a>&gt;</span>
<span class="tag">&lt;/<a href="#" id="tl-d1104e9808" class="tooltip" onclick="return tlClick('tl-d1104e9808','pp-d1104e622');" onmouseover="return tlOver('tl-d1104e9808','pp-d1104e622');" onmouseout="return tlOut('tl-d1104e9808','pp-d1104e622');">security-role</a>&gt;</span>

<span class="tag">&lt;<a href="#" id="tl-d1104e9811" class="tooltip" onclick="return tlClick('tl-d1104e9811','pp-d1104e622');" onmouseover="return tlOver('tl-d1104e9811','pp-d1104e622');" onmouseout="return tlOut('tl-d1104e9811','pp-d1104e622');">security-role</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e9814" class="tooltip" onclick="return tlClick('tl-d1104e9814','pp-d1104e330');" onmouseover="return tlOver('tl-d1104e9814','pp-d1104e330');" onmouseout="return tlOut('tl-d1104e9814','pp-d1104e330');">description</a>&gt;</span>Privileged User<span class="tag">&lt;/<a href="#" id="tl-d1104e9817" class="tooltip" onclick="return tlClick('tl-d1104e9817','pp-d1104e330');" onmouseover="return tlOver('tl-d1104e9817','pp-d1104e330');" onmouseout="return tlOut('tl-d1104e9817','pp-d1104e330');">description</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e9819" class="tooltip" onclick="return tlClick('tl-d1104e9819','pp-d1104e630');" onmouseover="return tlOver('tl-d1104e9819','pp-d1104e630');" onmouseout="return tlOut('tl-d1104e9819','pp-d1104e630');">role-name</a>&gt;</span><em>privileged</em><span class="tag">&lt;/<a href="#" id="tl-d1104e9823" class="tooltip" onclick="return tlClick('tl-d1104e9823','pp-d1104e630');" onmouseover="return tlOver('tl-d1104e9823','pp-d1104e630');" onmouseout="return tlOut('tl-d1104e9823','pp-d1104e630');">role-name</a>&gt;</span>
<span class="tag">&lt;/<a href="#" id="tl-d1104e9825" class="tooltip" onclick="return tlClick('tl-d1104e9825','pp-d1104e622');" onmouseover="return tlOver('tl-d1104e9825','pp-d1104e622');" onmouseout="return tlOut('tl-d1104e9825','pp-d1104e622');">security-role</a>&gt;</span>

<span class="tag">&lt;<a href="#" id="tl-d1104e9828" class="tooltip" onclick="return tlClick('tl-d1104e9828','pp-d1104e622');" onmouseover="return tlOver('tl-d1104e9828','pp-d1104e622');" onmouseout="return tlOut('tl-d1104e9828','pp-d1104e622');">security-role</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e9831" class="tooltip" onclick="return tlClick('tl-d1104e9831','pp-d1104e330');" onmouseover="return tlOver('tl-d1104e9831','pp-d1104e330');" onmouseout="return tlOut('tl-d1104e9831','pp-d1104e330');">description</a>&gt;</span>Guest User<span class="tag">&lt;/<a href="#" id="tl-d1104e9834" class="tooltip" onclick="return tlClick('tl-d1104e9834','pp-d1104e330');" onmouseover="return tlOver('tl-d1104e9834','pp-d1104e330');" onmouseout="return tlOut('tl-d1104e9834','pp-d1104e330');">description</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e9836" class="tooltip" onclick="return tlClick('tl-d1104e9836','pp-d1104e630');" onmouseover="return tlOver('tl-d1104e9836','pp-d1104e630');" onmouseout="return tlOut('tl-d1104e9836','pp-d1104e630');">role-name</a>&gt;</span><em>guest</em><span class="tag">&lt;/<a href="#" id="tl-d1104e9840" class="tooltip" onclick="return tlClick('tl-d1104e9840','pp-d1104e630');" onmouseover="return tlOver('tl-d1104e9840','pp-d1104e630');" onmouseout="return tlOut('tl-d1104e9840','pp-d1104e630');">role-name</a>&gt;</span>
<span class="tag">&lt;/<a href="#" id="tl-d1104e9842" class="tooltip" onclick="return tlClick('tl-d1104e9842','pp-d1104e622');" onmouseover="return tlOver('tl-d1104e9842','pp-d1104e622');" onmouseout="return tlOut('tl-d1104e9842','pp-d1104e622');">security-role</a>&gt;</span>
				 </pre><h4 class="subSecMiniHeadline">Basic Authentication</h4><p class="subSecExplanation">For basic authentication, add this to your <span class="idf">web.xml</span> deployment descriptor:</p><pre class="subSecConfig"><span class="tag">&lt;<a href="#" id="tl-d1104e9855" class="tooltip" onclick="return tlClick('tl-d1104e9855','pp-d1104e607');" onmouseover="return tlOver('tl-d1104e9855','pp-d1104e607');" onmouseout="return tlOut('tl-d1104e9855','pp-d1104e607');">login-config</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e9858" class="tooltip" onclick="return tlClick('tl-d1104e9858','pp-d1104e609');" onmouseover="return tlOver('tl-d1104e9858','pp-d1104e609');" onmouseout="return tlOut('tl-d1104e9858','pp-d1104e609');">auth-method</a>&gt;</span>BASIC<span class="tag">&lt;/<a href="#" id="tl-d1104e9861" class="tooltip" onclick="return tlClick('tl-d1104e9861','pp-d1104e609');" onmouseover="return tlOver('tl-d1104e9861','pp-d1104e609');" onmouseout="return tlOut('tl-d1104e9861','pp-d1104e609');">auth-method</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e9863" class="tooltip" onclick="return tlClick('tl-d1104e9863','pp-d1104e611');" onmouseover="return tlOver('tl-d1104e9863','pp-d1104e611');" onmouseout="return tlOut('tl-d1104e9863','pp-d1104e611');">realm-name</a>&gt;</span>My Realm<span class="tag">&lt;/<a href="#" id="tl-d1104e9866" class="tooltip" onclick="return tlClick('tl-d1104e9866','pp-d1104e611');" onmouseover="return tlOver('tl-d1104e9866','pp-d1104e611');" onmouseout="return tlOut('tl-d1104e9866','pp-d1104e611');">realm-name</a>&gt;</span>       <span class="cmt">&lt;!-- shown to the user --&gt;</span>
<span class="tag">&lt;/<a href="#" id="tl-d1104e9872" class="tooltip" onclick="return tlClick('tl-d1104e9872','pp-d1104e607');" onmouseover="return tlOver('tl-d1104e9872','pp-d1104e607');" onmouseout="return tlOut('tl-d1104e9872','pp-d1104e607');">login-config</a>&gt;</span>
				 </pre><h4 class="subSecMiniHeadline">Digest Authentication</h4><p class="subSecExplanation"><span class="idf">DIGEST</span> authentication is optional and not supported by older browsers, but more secure than <span class="idf">BASIC:</span></p><pre class="subSecConfig"><span class="tag">&lt;<a href="#" id="tl-d1104e9887" class="tooltip" onclick="return tlClick('tl-d1104e9887','pp-d1104e607');" onmouseover="return tlOver('tl-d1104e9887','pp-d1104e607');" onmouseout="return tlOut('tl-d1104e9887','pp-d1104e607');">login-config</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e9890" class="tooltip" onclick="return tlClick('tl-d1104e9890','pp-d1104e609');" onmouseover="return tlOver('tl-d1104e9890','pp-d1104e609');" onmouseout="return tlOut('tl-d1104e9890','pp-d1104e609');">auth-method</a>&gt;</span>DIGEST<span class="tag">&lt;/<a href="#" id="tl-d1104e9893" class="tooltip" onclick="return tlClick('tl-d1104e9893','pp-d1104e609');" onmouseover="return tlOver('tl-d1104e9893','pp-d1104e609');" onmouseout="return tlOut('tl-d1104e9893','pp-d1104e609');">auth-method</a>&gt;</span>
<span class="tag">&lt;/<a href="#" id="tl-d1104e9895" class="tooltip" onclick="return tlClick('tl-d1104e9895','pp-d1104e607');" onmouseover="return tlOver('tl-d1104e9895','pp-d1104e607');" onmouseout="return tlOut('tl-d1104e9895','pp-d1104e607');">login-config</a>&gt;</span>
</pre><h4 class="subSecMiniHeadline">Form-based Authentication</h4><p class="subSecExplanation">For <span class="idf">FORM</span> authentication you need to create two pages containing the actual authentication screens:</p><pre class="subSecConfig"><span class="tag">&lt;<a href="#" id="tl-d1104e9908" class="tooltip" onclick="return tlClick('tl-d1104e9908','pp-d1104e607');" onmouseover="return tlOver('tl-d1104e9908','pp-d1104e607');" onmouseout="return tlOut('tl-d1104e9908','pp-d1104e607');">login-config</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e9911" class="tooltip" onclick="return tlClick('tl-d1104e9911','pp-d1104e609');" onmouseover="return tlOver('tl-d1104e9911','pp-d1104e609');" onmouseout="return tlOut('tl-d1104e9911','pp-d1104e609');">auth-method</a>&gt;</span>FORM<span class="tag">&lt;/<a href="#" id="tl-d1104e9914" class="tooltip" onclick="return tlClick('tl-d1104e9914','pp-d1104e609');" onmouseover="return tlOver('tl-d1104e9914','pp-d1104e609');" onmouseout="return tlOut('tl-d1104e9914','pp-d1104e609');">auth-method</a>&gt;</span>

    <span class="tag">&lt;<a href="#" id="tl-d1104e9916" class="tooltip" onclick="return tlClick('tl-d1104e9916','pp-d1104e613');" onmouseover="return tlOver('tl-d1104e9916','pp-d1104e613');" onmouseout="return tlOut('tl-d1104e9916','pp-d1104e613');">form-login-config</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e9919" class="tooltip" onclick="return tlClick('tl-d1104e9919','pp-d1104e618');" onmouseover="return tlOver('tl-d1104e9919','pp-d1104e618');" onmouseout="return tlOut('tl-d1104e9919','pp-d1104e618');">form-login-page</a>&gt;</span>/login.jsp<span class="tag">&lt;/<a href="#" id="tl-d1104e9922" class="tooltip" onclick="return tlClick('tl-d1104e9922','pp-d1104e618');" onmouseover="return tlOver('tl-d1104e9922','pp-d1104e618');" onmouseout="return tlOut('tl-d1104e9922','pp-d1104e618');">form-login-page</a>&gt;</span>           <span class="cmt">&lt;!-- login form --&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e9928" class="tooltip" onclick="return tlClick('tl-d1104e9928','pp-d1104e620');" onmouseover="return tlOver('tl-d1104e9928','pp-d1104e620');" onmouseout="return tlOut('tl-d1104e9928','pp-d1104e620');">form-error-page</a>&gt;</span>/login-error.html<span class="tag">&lt;/<a href="#" id="tl-d1104e9931" class="tooltip" onclick="return tlClick('tl-d1104e9931','pp-d1104e620');" onmouseover="return tlOver('tl-d1104e9931','pp-d1104e620');" onmouseout="return tlOut('tl-d1104e9931','pp-d1104e620');">form-error-page</a>&gt;</span>    <span class="cmt">&lt;!-- error page --&gt;</span>
    <span class="tag">&lt;/<a href="#" id="tl-d1104e9936" class="tooltip" onclick="return tlClick('tl-d1104e9936','pp-d1104e613');" onmouseover="return tlOver('tl-d1104e9936','pp-d1104e613');" onmouseout="return tlOut('tl-d1104e9936','pp-d1104e613');">form-login-config</a>&gt;</span>
<span class="tag">&lt;/<a href="#" id="tl-d1104e9938" class="tooltip" onclick="return tlClick('tl-d1104e9938','pp-d1104e607');" onmouseover="return tlOver('tl-d1104e9938','pp-d1104e607');" onmouseout="return tlOut('tl-d1104e9938','pp-d1104e607');">login-config</a>&gt;</span>
				 </pre><p class="subSecExplanation"> The login page <em>must have a HTML form</em> using the POST method, with a form action 'j_security_check' and two fields 'j_username' and 'j_password'. The form looks like this: </p><pre class="subSecConfig">&lt;form method="POST" action="j_security_check"&gt;
    &lt;input type="text" name="j_username" /&gt;
    &lt;input type="password" name="j_password" /&gt;
&lt;/form&gt;				 </pre><p class="subSecExplanation"/><h4 class="subSecMiniHeadline">SSL Client Authentication</h4><p class="subSecExplanation">To require authentication with a SSL client certificate, add this in your <span class="idf">web.xml</span> deployment descriptor:</p><pre class="subSecConfig"><span class="tag">&lt;<a href="#" id="tl-d1104e9963" class="tooltip" onclick="return tlClick('tl-d1104e9963','pp-d1104e607');" onmouseover="return tlOver('tl-d1104e9963','pp-d1104e607');" onmouseout="return tlOut('tl-d1104e9963','pp-d1104e607');">login-config</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e9966" class="tooltip" onclick="return tlClick('tl-d1104e9966','pp-d1104e609');" onmouseover="return tlOver('tl-d1104e9966','pp-d1104e609');" onmouseout="return tlOut('tl-d1104e9966','pp-d1104e609');">auth-method</a>&gt;</span>CLIENT-CERT<span class="tag">&lt;/<a href="#" id="tl-d1104e9969" class="tooltip" onclick="return tlClick('tl-d1104e9969','pp-d1104e609');" onmouseover="return tlOver('tl-d1104e9969','pp-d1104e609');" onmouseout="return tlOut('tl-d1104e9969','pp-d1104e609');">auth-method</a>&gt;</span>
<span class="tag">&lt;/<a href="#" id="tl-d1104e9971" class="tooltip" onclick="return tlClick('tl-d1104e9971','pp-d1104e607');" onmouseover="return tlOver('tl-d1104e9971','pp-d1104e607');" onmouseout="return tlOut('tl-d1104e9971','pp-d1104e607');">login-config</a>&gt;</span>	 
</pre><p class="subSecExplanation">When a client authenticated itself with a SSL client certificate, you can retrieve the certificate chain from the <a href="#attributes" onclick="if (event.button == 0) return goTo('#attributes', true); else return true;">request attribute</a> <span class="idf">javax.servlet.request.X509Certificate</span>. It contains an array of <a href="http://java.sun.com/javase/6/docs/api/javax/security/cert/X509Certificate.html" class="javadoc">java.security.cert.X509Certificate</a> instances.</p></div></div><div id="colla_declarativesecurity" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="declarativesecurity.xhtml#declarativesecurity" name="declarativesecurity">Declarative Security</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('declarativesecurity');">How to Restrict Access to a Web Application (Declarative Security)</a></div></div></div><div class="subSecRow2" id="sec_declarativesecurity" style="display: none"><div class="subSecHead" id="sechd_declarativesecurity"><a class="multipageHeadLink" href="declarativesecurity.xhtml#declarativesecurity" name="declarativesecurity">Declarative Security</a></div><div class="subSecContent" id="seccnt_declarativesecurity"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('declarativesecurity');">How to Restrict Access to a Web Application (Declarative Security)</a></div><p class="subSecExplanation">By default, <em>access to web applications is not restricted</em>. If you want to restrict access to your web application or parts thereof, including static content, you need to <em>declare those restrictions in your <span class="idf">web.xml</span></em> deployment descriptor. When a user requests a restricted page, the container will automatically ask her to log in using the mechanism set with <span class="tag">&lt;<a href="#" id="tl-d1104e10008" class="tooltip" onclick="return tlClick('tl-d1104e10008','pp-d1104e607');" onmouseover="return tlOver('tl-d1104e10008','pp-d1104e607');" onmouseout="return tlOut('tl-d1104e10008','pp-d1104e607');">login-config</a>&gt;</span> (see <a href="#usermanagement" onclick="if (event.button == 0) return goTo('#usermanagement', true); else return true;">authentication and user management</a>). </p><p class="subSecExplanation">The following <span class="idf">web.xml</span> snippet allows access to several sub-folders only to users who have either the 'admin' or the 'privileged' role.</p><pre class="subSecConfig"><span class="tag">&lt;<a href="#" id="tl-d1104e10022" class="tooltip" onclick="return tlClick('tl-d1104e10022','pp-d1104e579');" onmouseover="return tlOver('tl-d1104e10022','pp-d1104e579');" onmouseout="return tlOut('tl-d1104e10022','pp-d1104e579');">security-constraint</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e10025" class="tooltip" onclick="return tlClick('tl-d1104e10025','pp-d1104e581');" onmouseover="return tlOver('tl-d1104e10025','pp-d1104e581');" onmouseout="return tlOut('tl-d1104e10025','pp-d1104e581');">web-resource-collection</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e10028" class="tooltip" onclick="return tlClick('tl-d1104e10028','pp-d1104e586');" onmouseover="return tlOver('tl-d1104e10028','pp-d1104e586');" onmouseout="return tlOut('tl-d1104e10028','pp-d1104e586');">web-resource-name</a>&gt;</span>Privileged area<span class="tag">&lt;/<a href="#" id="tl-d1104e10031" class="tooltip" onclick="return tlClick('tl-d1104e10031','pp-d1104e586');" onmouseover="return tlOver('tl-d1104e10031','pp-d1104e586');" onmouseout="return tlOut('tl-d1104e10031','pp-d1104e586');">web-resource-name</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e10033" class="tooltip" onclick="return tlClick('tl-d1104e10033','pp-d1104e588');" onmouseover="return tlOver('tl-d1104e10033','pp-d1104e588');" onmouseout="return tlOut('tl-d1104e10033','pp-d1104e588');">url-pattern</a>&gt;</span>/restricted/*<span class="tag">&lt;/<a href="#" id="tl-d1104e10036" class="tooltip" onclick="return tlClick('tl-d1104e10036','pp-d1104e588');" onmouseover="return tlOver('tl-d1104e10036','pp-d1104e588');" onmouseout="return tlOut('tl-d1104e10036','pp-d1104e588');">url-pattern</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e10039" class="tooltip" onclick="return tlClick('tl-d1104e10039','pp-d1104e588');" onmouseover="return tlOver('tl-d1104e10039','pp-d1104e588');" onmouseout="return tlOut('tl-d1104e10039','pp-d1104e588');">url-pattern</a>&gt;</span>/premium/*<span class="tag">&lt;/<a href="#" id="tl-d1104e10042" class="tooltip" onclick="return tlClick('tl-d1104e10042','pp-d1104e588');" onmouseover="return tlOver('tl-d1104e10042','pp-d1104e588');" onmouseout="return tlOut('tl-d1104e10042','pp-d1104e588');">url-pattern</a>&gt;</span> 
        <span class="tag">&lt;<a href="#" id="tl-d1104e10044" class="tooltip" onclick="return tlClick('tl-d1104e10044','pp-d1104e588');" onmouseover="return tlOver('tl-d1104e10044','pp-d1104e588');" onmouseout="return tlOut('tl-d1104e10044','pp-d1104e588');">url-pattern</a>&gt;</span>/dyn/stats/*<span class="tag">&lt;/<a href="#" id="tl-d1104e10047" class="tooltip" onclick="return tlClick('tl-d1104e10047','pp-d1104e588');" onmouseover="return tlOver('tl-d1104e10047','pp-d1104e588');" onmouseout="return tlOut('tl-d1104e10047','pp-d1104e588');">url-pattern</a>&gt;</span> 
    <span class="tag">&lt;/<a href="#" id="tl-d1104e10049" class="tooltip" onclick="return tlClick('tl-d1104e10049','pp-d1104e581');" onmouseover="return tlOver('tl-d1104e10049','pp-d1104e581');" onmouseout="return tlOut('tl-d1104e10049','pp-d1104e581');">web-resource-collection</a>&gt;</span>
    
    <span class="tag">&lt;<a href="#" id="tl-d1104e10051" class="tooltip" onclick="return tlClick('tl-d1104e10051','pp-d1104e592');" onmouseover="return tlOver('tl-d1104e10051','pp-d1104e592');" onmouseout="return tlOut('tl-d1104e10051','pp-d1104e592');">auth-constraint</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e10055" class="tooltip" onclick="return tlClick('tl-d1104e10055','pp-d1104e594');" onmouseover="return tlOver('tl-d1104e10055','pp-d1104e594');" onmouseout="return tlOut('tl-d1104e10055','pp-d1104e594');">role-name</a>&gt;</span>admin<span class="tag">&lt;/<a href="#" id="tl-d1104e10058" class="tooltip" onclick="return tlClick('tl-d1104e10058','pp-d1104e594');" onmouseover="return tlOver('tl-d1104e10058','pp-d1104e594');" onmouseout="return tlOut('tl-d1104e10058','pp-d1104e594');">role-name</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e10060" class="tooltip" onclick="return tlClick('tl-d1104e10060','pp-d1104e594');" onmouseover="return tlOver('tl-d1104e10060','pp-d1104e594');" onmouseout="return tlOut('tl-d1104e10060','pp-d1104e594');">role-name</a>&gt;</span>privileged<span class="tag">&lt;/<a href="#" id="tl-d1104e10063" class="tooltip" onclick="return tlClick('tl-d1104e10063','pp-d1104e594');" onmouseover="return tlOver('tl-d1104e10063','pp-d1104e594');" onmouseout="return tlOut('tl-d1104e10063','pp-d1104e594');">role-name</a>&gt;</span>
    <span class="tag">&lt;/<a href="#" id="tl-d1104e10065" class="tooltip" onclick="return tlClick('tl-d1104e10065','pp-d1104e592');" onmouseover="return tlOver('tl-d1104e10065','pp-d1104e592');" onmouseout="return tlOut('tl-d1104e10065','pp-d1104e592');">auth-constraint</a>&gt;</span> 
<span class="tag">&lt;/<a href="#" id="tl-d1104e10067" class="tooltip" onclick="return tlClick('tl-d1104e10067','pp-d1104e579');" onmouseover="return tlOver('tl-d1104e10067','pp-d1104e579');" onmouseout="return tlOut('tl-d1104e10067','pp-d1104e579');">security-constraint</a>&gt;</span></pre><p class="subSecExplanation">The user can access the resource <em>if at least one <span class="tag">&lt;<a href="#" id="tl-d1104e10073" class="tooltip" onclick="return tlClick('tl-d1104e10073','pp-d1104e579');" onmouseover="return tlOver('tl-d1104e10073','pp-d1104e579');" onmouseout="return tlOut('tl-d1104e10073','pp-d1104e579');">security-constraint</a>&gt;</span> permits it</em>. Requiring two roles for accessing a resource is not possible with declarative security (but you can do this with <a href="#programmaticsecurity" onclick="if (event.button == 0) return goTo('#programmaticsecurity', true); else return true;">programmatic security</a>).</p><h4 class="subSecMiniHeadline">Allowing All Roles</h4><p class="subSecExplanation">The special role name '*' stands for all declared roles. Unauthenticated users do not have access.</p><pre class="subSecConfig"><span class="tag">&lt;<a href="#" id="tl-d1104e10089" class="tooltip" onclick="return tlClick('tl-d1104e10089','pp-d1104e579');" onmouseover="return tlOver('tl-d1104e10089','pp-d1104e579');" onmouseout="return tlOut('tl-d1104e10089','pp-d1104e579');">security-constraint</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e10092" class="tooltip" onclick="return tlClick('tl-d1104e10092','pp-d1104e581');" onmouseover="return tlOver('tl-d1104e10092','pp-d1104e581');" onmouseout="return tlOut('tl-d1104e10092','pp-d1104e581');">web-resource-collection</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e10095" class="tooltip" onclick="return tlClick('tl-d1104e10095','pp-d1104e586');" onmouseover="return tlOver('tl-d1104e10095','pp-d1104e586');" onmouseout="return tlOut('tl-d1104e10095','pp-d1104e586');">web-resource-name</a>&gt;</span>User area<span class="tag">&lt;/<a href="#" id="tl-d1104e10098" class="tooltip" onclick="return tlClick('tl-d1104e10098','pp-d1104e586');" onmouseover="return tlOver('tl-d1104e10098','pp-d1104e586');" onmouseout="return tlOut('tl-d1104e10098','pp-d1104e586');">web-resource-name</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e10100" class="tooltip" onclick="return tlClick('tl-d1104e10100','pp-d1104e588');" onmouseover="return tlOver('tl-d1104e10100','pp-d1104e588');" onmouseout="return tlOut('tl-d1104e10100','pp-d1104e588');">url-pattern</a>&gt;</span>/user/*<span class="tag">&lt;/<a href="#" id="tl-d1104e10103" class="tooltip" onclick="return tlClick('tl-d1104e10103','pp-d1104e588');" onmouseover="return tlOver('tl-d1104e10103','pp-d1104e588');" onmouseout="return tlOut('tl-d1104e10103','pp-d1104e588');">url-pattern</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e10106" class="tooltip" onclick="return tlClick('tl-d1104e10106','pp-d1104e588');" onmouseover="return tlOver('tl-d1104e10106','pp-d1104e588');" onmouseout="return tlOut('tl-d1104e10106','pp-d1104e588');">url-pattern</a>&gt;</span>/settings/*<span class="tag">&lt;/<a href="#" id="tl-d1104e10109" class="tooltip" onclick="return tlClick('tl-d1104e10109','pp-d1104e588');" onmouseover="return tlOver('tl-d1104e10109','pp-d1104e588');" onmouseout="return tlOut('tl-d1104e10109','pp-d1104e588');">url-pattern</a>&gt;</span> 
    <span class="tag">&lt;/<a href="#" id="tl-d1104e10111" class="tooltip" onclick="return tlClick('tl-d1104e10111','pp-d1104e581');" onmouseover="return tlOver('tl-d1104e10111','pp-d1104e581');" onmouseout="return tlOut('tl-d1104e10111','pp-d1104e581');">web-resource-collection</a>&gt;</span>
    
    <span class="tag">&lt;<a href="#" id="tl-d1104e10113" class="tooltip" onclick="return tlClick('tl-d1104e10113','pp-d1104e592');" onmouseover="return tlOver('tl-d1104e10113','pp-d1104e592');" onmouseout="return tlOut('tl-d1104e10113','pp-d1104e592');">auth-constraint</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e10116" class="tooltip" onclick="return tlClick('tl-d1104e10116','pp-d1104e594');" onmouseover="return tlOver('tl-d1104e10116','pp-d1104e594');" onmouseout="return tlOut('tl-d1104e10116','pp-d1104e594');">role-name</a>&gt;</span><em>*</em><span class="tag">&lt;/<a href="#" id="tl-d1104e10120" class="tooltip" onclick="return tlClick('tl-d1104e10120','pp-d1104e594');" onmouseover="return tlOver('tl-d1104e10120','pp-d1104e594');" onmouseout="return tlOut('tl-d1104e10120','pp-d1104e594');">role-name</a>&gt;</span>       <span class="cmt">&lt;!-- allow all roles --&gt;</span>
    <span class="tag">&lt;/<a href="#" id="tl-d1104e10126" class="tooltip" onclick="return tlClick('tl-d1104e10126','pp-d1104e592');" onmouseover="return tlOver('tl-d1104e10126','pp-d1104e592');" onmouseout="return tlOut('tl-d1104e10126','pp-d1104e592');">auth-constraint</a>&gt;</span> 
<span class="tag">&lt;/<a href="#" id="tl-d1104e10128" class="tooltip" onclick="return tlClick('tl-d1104e10128','pp-d1104e579');" onmouseover="return tlOver('tl-d1104e10128','pp-d1104e579');" onmouseout="return tlOut('tl-d1104e10128','pp-d1104e579');">security-constraint</a>&gt;</span></pre><h4 class="subSecMiniHeadline">Forbid Access to All Roles</h4><p class="subSecExplanation">If you want to forbid access for all roles (e.g. for data files used by the servlet), leave the <span class="tag">&lt;<a href="#" id="tl-d1104e10135" class="tooltip" onclick="return tlClick('tl-d1104e10135','pp-d1104e592');" onmouseover="return tlOver('tl-d1104e10135','pp-d1104e592');" onmouseout="return tlOut('tl-d1104e10135','pp-d1104e592');">auth-constraint</a>&gt;</span> empty:</p><pre class="subSecConfig"><span class="tag">&lt;<a href="#" id="tl-d1104e10140" class="tooltip" onclick="return tlClick('tl-d1104e10140','pp-d1104e579');" onmouseover="return tlOver('tl-d1104e10140','pp-d1104e579');" onmouseout="return tlOut('tl-d1104e10140','pp-d1104e579');">security-constraint</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e10143" class="tooltip" onclick="return tlClick('tl-d1104e10143','pp-d1104e581');" onmouseover="return tlOver('tl-d1104e10143','pp-d1104e581');" onmouseout="return tlOut('tl-d1104e10143','pp-d1104e581');">web-resource-collection</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e10146" class="tooltip" onclick="return tlClick('tl-d1104e10146','pp-d1104e586');" onmouseover="return tlOver('tl-d1104e10146','pp-d1104e586');" onmouseout="return tlOut('tl-d1104e10146','pp-d1104e586');">web-resource-name</a>&gt;</span>Data area<span class="tag">&lt;/<a href="#" id="tl-d1104e10149" class="tooltip" onclick="return tlClick('tl-d1104e10149','pp-d1104e586');" onmouseover="return tlOver('tl-d1104e10149','pp-d1104e586');" onmouseout="return tlOut('tl-d1104e10149','pp-d1104e586');">web-resource-name</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e10151" class="tooltip" onclick="return tlClick('tl-d1104e10151','pp-d1104e588');" onmouseover="return tlOver('tl-d1104e10151','pp-d1104e588');" onmouseout="return tlOut('tl-d1104e10151','pp-d1104e588');">url-pattern</a>&gt;</span>/data/*<span class="tag">&lt;/<a href="#" id="tl-d1104e10154" class="tooltip" onclick="return tlClick('tl-d1104e10154','pp-d1104e588');" onmouseover="return tlOver('tl-d1104e10154','pp-d1104e588');" onmouseout="return tlOut('tl-d1104e10154','pp-d1104e588');">url-pattern</a>&gt;</span>
    <span class="tag">&lt;/<a href="#" id="tl-d1104e10157" class="tooltip" onclick="return tlClick('tl-d1104e10157','pp-d1104e581');" onmouseover="return tlOver('tl-d1104e10157','pp-d1104e581');" onmouseout="return tlOut('tl-d1104e10157','pp-d1104e581');">web-resource-collection</a>&gt;</span>
    
    <span class="tag">&lt;<a href="#" id="tl-d1104e10159" class="tooltip" onclick="return tlClick('tl-d1104e10159','pp-d1104e592');" onmouseover="return tlOver('tl-d1104e10159','pp-d1104e592');" onmouseout="return tlOut('tl-d1104e10159','pp-d1104e592');">auth-constraint</a>&gt;</span>       <span class="cmt">&lt;!-- empty constraint: forbid all access --&gt;</span>
    <span class="tag">&lt;/<a href="#" id="tl-d1104e10165" class="tooltip" onclick="return tlClick('tl-d1104e10165','pp-d1104e592');" onmouseover="return tlOver('tl-d1104e10165','pp-d1104e592');" onmouseout="return tlOut('tl-d1104e10165','pp-d1104e592');">auth-constraint</a>&gt;</span> 
<span class="tag">&lt;/<a href="#" id="tl-d1104e10167" class="tooltip" onclick="return tlClick('tl-d1104e10167','pp-d1104e579');" onmouseover="return tlOver('tl-d1104e10167','pp-d1104e579');" onmouseout="return tlOut('tl-d1104e10167','pp-d1104e579');">security-constraint</a>&gt;</span></pre><h4 class="subSecMiniHeadline">Restricting Access by HTTP Method</h4><p class="subSecExplanation">By default, a <span class="tag">&lt;<a href="#" id="tl-d1104e10175" class="tooltip" onclick="return tlClick('tl-d1104e10175','pp-d1104e581');" onmouseover="return tlOver('tl-d1104e10175','pp-d1104e581');" onmouseout="return tlOut('tl-d1104e10175','pp-d1104e581');">web-resource-collection</a>&gt;</span> applies to all HTTP methods. You can also limit access by method: </p><pre class="subSecConfig"><span class="tag">&lt;<a href="#" id="tl-d1104e10180" class="tooltip" onclick="return tlClick('tl-d1104e10180','pp-d1104e579');" onmouseover="return tlOver('tl-d1104e10180','pp-d1104e579');" onmouseout="return tlOut('tl-d1104e10180','pp-d1104e579');">security-constraint</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e10183" class="tooltip" onclick="return tlClick('tl-d1104e10183','pp-d1104e581');" onmouseover="return tlOver('tl-d1104e10183','pp-d1104e581');" onmouseout="return tlOut('tl-d1104e10183','pp-d1104e581');">web-resource-collection</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e10186" class="tooltip" onclick="return tlClick('tl-d1104e10186','pp-d1104e586');" onmouseover="return tlOver('tl-d1104e10186','pp-d1104e586');" onmouseout="return tlOut('tl-d1104e10186','pp-d1104e586');">web-resource-name</a>&gt;</span>Resource Modification<span class="tag">&lt;/<a href="#" id="tl-d1104e10189" class="tooltip" onclick="return tlClick('tl-d1104e10189','pp-d1104e586');" onmouseover="return tlOver('tl-d1104e10189','pp-d1104e586');" onmouseout="return tlOut('tl-d1104e10189','pp-d1104e586');">web-resource-name</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e10191" class="tooltip" onclick="return tlClick('tl-d1104e10191','pp-d1104e588');" onmouseover="return tlOver('tl-d1104e10191','pp-d1104e588');" onmouseout="return tlOut('tl-d1104e10191','pp-d1104e588');">url-pattern</a>&gt;</span>/*<span class="tag">&lt;/<a href="#" id="tl-d1104e10194" class="tooltip" onclick="return tlClick('tl-d1104e10194','pp-d1104e588');" onmouseover="return tlOver('tl-d1104e10194','pp-d1104e588');" onmouseout="return tlOut('tl-d1104e10194','pp-d1104e588');">url-pattern</a>&gt;</span>
        
        <span class="tag">&lt;<a href="#" id="tl-d1104e10197" class="tooltip" onclick="return tlClick('tl-d1104e10197','pp-d1104e590');" onmouseover="return tlOver('tl-d1104e10197','pp-d1104e590');" onmouseout="return tlOut('tl-d1104e10197','pp-d1104e590');">http-method</a>&gt;</span><em>DELETE</em><span class="tag">&lt;/<a href="#" id="tl-d1104e10201" class="tooltip" onclick="return tlClick('tl-d1104e10201','pp-d1104e590');" onmouseover="return tlOver('tl-d1104e10201','pp-d1104e590');" onmouseout="return tlOut('tl-d1104e10201','pp-d1104e590');">http-method</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e10203" class="tooltip" onclick="return tlClick('tl-d1104e10203','pp-d1104e590');" onmouseover="return tlOver('tl-d1104e10203','pp-d1104e590');" onmouseout="return tlOut('tl-d1104e10203','pp-d1104e590');">http-method</a>&gt;</span><em>PUT</em><span class="tag">&lt;/<a href="#" id="tl-d1104e10207" class="tooltip" onclick="return tlClick('tl-d1104e10207','pp-d1104e590');" onmouseover="return tlOver('tl-d1104e10207','pp-d1104e590');" onmouseout="return tlOut('tl-d1104e10207','pp-d1104e590');">http-method</a>&gt;</span>
    <span class="tag">&lt;/<a href="#" id="tl-d1104e10209" class="tooltip" onclick="return tlClick('tl-d1104e10209','pp-d1104e581');" onmouseover="return tlOver('tl-d1104e10209','pp-d1104e581');" onmouseout="return tlOut('tl-d1104e10209','pp-d1104e581');">web-resource-collection</a>&gt;</span>
    
    <span class="tag">&lt;<a href="#" id="tl-d1104e10211" class="tooltip" onclick="return tlClick('tl-d1104e10211','pp-d1104e592');" onmouseover="return tlOver('tl-d1104e10211','pp-d1104e592');" onmouseout="return tlOut('tl-d1104e10211','pp-d1104e592');">auth-constraint</a>&gt;</span>   <span class="cmt">&lt;!-- Only admins can delete and put --&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e10218" class="tooltip" onclick="return tlClick('tl-d1104e10218','pp-d1104e594');" onmouseover="return tlOver('tl-d1104e10218','pp-d1104e594');" onmouseout="return tlOut('tl-d1104e10218','pp-d1104e594');">role-name</a>&gt;</span>admin<span class="tag">&lt;/<a href="#" id="tl-d1104e10221" class="tooltip" onclick="return tlClick('tl-d1104e10221','pp-d1104e594');" onmouseover="return tlOver('tl-d1104e10221','pp-d1104e594');" onmouseout="return tlOut('tl-d1104e10221','pp-d1104e594');">role-name</a>&gt;</span>
    <span class="tag">&lt;/<a href="#" id="tl-d1104e10223" class="tooltip" onclick="return tlClick('tl-d1104e10223','pp-d1104e592');" onmouseover="return tlOver('tl-d1104e10223','pp-d1104e592');" onmouseout="return tlOut('tl-d1104e10223','pp-d1104e592');">auth-constraint</a>&gt;</span> 
<span class="tag">&lt;/<a href="#" id="tl-d1104e10225" class="tooltip" onclick="return tlClick('tl-d1104e10225','pp-d1104e579');" onmouseover="return tlOver('tl-d1104e10225','pp-d1104e579');" onmouseout="return tlOut('tl-d1104e10225','pp-d1104e579');">security-constraint</a>&gt;</span></pre><p class="subSecExplanation"/></div></div><div id="colla_requiringssl" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="requiringssl.xhtml#requiringssl" name="requiringssl">SSL</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('requiringssl');">How to Require HTTPS / SSL</a></div></div></div><div class="subSecRow1" id="sec_requiringssl" style="display: none"><div class="subSecHead" id="sechd_requiringssl"><a class="multipageHeadLink" href="requiringssl.xhtml#requiringssl" name="requiringssl">SSL</a></div><div class="subSecContent" id="seccnt_requiringssl"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('requiringssl');">How to Require HTTPS / SSL</a></div><p class="subSecExplanation">To require <a href="http://en.wikipedia.org/wiki/HTTP_Secure">HTTPS (SSL)</a> for a resource define a security constraint with <span class="tag">&lt;<a href="#" id="tl-d1104e10246" class="tooltip" onclick="return tlClick('tl-d1104e10246','pp-d1104e604');" onmouseover="return tlOver('tl-d1104e10246','pp-d1104e604');" onmouseout="return tlOut('tl-d1104e10246','pp-d1104e604');">transport-guarantee</a>&gt;</span>. Then any attempt to access it without SSL will be <em>redirected to a <span class="idf">https</span> URL</em>. </p><p class="subSecExplanation"> This example requires SSL for two directories:</p><pre class="subSecConfig"><span class="tag">&lt;<a href="#" id="tl-d1104e10259" class="tooltip" onclick="return tlClick('tl-d1104e10259','pp-d1104e579');" onmouseover="return tlOver('tl-d1104e10259','pp-d1104e579');" onmouseout="return tlOut('tl-d1104e10259','pp-d1104e579');">security-constraint</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e10262" class="tooltip" onclick="return tlClick('tl-d1104e10262','pp-d1104e581');" onmouseover="return tlOver('tl-d1104e10262','pp-d1104e581');" onmouseout="return tlOut('tl-d1104e10262','pp-d1104e581');">web-resource-collection</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e10265" class="tooltip" onclick="return tlClick('tl-d1104e10265','pp-d1104e586');" onmouseover="return tlOver('tl-d1104e10265','pp-d1104e586');" onmouseout="return tlOut('tl-d1104e10265','pp-d1104e586');">web-resource-name</a>&gt;</span>User Preferences<span class="tag">&lt;/<a href="#" id="tl-d1104e10268" class="tooltip" onclick="return tlClick('tl-d1104e10268','pp-d1104e586');" onmouseover="return tlOver('tl-d1104e10268','pp-d1104e586');" onmouseout="return tlOut('tl-d1104e10268','pp-d1104e586');">web-resource-name</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e10270" class="tooltip" onclick="return tlClick('tl-d1104e10270','pp-d1104e588');" onmouseover="return tlOver('tl-d1104e10270','pp-d1104e588');" onmouseout="return tlOut('tl-d1104e10270','pp-d1104e588');">url-pattern</a>&gt;</span>/prefs/*<span class="tag">&lt;/<a href="#" id="tl-d1104e10273" class="tooltip" onclick="return tlClick('tl-d1104e10273','pp-d1104e588');" onmouseover="return tlOver('tl-d1104e10273','pp-d1104e588');" onmouseout="return tlOut('tl-d1104e10273','pp-d1104e588');">url-pattern</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e10276" class="tooltip" onclick="return tlClick('tl-d1104e10276','pp-d1104e588');" onmouseover="return tlOver('tl-d1104e10276','pp-d1104e588');" onmouseout="return tlOut('tl-d1104e10276','pp-d1104e588');">url-pattern</a>&gt;</span>/settings/*<span class="tag">&lt;/<a href="#" id="tl-d1104e10279" class="tooltip" onclick="return tlClick('tl-d1104e10279','pp-d1104e588');" onmouseover="return tlOver('tl-d1104e10279','pp-d1104e588');" onmouseout="return tlOut('tl-d1104e10279','pp-d1104e588');">url-pattern</a>&gt;</span> 
    <span class="tag">&lt;/<a href="#" id="tl-d1104e10281" class="tooltip" onclick="return tlClick('tl-d1104e10281','pp-d1104e581');" onmouseover="return tlOver('tl-d1104e10281','pp-d1104e581');" onmouseout="return tlOut('tl-d1104e10281','pp-d1104e581');">web-resource-collection</a>&gt;</span>
    
    <span class="tag">&lt;<a href="#" id="tl-d1104e10283" class="tooltip" onclick="return tlClick('tl-d1104e10283','pp-d1104e599');" onmouseover="return tlOver('tl-d1104e10283','pp-d1104e599');" onmouseout="return tlOut('tl-d1104e10283','pp-d1104e599');">user-data-constraint</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e10286" class="tooltip" onclick="return tlClick('tl-d1104e10286','pp-d1104e604');" onmouseover="return tlOver('tl-d1104e10286','pp-d1104e604');" onmouseout="return tlOut('tl-d1104e10286','pp-d1104e604');">transport-guarantee</a>&gt;</span>CONFIDENTIAL<span class="tag">&lt;/<a href="#" id="tl-d1104e10289" class="tooltip" onclick="return tlClick('tl-d1104e10289','pp-d1104e604');" onmouseover="return tlOver('tl-d1104e10289','pp-d1104e604');" onmouseout="return tlOut('tl-d1104e10289','pp-d1104e604');">transport-guarantee</a>&gt;</span> <span class="cmt">&lt;!-- "CONFIDENTIAL" means SSL --&gt;</span>
    <span class="tag">&lt;/<a href="#" id="tl-d1104e10295" class="tooltip" onclick="return tlClick('tl-d1104e10295','pp-d1104e599');" onmouseover="return tlOver('tl-d1104e10295','pp-d1104e599');" onmouseout="return tlOut('tl-d1104e10295','pp-d1104e599');">user-data-constraint</a>&gt;</span>
<span class="tag">&lt;/<a href="#" id="tl-d1104e10297" class="tooltip" onclick="return tlClick('tl-d1104e10297','pp-d1104e579');" onmouseover="return tlOver('tl-d1104e10297','pp-d1104e579');" onmouseout="return tlOut('tl-d1104e10297','pp-d1104e579');">security-constraint</a>&gt;</span></pre><p class="subSecExplanation">You can also combine the <span class="tag">&lt;<a href="#" id="tl-d1104e10301" class="tooltip" onclick="return tlClick('tl-d1104e10301','pp-d1104e599');" onmouseover="return tlOver('tl-d1104e10301','pp-d1104e599');" onmouseout="return tlOut('tl-d1104e10301','pp-d1104e599');">user-data-constraint</a>&gt;</span> element with <span class="tag">&lt;<a href="#" id="tl-d1104e10304" class="tooltip" onclick="return tlClick('tl-d1104e10304','pp-d1104e592');" onmouseover="return tlOver('tl-d1104e10304','pp-d1104e592');" onmouseout="return tlOut('tl-d1104e10304','pp-d1104e592');">auth-constraint</a>&gt;</span> to require HTTPS for restricted resources.</p></div></div><div id="colla_programmaticsecurity" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="programmaticsecurity.xhtml#programmaticsecurity" name="programmaticsecurity">Programmatic Security</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('programmaticsecurity');">How to Use Authentication Data in Servlets</a></div></div></div><div class="subSecRow2" id="sec_programmaticsecurity" style="display: none"><div class="subSecHead" id="sechd_programmaticsecurity"><a class="multipageHeadLink" href="programmaticsecurity.xhtml#programmaticsecurity" name="programmaticsecurity">Programmatic Security</a></div><div class="subSecContent" id="seccnt_programmaticsecurity"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('programmaticsecurity');">How to Use Authentication Data in Servlets</a></div><p class="subSecExplanation">When a user is logged in, servlets can <em>get the user's name and check her roles</em>. This is only possible in combination with <a href="#declarativesecurity" onclick="if (event.button == 0) return goTo('#declarativesecurity', true); else return true;">declarative security</a>, because the container <em>authenticates users only for restricted resources</em> (<a href="#" id="tl-d1104e10331" class="dottedTooltip" onclick="return tlClick('tl-d1104e10331','pp-d1104e10331');" onmouseover="return tlOver('tl-d1104e10331','pp-d1104e10331');" onmouseout="return tlOut('tl-d1104e10331','pp-d1104e10331');">more</a>). </p><p class="subSecExplanation"> The <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html" class="javadoc">ServletRequest</a> provides you with three methods to access authentication data:</p><ul class="subSecList"><li><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getUserPrincipal()" class="javadoc">getUserPrincipal</a> returns the user's <a href="http://java.sun.com/javase/6/docs/api/java/security/Principal.html" class="javadoc">Principal</a> object (<a href="#" id="tl-d1104e10352" class="dottedTooltip" onclick="return tlClick('tl-d1104e10352','pp-d1104e10352');" onmouseover="return tlOver('tl-d1104e10352','pp-d1104e10352');" onmouseout="return tlOut('tl-d1104e10352','pp-d1104e10352');">more</a>), or null if no user is logged in</li><li><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getRemoteUser()" class="javadoc">getRemoteUser</a> returns the user's login name, or null if no user is logged in</li><li><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#isUserInRole(java.lang.String)" class="javadoc">isUserInRole</a> checks whether the current user is in the given role</li></ul><h4 class="subSecMiniHeadline">Getting the User's Identity</h4><p class="subSecExplanation"> This example logs the authenticated user: </p><pre class="subSecCode"><code>protected void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
      throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a> {

    <a href="http://java.sun.com/javase/6/docs/api/java/security/Principal.html" class="javadoc">Principal</a> p = request.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getUserPrincipal()" class="javadoc"><em>getUserPrincipal</em></a>();
    if (p == null)
        <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#log(java.lang.String)" class="javadoc">log</a>("No user logged in.");
    else {
        <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#log(java.lang.String)" class="javadoc">log</a>("Principal: " + p.<a href="http://java.sun.com/javase/6/docs/api/java/security/Principal.html#getName()" class="javadoc">getName</a>());
        <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#log(java.lang.String)" class="javadoc">log</a>("User name: " + request.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getRemoteUser()" class="javadoc"><em>getRemoteUser</em></a>());
    }

    <span class="cmt">// <span class="abstract">...</span></span>
}
</code></pre><h4 class="subSecMiniHeadline">Role Checking</h4><p class="subSecExplanation">You can use <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#isUserInRole(java.lang.String)" class="javadoc">isUserInRole</a> to check whether the user is in the specified role. This code checks the user's roles:</p><pre class="subSecCode"><code><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request = <span class="abstract">...</span>;
if ( request.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#isUserInRole(java.lang.String)" class="javadoc">isUserInRole</a>("root") || 
     (request.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#isUserInRole(java.lang.String)" class="javadoc">isUserInRole</a>("privileged") &amp;&amp;
      request.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#isUserInRole(java.lang.String)" class="javadoc">isUserInRole</a>("merchandise")) ) {
    <span class="cmt">// <span class="abstract">user authenticated</span></span>
}
</code></pre><p class="subSecExplanation">By default, the argument to <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#isUserInRole(java.lang.String)" class="javadoc">isUserInRole</a> is a <em>role decared in the <span class="idf">web.xml</span></em> deployment descriptor using <span class="tag">&lt;<a href="#" id="tl-d1104e10518" class="tooltip" onclick="return tlClick('tl-d1104e10518','pp-d1104e622');" onmouseover="return tlOver('tl-d1104e10518','pp-d1104e622');" onmouseout="return tlOut('tl-d1104e10518','pp-d1104e622');">security-role</a>&gt;</span> (see <a href="#usermanagement" onclick="if (event.button == 0) return goTo('#usermanagement', true); else return true;">user management</a>). If your servlet needs different names, it map the name in its declaration:</p><pre class="subSecConfig"><span class="tag">&lt;<a href="#" id="tl-d1104e10526" class="tooltip" onclick="return tlClick('tl-d1104e10526','pp-d1104e420');" onmouseover="return tlOver('tl-d1104e10526','pp-d1104e420');" onmouseout="return tlOut('tl-d1104e10526','pp-d1104e420');">servlet</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e10529" class="tooltip" onclick="return tlClick('tl-d1104e10529','pp-d1104e431');" onmouseover="return tlOver('tl-d1104e10529','pp-d1104e431');" onmouseout="return tlOut('tl-d1104e10529','pp-d1104e431');">servlet-name</a>&gt;</span>adminServlet<span class="tag">&lt;/<a href="#" id="tl-d1104e10532" class="tooltip" onclick="return tlClick('tl-d1104e10532','pp-d1104e431');" onmouseover="return tlOver('tl-d1104e10532','pp-d1104e431');" onmouseout="return tlOut('tl-d1104e10532','pp-d1104e431');">servlet-name</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e10534" class="tooltip" onclick="return tlClick('tl-d1104e10534','pp-d1104e436');" onmouseover="return tlOver('tl-d1104e10534','pp-d1104e436');" onmouseout="return tlOut('tl-d1104e10534','pp-d1104e436');">servlet-class</a>&gt;</span>com.jarfiller.example.AdminServlet<span class="tag">&lt;/<a href="#" id="tl-d1104e10537" class="tooltip" onclick="return tlClick('tl-d1104e10537','pp-d1104e436');" onmouseover="return tlOver('tl-d1104e10537','pp-d1104e436');" onmouseout="return tlOut('tl-d1104e10537','pp-d1104e436');">servlet-class</a>&gt;</span>
        
    <span class="tag">&lt;<a href="#" id="tl-d1104e10539" class="tooltip" onclick="return tlClick('tl-d1104e10539','pp-d1104e460');" onmouseover="return tlOver('tl-d1104e10539','pp-d1104e460');" onmouseout="return tlOut('tl-d1104e10539','pp-d1104e460');">security-role-ref</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e10543" class="tooltip" onclick="return tlClick('tl-d1104e10543','pp-d1104e465');" onmouseover="return tlOver('tl-d1104e10543','pp-d1104e465');" onmouseout="return tlOut('tl-d1104e10543','pp-d1104e465');">role-name</a>&gt;</span>root<span class="tag">&lt;/<a href="#" id="tl-d1104e10546" class="tooltip" onclick="return tlClick('tl-d1104e10546','pp-d1104e465');" onmouseover="return tlOver('tl-d1104e10546','pp-d1104e465');" onmouseout="return tlOut('tl-d1104e10546','pp-d1104e465');">role-name</a>&gt;</span>          <span class="cmt">&lt;!-- the servlet's internal name --&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e10551" class="tooltip" onclick="return tlClick('tl-d1104e10551','pp-d1104e470');" onmouseover="return tlOver('tl-d1104e10551','pp-d1104e470');" onmouseout="return tlOut('tl-d1104e10551','pp-d1104e470');">role-link</a>&gt;</span>admin<span class="tag">&lt;/<a href="#" id="tl-d1104e10554" class="tooltip" onclick="return tlClick('tl-d1104e10554','pp-d1104e470');" onmouseover="return tlOver('tl-d1104e10554','pp-d1104e470');" onmouseout="return tlOut('tl-d1104e10554','pp-d1104e470');">role-link</a>&gt;</span>         <span class="cmt">&lt;!-- the application's name in <span class="idf">&lt;security-role&gt;</span> --&gt;</span>
    <span class="tag">&lt;/<a href="#" id="tl-d1104e10562" class="tooltip" onclick="return tlClick('tl-d1104e10562','pp-d1104e460');" onmouseover="return tlOver('tl-d1104e10562','pp-d1104e460');" onmouseout="return tlOut('tl-d1104e10562','pp-d1104e460');">security-role-ref</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e10564" class="tooltip" onclick="return tlClick('tl-d1104e10564','pp-d1104e460');" onmouseover="return tlOver('tl-d1104e10564','pp-d1104e460');" onmouseout="return tlOut('tl-d1104e10564','pp-d1104e460');">security-role-ref</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e10567" class="tooltip" onclick="return tlClick('tl-d1104e10567','pp-d1104e465');" onmouseover="return tlOver('tl-d1104e10567','pp-d1104e465');" onmouseout="return tlOut('tl-d1104e10567','pp-d1104e465');">role-name</a>&gt;</span>privileged<span class="tag">&lt;/<a href="#" id="tl-d1104e10570" class="tooltip" onclick="return tlClick('tl-d1104e10570','pp-d1104e465');" onmouseover="return tlOver('tl-d1104e10570','pp-d1104e465');" onmouseout="return tlOut('tl-d1104e10570','pp-d1104e465');">role-name</a>&gt;</span>    <span class="cmt">&lt;!-- the servlet's internal name --&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e10575" class="tooltip" onclick="return tlClick('tl-d1104e10575','pp-d1104e470');" onmouseover="return tlOver('tl-d1104e10575','pp-d1104e470');" onmouseout="return tlOut('tl-d1104e10575','pp-d1104e470');">role-link</a>&gt;</span>super-user<span class="tag">&lt;/<a href="#" id="tl-d1104e10579" class="tooltip" onclick="return tlClick('tl-d1104e10579','pp-d1104e470');" onmouseover="return tlOver('tl-d1104e10579','pp-d1104e470');" onmouseout="return tlOut('tl-d1104e10579','pp-d1104e470');">role-link</a>&gt;</span>    <span class="cmt">&lt;!-- the application's name in <span class="idf">&lt;security-role&gt;</span> --&gt;</span>
    <span class="tag">&lt;/<a href="#" id="tl-d1104e10586" class="tooltip" onclick="return tlClick('tl-d1104e10586','pp-d1104e460');" onmouseover="return tlOver('tl-d1104e10586','pp-d1104e460');" onmouseout="return tlOut('tl-d1104e10586','pp-d1104e460');">security-role-ref</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e10588" class="tooltip" onclick="return tlClick('tl-d1104e10588','pp-d1104e460');" onmouseover="return tlOver('tl-d1104e10588','pp-d1104e460');" onmouseout="return tlOut('tl-d1104e10588','pp-d1104e460');">security-role-ref</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e10591" class="tooltip" onclick="return tlClick('tl-d1104e10591','pp-d1104e465');" onmouseover="return tlOver('tl-d1104e10591','pp-d1104e465');" onmouseout="return tlOut('tl-d1104e10591','pp-d1104e465');">role-name</a>&gt;</span>merchandise<span class="tag">&lt;/<a href="#" id="tl-d1104e10594" class="tooltip" onclick="return tlClick('tl-d1104e10594','pp-d1104e465');" onmouseover="return tlOver('tl-d1104e10594','pp-d1104e465');" onmouseout="return tlOut('tl-d1104e10594','pp-d1104e465');">role-name</a>&gt;</span>   <span class="cmt">&lt;!-- the servlet's internal name --&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e10600" class="tooltip" onclick="return tlClick('tl-d1104e10600','pp-d1104e470');" onmouseover="return tlOver('tl-d1104e10600','pp-d1104e470');" onmouseout="return tlOut('tl-d1104e10600','pp-d1104e470');">role-link</a>&gt;</span>merch-user<span class="tag">&lt;/<a href="#" id="tl-d1104e10603" class="tooltip" onclick="return tlClick('tl-d1104e10603','pp-d1104e470');" onmouseover="return tlOver('tl-d1104e10603','pp-d1104e470');" onmouseout="return tlOut('tl-d1104e10603','pp-d1104e470');">role-link</a>&gt;</span>    <span class="cmt">&lt;!-- the application's name in <span class="idf">&lt;security-role&gt;</span> --&gt;</span>
    <span class="tag">&lt;/<a href="#" id="tl-d1104e10610" class="tooltip" onclick="return tlClick('tl-d1104e10610','pp-d1104e460');" onmouseover="return tlOver('tl-d1104e10610','pp-d1104e460');" onmouseout="return tlOut('tl-d1104e10610','pp-d1104e460');">security-role-ref</a>&gt;</span>
<span class="tag">&lt;/<a href="#" id="tl-d1104e10612" class="tooltip" onclick="return tlClick('tl-d1104e10612','pp-d1104e420');" onmouseover="return tlOver('tl-d1104e10612','pp-d1104e420');" onmouseout="return tlOut('tl-d1104e10612','pp-d1104e420');">servlet</a>&gt;</span>
				</pre></div></div><div id="colla_cookielessessions" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="cookielessessions.xhtml#cookielessessions" name="cookielessessions">Cookie-less Sessions</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('cookielessessions');">How to Use HttpSessions and Authentication without Cookies?</a></div></div></div><div class="subSecRow1" id="sec_cookielessessions" style="display: none"><div class="subSecHead" id="sechd_cookielessessions"><a class="multipageHeadLink" href="cookielessessions.xhtml#cookielessessions" name="cookielessessions">Cookie-less Sessions</a></div><div class="subSecContent" id="seccnt_cookielessessions"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('cookielessessions');">How to Use HttpSessions and Authentication without Cookies?</a></div><p class="subSecExplanation">If a user does not accept cookies, the <em>Servlet API offers URL rewriting</em> as a last resort to track users. This means that the web application's URLs need to be modified to include the session id. A URL with session id looks like this:</p><pre class="subSecConfig">   http://www.example.com/myapp/index.html<em>;jsessionid=1234</em></pre><p class="subSecExplanation">In order to convert a regular URL into a URL with session id you need to encode it with the HttpServletResponse method <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html#encodeURL(java.lang.String)" class="javadoc">encodeURL</a>. <em>Every URL returned by the application</em> as part of the response needs to be encoded, including links on HTML pages, actions in HTML forms and URLs used by JavaScript.</p><p class="subSecExplanation">Note that the server <em>can not rewrite the URLs of static content</em>. A user will always get a new session when she visits a static page and then clicks on any link on it. Thus if you rely on sessions and want to allow URL rewriting to support cookie-less sessions, don't mix static pages with dynamic (URL-rewriting) pages. </p></div></div><h2 id="sec_howtogeneral" class="sectionHead"><a name="howtogeneral">How to... General</a></h2><div class="sectionExpandAll">
			(<a href="#" onclick="&#xA;return showAll([['colla_addinglibraries','sec_addinglibraries'],['colla_addingresourcefiles','sec_addingresourcefiles'],['colla_throwingexceptions','sec_throwingexceptions'],['colla_initparameters','sec_initparameters'],['colla_logging','sec_logging'],['colla_errorpages','sec_errorpages'],['colla_temporarydirectory','sec_temporarydirectory'],['colla_ejbinvocation','sec_ejbinvocation'],['colla_distributedapps','sec_distributedapps'],['colla_listeners','sec_listeners'],['colla_servlet24','sec_servlet24'], null]); &#xA;">expand everything</a>)
		</div><div id="colla_addinglibraries" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="addinglibraries.xhtml#addinglibraries" name="addinglibraries">Libraries</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('addinglibraries');">How to Add Libraries to a Web Application / WAR</a></div></div></div><div class="subSecRow2" id="sec_addinglibraries" style="display: none"><div class="subSecHead" id="sechd_addinglibraries"><a class="multipageHeadLink" href="addinglibraries.xhtml#addinglibraries" name="addinglibraries">Libraries</a></div><div class="subSecContent" id="seccnt_addinglibraries"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('addinglibraries');">How to Add Libraries to a Web Application / WAR</a></div><p class="subSecExplanation"> To include a library to your web application, just <em>add the <a href="#" id="tl-d1104e10676" class="dottedTooltip" onclick="return tpcClick('tl-d1104e10676','pp-d1104e184');" onmouseover="return tpcOver('tl-d1104e10676','pp-d1104e184');" onmouseout="return tpcOut('tl-d1104e10676','pp-d1104e184');">JAR</a> file(s) into the "/WEB-INF/lib/" directory</em> of your web application. They must have a "*.jar" extension, sub-directories are not supported. </p><p class="subSecExplanation"> Many web containers also have a way of adding shared libraries that can be used for all applications. For example, to add a shared library to <a href="http://tomcat.apache.org/">Tomcat</a> just copy the JARs into its <span class="idf">/lib</span> directory. </p></div></div><div id="colla_addingresourcefiles" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="addingresourcefiles.xhtml#addingresourcefiles" name="addingresourcefiles">Resources</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('addingresourcefiles');">How to Read Files Contained in a Web Application / WAR</a></div></div></div><div class="subSecRow1" id="sec_addingresourcefiles" style="display: none"><div class="subSecHead" id="sechd_addingresourcefiles"><a class="multipageHeadLink" href="addingresourcefiles.xhtml#addingresourcefiles" name="addingresourcefiles">Resources</a></div><div class="subSecContent" id="seccnt_addingresourcefiles"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('addingresourcefiles');">How to Read Files Contained in a Web Application / WAR</a></div><p class="subSecExplanation"> If your servlet requires any additional files, <em>put those data files into /WEB-INF/</em> (<a href="#" id="tl-d1104e10707" class="dottedTooltip" onclick="return tlClick('tl-d1104e10707','pp-d1104e10707');" onmouseover="return tlOver('tl-d1104e10707','pp-d1104e10707');" onmouseout="return tlOut('tl-d1104e10707','pp-d1104e10707');">more</a>). <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html" class="javadoc">ServletContext</a> offers three ways of reading them:</p><div class="subSecTableDiv"><table><tr><th>Method</th><th>Returns</th><th>Required?</th></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html#getResourceAsStream(java.lang.String)" class="javadoc">getResourceAsStream</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/io/InputStream.html" class="javadoc">InputStream</a> to read the file</td><td>Yes</td></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html#getResource(java.lang.String)" class="javadoc">getResource</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/net/URL.html" class="javadoc">URL</a> of the file</td><td>Yes</td></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html#getRealPath(java.lang.String)" class="javadoc">getRealPath</a></td><td>Path to file (<span class="idf">String</span>)</td><td><a href="#" id="tl-d1104e10770" class="dottedTooltip" onclick="return tlClick('tl-d1104e10770','pp-d1104e10773');" onmouseover="return tlOver('tl-d1104e10770','pp-d1104e10773');" onmouseout="return tlOut('tl-d1104e10770','pp-d1104e10773');">No</a></td></tr></table></div><p class="subSecExplanation"> Usually <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html#getResourceAsStream(java.lang.String)" class="javadoc">getResourceAsStream</a> is the most useful of the three. The following example uses it to read a <a href="http://java.sun.com/javase/6/docs/api/java/util/Properties.html" class="javadoc">Properties</a> file: </p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/util/Properties.html" class="javadoc">Properties</a> config = new <a href="http://java.sun.com/javase/6/docs/api/java/util/Properties.html" class="javadoc">Properties</a>();
config.<a href="http://java.sun.com/javase/6/docs/api/java/util/Properties.html#load(java.io.InputStream)" class="javadoc">load</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#getServletContext()" class="javadoc">getServletContext</a>().<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html#getResourceAsStream(java.lang.String)" class="javadoc"><em>getResourceAsStream</em></a>("/WEB-INF/config.properties"));
</code></pre><p class="subSecExplanation"/></div></div><div id="colla_throwingexceptions" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="throwingexceptions.xhtml#throwingexceptions" name="throwingexceptions">Exceptions</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('throwingexceptions');">How to Throw Exceptions in Servlets</a></div></div></div><div class="subSecRow2" id="sec_throwingexceptions" style="display: none"><div class="subSecHead" id="sechd_throwingexceptions"><a class="multipageHeadLink" href="throwingexceptions.xhtml#throwingexceptions" name="throwingexceptions">Exceptions</a></div><div class="subSecContent" id="seccnt_throwingexceptions"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('throwingexceptions');">How to Throw Exceptions in Servlets</a></div><p class="subSecExplanation">If a servlet <em>encounters an unhandled problem</em>, it can <em>throw a <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletException.html" class="javadoc">ServletException</a></em> (for expected problems, such as an errornous user input, you should show a error message to the user). Alternatively, you can also throw a <a href="http://java.sun.com/javase/6/docs/api/java/lang/RuntimeException.html" class="javadoc">RuntimeException</a>. On both types of exceptions <em>the container will return the HTTP status code 500</em> (internal error). </p><p class="subSecExplanation">A special kind of <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletException.html" class="javadoc">ServletException</a> is the <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/UnavailableException.html" class="javadoc">UnavailableException</a>, which <em>tells the server that the servlet is currently or permanently unavailable</em>. You can either specify the number of seconds the application will be unavailable, causing the server to respond with a HTTP status code 503 (service unavailable) during that time. Or you create the exception without a duration, and the server will remove the servlet and start returning HTTP status code 404 (not found).</p><pre class="subSecCode"><code>protected void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
        throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a>, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletException.html" class="javadoc"><em>ServletException</em></a> {
    if (<span class="abstract">permanentlyUnavailable</span>)
        throw new <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/UnavailableException.html" class="javadoc"><em>UnavailableException</em></a>("Servlet is gone");
    if (<span class="abstract">temporarilyUnavailable</span>)
        throw new <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/UnavailableException.html" class="javadoc"><em>UnavailableException</em></a>("Try again later..", <em>60</em>);  <span class="cmt">// unavailable for 60s</span>
}
</code></pre></div></div><div id="colla_initparameters" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="initparameters.xhtml#initparameters" name="initparameters">Parameters</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('initparameters');">Configure your Servlet with Initialization Parameters</a></div></div></div><div class="subSecRow1" id="sec_initparameters" style="display: none"><div class="subSecHead" id="sechd_initparameters"><a class="multipageHeadLink" href="initparameters.xhtml#initparameters" name="initparameters">Parameters</a></div><div class="subSecContent" id="seccnt_initparameters"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('initparameters');">Configure your Servlet with Initialization Parameters</a></div><p class="subSecExplanation">It is possible to <em>pass parameters</em> from the <span class="idf">web.xml</span> deployment descriptor to your Servlets. You can either use <em>application-wide context parameters</em> or <em>servlet-specific initialization parameters</em>.<br/> The following <span class="idf">web.xml</span> uses both to configure a servlet:</p><pre class="subSecConfig">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
<span class="tag">&lt;<a href="#" id="tl-d1104e10948" class="tooltip" onclick="return tlClick('tl-d1104e10948','pp-d1104e314');" onmouseover="return tlOver('tl-d1104e10948','pp-d1104e314');" onmouseout="return tlOut('tl-d1104e10948','pp-d1104e314');">web-app</a> <a href="#" id="tl-d1104e10950" class="tooltip" onclick="return tlClick('tl-d1104e10950','pp-d1104e321');" onmouseover="return tlOver('tl-d1104e10950','pp-d1104e321');" onmouseout="return tlOut('tl-d1104e10950','pp-d1104e321');">xmlns</a>="http://java.sun.com/xml/ns/j2ee"
         <a href="#" id="tl-d1104e10953" class="tooltip" onclick="return tlClick('tl-d1104e10953','pp-d1104e323');" onmouseover="return tlOver('tl-d1104e10953','pp-d1104e323');" onmouseout="return tlOut('tl-d1104e10953','pp-d1104e323');">xmlns:xsi</a>="http://www.w3.org/2001/XMLSchema-instance"
         <a href="#" id="tl-d1104e10956" class="tooltip" onclick="return tlClick('tl-d1104e10956','pp-d1104e328');" onmouseover="return tlOver('tl-d1104e10956','pp-d1104e328');" onmouseout="return tlOut('tl-d1104e10956','pp-d1104e328');">xsi:schemaLocation</a>="http://java.sun.com/xml/ns/j2ee
                             http://java.sun.com/xml/ns/j2ee/web-app_2_5.xsd"
         <a href="#" id="tl-d1104e10959" class="tooltip" onclick="return tlClick('tl-d1104e10959','pp-d1104e288');" onmouseover="return tlOver('tl-d1104e10959','pp-d1104e288');" onmouseout="return tlOut('tl-d1104e10959','pp-d1104e288');">version</a>="2.5"&gt;</span>

    <span class="tag">&lt;<a href="#" id="tl-d1104e10963" class="tooltip" onclick="return tlClick('tl-d1104e10963','pp-d1104e346');" onmouseover="return tlOver('tl-d1104e10963','pp-d1104e346');" onmouseout="return tlOut('tl-d1104e10963','pp-d1104e346');">context-param</a>&gt;</span>                         <span class="cmt">&lt;!-- <em>application-wide</em> settings --&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e10971" class="tooltip" onclick="return tlClick('tl-d1104e10971','pp-d1104e392');" onmouseover="return tlOver('tl-d1104e10971','pp-d1104e392');" onmouseout="return tlOut('tl-d1104e10971','pp-d1104e392');">param-name</a>&gt;</span>appName<span class="tag">&lt;/<a href="#" id="tl-d1104e10974" class="tooltip" onclick="return tlClick('tl-d1104e10974','pp-d1104e392');" onmouseover="return tlOver('tl-d1104e10974','pp-d1104e392');" onmouseout="return tlOut('tl-d1104e10974','pp-d1104e392');">param-name</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e10977" class="tooltip" onclick="return tlClick('tl-d1104e10977','pp-d1104e394');" onmouseover="return tlOver('tl-d1104e10977','pp-d1104e394');" onmouseout="return tlOut('tl-d1104e10977','pp-d1104e394');">param-value</a>&gt;</span>Example.com<span class="tag">&lt;/<a href="#" id="tl-d1104e10980" class="tooltip" onclick="return tlClick('tl-d1104e10980','pp-d1104e394');" onmouseover="return tlOver('tl-d1104e10980','pp-d1104e394');" onmouseout="return tlOut('tl-d1104e10980','pp-d1104e394');">param-value</a>&gt;</span>
    <span class="tag">&lt;/<a href="#" id="tl-d1104e10982" class="tooltip" onclick="return tlClick('tl-d1104e10982','pp-d1104e346');" onmouseover="return tlOver('tl-d1104e10982','pp-d1104e346');" onmouseout="return tlOut('tl-d1104e10982','pp-d1104e346');">context-param</a>&gt;</span>
     <span class="tag">&lt;<a href="#" id="tl-d1104e10984" class="tooltip" onclick="return tlClick('tl-d1104e10984','pp-d1104e346');" onmouseover="return tlOver('tl-d1104e10984','pp-d1104e346');" onmouseout="return tlOut('tl-d1104e10984','pp-d1104e346');">context-param</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e10987" class="tooltip" onclick="return tlClick('tl-d1104e10987','pp-d1104e392');" onmouseover="return tlOver('tl-d1104e10987','pp-d1104e392');" onmouseout="return tlOut('tl-d1104e10987','pp-d1104e392');">param-name</a>&gt;</span>webmaster<span class="tag">&lt;/<a href="#" id="tl-d1104e10990" class="tooltip" onclick="return tlClick('tl-d1104e10990','pp-d1104e392');" onmouseover="return tlOver('tl-d1104e10990','pp-d1104e392');" onmouseout="return tlOut('tl-d1104e10990','pp-d1104e392');">param-name</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e10993" class="tooltip" onclick="return tlClick('tl-d1104e10993','pp-d1104e394');" onmouseover="return tlOver('tl-d1104e10993','pp-d1104e394');" onmouseout="return tlOut('tl-d1104e10993','pp-d1104e394');">param-value</a>&gt;</span>tim@example.com<span class="tag">&lt;/<a href="#" id="tl-d1104e10996" class="tooltip" onclick="return tlClick('tl-d1104e10996','pp-d1104e394');" onmouseover="return tlOver('tl-d1104e10996','pp-d1104e394');" onmouseout="return tlOut('tl-d1104e10996','pp-d1104e394');">param-value</a>&gt;</span>
    <span class="tag">&lt;/<a href="#" id="tl-d1104e10998" class="tooltip" onclick="return tlClick('tl-d1104e10998','pp-d1104e346');" onmouseover="return tlOver('tl-d1104e10998','pp-d1104e346');" onmouseout="return tlOut('tl-d1104e10998','pp-d1104e346');">context-param</a>&gt;</span>
    

    <span class="tag">&lt;<a href="#" id="tl-d1104e11000" class="tooltip" onclick="return tlClick('tl-d1104e11000','pp-d1104e420');" onmouseover="return tlOver('tl-d1104e11000','pp-d1104e420');" onmouseout="return tlOut('tl-d1104e11000','pp-d1104e420');">servlet</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e11003" class="tooltip" onclick="return tlClick('tl-d1104e11003','pp-d1104e431');" onmouseover="return tlOver('tl-d1104e11003','pp-d1104e431');" onmouseout="return tlOut('tl-d1104e11003','pp-d1104e431');">servlet-name</a>&gt;</span>mainServlet<span class="tag">&lt;/<a href="#" id="tl-d1104e11006" class="tooltip" onclick="return tlClick('tl-d1104e11006','pp-d1104e431');" onmouseover="return tlOver('tl-d1104e11006','pp-d1104e431');" onmouseout="return tlOut('tl-d1104e11006','pp-d1104e431');">servlet-name</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e11009" class="tooltip" onclick="return tlClick('tl-d1104e11009','pp-d1104e436');" onmouseover="return tlOver('tl-d1104e11009','pp-d1104e436');" onmouseout="return tlOut('tl-d1104e11009','pp-d1104e436');">servlet-class</a>&gt;</span>com.jarfiller.example.MainServlet<span class="tag">&lt;/<a href="#" id="tl-d1104e11012" class="tooltip" onclick="return tlClick('tl-d1104e11012','pp-d1104e436');" onmouseover="return tlOver('tl-d1104e11012','pp-d1104e436');" onmouseout="return tlOut('tl-d1104e11012','pp-d1104e436');">servlet-class</a>&gt;</span>
        
        <span class="tag">&lt;<a href="#" id="tl-d1104e11014" class="tooltip" onclick="return tlClick('tl-d1104e11014','pp-d1104e449');" onmouseover="return tlOver('tl-d1104e11014','pp-d1104e449');" onmouseout="return tlOut('tl-d1104e11014','pp-d1104e449');">init-param</a>&gt;</span>                        <span class="cmt">&lt;!-- <em>servlet-specific</em> settings --&gt;</span>
            <span class="tag">&lt;<a href="#" id="tl-d1104e11022" class="tooltip" onclick="return tlClick('tl-d1104e11022','pp-d1104e392');" onmouseover="return tlOver('tl-d1104e11022','pp-d1104e392');" onmouseout="return tlOut('tl-d1104e11022','pp-d1104e392');">param-name</a>&gt;</span>background-color<span class="tag">&lt;/<a href="#" id="tl-d1104e11025" class="tooltip" onclick="return tlClick('tl-d1104e11025','pp-d1104e392');" onmouseover="return tlOver('tl-d1104e11025','pp-d1104e392');" onmouseout="return tlOut('tl-d1104e11025','pp-d1104e392');">param-name</a>&gt;</span>
            <span class="tag">&lt;<a href="#" id="tl-d1104e11028" class="tooltip" onclick="return tlClick('tl-d1104e11028','pp-d1104e394');" onmouseover="return tlOver('tl-d1104e11028','pp-d1104e394');" onmouseout="return tlOut('tl-d1104e11028','pp-d1104e394');">param-value</a>&gt;</span>black<span class="tag">&lt;/<a href="#" id="tl-d1104e11031" class="tooltip" onclick="return tlClick('tl-d1104e11031','pp-d1104e394');" onmouseover="return tlOver('tl-d1104e11031','pp-d1104e394');" onmouseout="return tlOut('tl-d1104e11031','pp-d1104e394');">param-value</a>&gt;</span>
        <span class="tag">&lt;/<a href="#" id="tl-d1104e11033" class="tooltip" onclick="return tlClick('tl-d1104e11033','pp-d1104e449');" onmouseover="return tlOver('tl-d1104e11033','pp-d1104e449');" onmouseout="return tlOut('tl-d1104e11033','pp-d1104e449');">init-param</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d1104e11035" class="tooltip" onclick="return tlClick('tl-d1104e11035','pp-d1104e449');" onmouseover="return tlOver('tl-d1104e11035','pp-d1104e449');" onmouseout="return tlOut('tl-d1104e11035','pp-d1104e449');">init-param</a>&gt;</span>
            <span class="tag">&lt;<a href="#" id="tl-d1104e11038" class="tooltip" onclick="return tlClick('tl-d1104e11038','pp-d1104e392');" onmouseover="return tlOver('tl-d1104e11038','pp-d1104e392');" onmouseout="return tlOut('tl-d1104e11038','pp-d1104e392');">param-name</a>&gt;</span>foreground-color<span class="tag">&lt;/<a href="#" id="tl-d1104e11041" class="tooltip" onclick="return tlClick('tl-d1104e11041','pp-d1104e392');" onmouseover="return tlOver('tl-d1104e11041','pp-d1104e392');" onmouseout="return tlOut('tl-d1104e11041','pp-d1104e392');">param-name</a>&gt;</span>
            <span class="tag">&lt;<a href="#" id="tl-d1104e11044" class="tooltip" onclick="return tlClick('tl-d1104e11044','pp-d1104e394');" onmouseover="return tlOver('tl-d1104e11044','pp-d1104e394');" onmouseout="return tlOut('tl-d1104e11044','pp-d1104e394');">param-value</a>&gt;</span>white<span class="tag">&lt;/<a href="#" id="tl-d1104e11047" class="tooltip" onclick="return tlClick('tl-d1104e11047','pp-d1104e394');" onmouseover="return tlOver('tl-d1104e11047','pp-d1104e394');" onmouseout="return tlOut('tl-d1104e11047','pp-d1104e394');">param-value</a>&gt;</span>
        <span class="tag">&lt;/<a href="#" id="tl-d1104e11049" class="tooltip" onclick="return tlClick('tl-d1104e11049','pp-d1104e449');" onmouseover="return tlOver('tl-d1104e11049','pp-d1104e449');" onmouseout="return tlOut('tl-d1104e11049','pp-d1104e449');">init-param</a>&gt;</span>
    <span class="tag">&lt;/<a href="#" id="tl-d1104e11051" class="tooltip" onclick="return tlClick('tl-d1104e11051','pp-d1104e420');" onmouseover="return tlOver('tl-d1104e11051','pp-d1104e420');" onmouseout="return tlOut('tl-d1104e11051','pp-d1104e420');">servlet</a>&gt;</span>
<span class="tag">&lt;/<a href="#" id="tl-d1104e11053" class="tooltip" onclick="return tlClick('tl-d1104e11053','pp-d1104e314');" onmouseover="return tlOver('tl-d1104e11053','pp-d1104e314');" onmouseout="return tlOut('tl-d1104e11053','pp-d1104e314');">web-app</a>&gt;</span>
				</pre><p class="subSecExplanation">Here is a <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#init(javax.servlet.ServletConfig)" class="javadoc">init</a> method that reads from the initialization parameters:</p><pre class="subSecCode"><code>public void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#init(javax.servlet.ServletConfig)" class="javadoc">init</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletConfig.html" class="javadoc">ServletConfig</a> config) throws <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletException.html" class="javadoc">ServletException</a> {
  super.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#init(javax.servlet.ServletConfig)" class="javadoc">init</a>(config); <span class="cmt">// important for <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#getServletContext()" class="javadoc">getServletContext</a> and <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#getServletConfig()" class="javadoc">getServletConfig</a> (<a href="#" id="tl-d1104e11089" class="dottedTooltip" onclick="return tlClick('tl-d1104e11089','pp-d1104e11089');" onmouseover="return tlOver('tl-d1104e11089','pp-d1104e11089');" onmouseout="return tlOut('tl-d1104e11089','pp-d1104e11089');">more</a>)</span>

    <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#log(java.lang.String)" class="javadoc">log</a>(String.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#format(java.lang.String, java.lang.Object...)" class="javadoc">format</a>(
         "Configuration:\nappName=%s\nwebmaster=%s\nbg-color=%s\nfg-color=%s\n",
         <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#getServletContext()" class="javadoc"><em>getServletContext</em></a>().<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html#getInitParameter(java.lang.String)" class="javadoc">getInitParameter</a>("appName"),           <span class="cmt">// application-wide parameters</span>
         <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#getServletContext()" class="javadoc">getServletContext</a>().<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html#getInitParameter(java.lang.String)" class="javadoc">getInitParameter</a>("webmaster"), 
         <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#getServletConfig()" class="javadoc"><em>getServletConfig</em></a>().<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletConfig.html#getInitParameter(java.lang.String)" class="javadoc">getInitParameter</a>("background-color"),   <span class="cmt">// servlet parameters</span>
         <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#getServletConfig()" class="javadoc">getServletConfig</a>().<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletConfig.html#getInitParameter(java.lang.String)" class="javadoc">getInitParameter</a>("foreground-color") 
         ));
}
</code></pre><p class="subSecExplanation"/></div></div><div id="colla_logging" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="logging.xhtml#logging" name="logging">Logging</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('logging');">How to Log</a></div></div></div><div class="subSecRow2" id="sec_logging" style="display: none"><div class="subSecHead" id="sechd_logging"><a class="multipageHeadLink" href="logging.xhtml#logging" name="logging">Logging</a></div><div class="subSecContent" id="seccnt_logging"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('logging');">How to Log</a></div><p class="subSecExplanation">While you can use full-blown logging solutions such as Java's <a href="http://java.sun.com/javase/6/docs/api/java/util/logging/package-summary.html">logging facilities</a> and <a href="http://logging.apache.org/log4j/">log4j</a> in servlets, the Servlet API offers a very simple but convenient way of logging. The methods <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html#log(java.lang.String)" class="javadoc">log(String)</a> and <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html#log(java.lang.String, java.lang.Throwable)" class="javadoc">log(String,Throwable)</a> in <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html" class="javadoc">ServletContext</a> allow you to <em>add a line to the server's event log</em>, optionally with an Exception as second argument. For convenience, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html" class="javadoc">HttpServlet</a> (and its super-class <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/GenericServlet.html" class="javadoc">GenericServlet</a>) also provides you with two identical <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#log(java.lang.String)" class="javadoc">log</a> methods that call the implementations in <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html" class="javadoc">ServletContext</a>. So in order to log something in a <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html" class="javadoc">HttpServlet</a> sub-class you only need to write this: </p><pre class="subSecCode"><code>protected void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
        throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a> {

    <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#log(java.lang.String)" class="javadoc"><em>log</em></a>("I am in the log!");
    <span class="cmt">// <span class="abstract">...</span></span>
}
</code></pre><p class="subSecExplanation"/></div></div><div id="colla_errorpages" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="errorpages.xhtml#errorpages" name="errorpages">Error Pages</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('errorpages');">How to Replace the Default Error Page</a></div></div></div><div class="subSecRow1" id="sec_errorpages" style="display: none"><div class="subSecHead" id="sechd_errorpages"><a class="multipageHeadLink" href="errorpages.xhtml#errorpages" name="errorpages">Error Pages</a></div><div class="subSecContent" id="seccnt_errorpages"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('errorpages');">How to Replace the Default Error Page</a></div><p class="subSecExplanation">If the web server sends an HTTP error status code to the client, it sends its own error page to the client by default. This default page is rarely what you want for a polished application, so you often need to replace it with custom error pages.</p><p class="subSecExplanation"><em>Replace the default error page with the <span class="tag">&lt;<a href="#" id="tl-d1104e11287" class="tooltip" onclick="return tlClick('tl-d1104e11287','pp-d1104e503');" onmouseover="return tlOver('tl-d1104e11287','pp-d1104e503');" onmouseout="return tlOut('tl-d1104e11287','pp-d1104e503');">error-page</a>&gt;</span> element</em> in the <span class="idf">web.xml</span> deployment descriptor:</p><pre class="subSecConfig"><span class="tag">&lt;<a href="#" id="tl-d1104e11296" class="tooltip" onclick="return tlClick('tl-d1104e11296','pp-d1104e503');" onmouseover="return tlOver('tl-d1104e11296','pp-d1104e503');" onmouseout="return tlOut('tl-d1104e11296','pp-d1104e503');">error-page</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e11299" class="tooltip" onclick="return tlClick('tl-d1104e11299','pp-d1104e505');" onmouseover="return tlOver('tl-d1104e11299','pp-d1104e505');" onmouseout="return tlOut('tl-d1104e11299','pp-d1104e505');">error-code</a>&gt;</span>404<span class="tag">&lt;/<a href="#" id="tl-d1104e11302" class="tooltip" onclick="return tlClick('tl-d1104e11302','pp-d1104e505');" onmouseover="return tlOver('tl-d1104e11302','pp-d1104e505');" onmouseout="return tlOut('tl-d1104e11302','pp-d1104e505');">error-code</a>&gt;</span>               <span class="cmt">&lt;!-- HTTP status code --&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e11307" class="tooltip" onclick="return tlClick('tl-d1104e11307','pp-d1104e503');" onmouseover="return tlOver('tl-d1104e11307','pp-d1104e503');" onmouseout="return tlOut('tl-d1104e11307','pp-d1104e503');">error-page</a>&gt;</span>/error404.html<span class="tag">&lt;/<a href="#" id="tl-d1104e11310" class="tooltip" onclick="return tlClick('tl-d1104e11310','pp-d1104e503');" onmouseover="return tlOver('tl-d1104e11310','pp-d1104e503');" onmouseout="return tlOut('tl-d1104e11310','pp-d1104e503');">error-page</a>&gt;</span>    <span class="cmt">&lt;!-- static page, servlet URL or JSP --&gt;</span>
<span class="tag">&lt;/<a href="#" id="tl-d1104e11316" class="tooltip" onclick="return tlClick('tl-d1104e11316','pp-d1104e503');" onmouseover="return tlOver('tl-d1104e11316','pp-d1104e503');" onmouseout="return tlOut('tl-d1104e11316','pp-d1104e503');">error-page</a>&gt;</span></pre><p class="subSecExplanation">You can only specify one error code per <span class="tag">&lt;<a href="#" id="tl-d1104e11320" class="tooltip" onclick="return tlClick('tl-d1104e11320','pp-d1104e503');" onmouseover="return tlOver('tl-d1104e11320','pp-d1104e503');" onmouseout="return tlOut('tl-d1104e11320','pp-d1104e503');">error-page</a>&gt;</span> element. Repeat <span class="tag">&lt;<a href="#" id="tl-d1104e11323" class="tooltip" onclick="return tlClick('tl-d1104e11323','pp-d1104e503');" onmouseover="return tlOver('tl-d1104e11323','pp-d1104e503');" onmouseout="return tlOut('tl-d1104e11323','pp-d1104e503');">error-page</a>&gt;</span> to provide pages for other error codes. It is <em>not possible to declare a page for all error codes</em>.</p><p class="subSecExplanation">You can also declare a special error page for an exception:</p><pre class="subSecConfig"><span class="tag">&lt;<a href="#" id="tl-d1104e11335" class="tooltip" onclick="return tlClick('tl-d1104e11335','pp-d1104e503');" onmouseover="return tlOver('tl-d1104e11335','pp-d1104e503');" onmouseout="return tlOut('tl-d1104e11335','pp-d1104e503');">error-page</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e11338" class="tooltip" onclick="return tlClick('tl-d1104e11338','pp-d1104e510');" onmouseover="return tlOver('tl-d1104e11338','pp-d1104e510');" onmouseout="return tlOut('tl-d1104e11338','pp-d1104e510');">exception-type</a>&gt;</span>java.lang.NullPointerException<span class="tag">&lt;/<a href="#" id="tl-d1104e11341" class="tooltip" onclick="return tlClick('tl-d1104e11341','pp-d1104e510');" onmouseover="return tlOver('tl-d1104e11341','pp-d1104e510');" onmouseout="return tlOut('tl-d1104e11341','pp-d1104e510');">exception-type</a>&gt;</span>  <span class="cmt">&lt;!-- best match (<a href="#" id="tl-d1104e11345" class="dottedTooltip" onclick="return tlClick('tl-d1104e11345','pp-d1104e11345');" onmouseover="return tlOver('tl-d1104e11345','pp-d1104e11345');" onmouseout="return tlOut('tl-d1104e11345','pp-d1104e11345');">more</a>) --&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e11351" class="tooltip" onclick="return tlClick('tl-d1104e11351','pp-d1104e503');" onmouseover="return tlOver('tl-d1104e11351','pp-d1104e503');" onmouseout="return tlOut('tl-d1104e11351','pp-d1104e503');">error-page</a>&gt;</span>/errors/errorNPE.jsp<span class="tag">&lt;/<a href="#" id="tl-d1104e11354" class="tooltip" onclick="return tlClick('tl-d1104e11354','pp-d1104e503');" onmouseover="return tlOver('tl-d1104e11354','pp-d1104e503');" onmouseout="return tlOut('tl-d1104e11354','pp-d1104e503');">error-page</a>&gt;</span>
<span class="tag">&lt;/<a href="#" id="tl-d1104e11357" class="tooltip" onclick="return tlClick('tl-d1104e11357','pp-d1104e503');" onmouseover="return tlOver('tl-d1104e11357','pp-d1104e503');" onmouseout="return tlOut('tl-d1104e11357','pp-d1104e503');">error-page</a>&gt;</span></pre><p class="subSecExplanation">If you provide an <span class="tag">&lt;<a href="#" id="tl-d1104e11361" class="tooltip" onclick="return tlClick('tl-d1104e11361','pp-d1104e503');" onmouseover="return tlOver('tl-d1104e11361','pp-d1104e503');" onmouseout="return tlOut('tl-d1104e11361','pp-d1104e503');">error-page</a>&gt;</span> URL that is handled by a servlet or a JSP, then the container will provide the servlet with the following attributes in the request:</p><div class="subSecTableDiv"><table><tr><th>Name</th><th>Type</th><th>Description</th></tr><tr><td>javax.servlet.error.status_code</td><td>Integer</td><td>HTTP status code (<span class="idf">500</span> for exceptions)</td></tr><tr><td>javax.servlet.error.message</td><td>String</td><td>error message</td></tr><tr><td>javax.servlet.error.request_uri</td><td>String</td><td>original request URI (see <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html#getRequestURI()" class="javadoc">getRequestURI</a>)</td></tr><tr><td>javax.servlet.error.servlet_name</td><td>String</td><td>name of servlet that caused the error</td></tr><tr><td>javax.servlet.error.exception_type</td><td>Class</td><td>exception class (<span class="idf">null</span> for status code errors)</td></tr><tr><td>javax.servlet.error.exception</td><td>Throwable</td><td>exception (<span class="idf">null</span> for status code errors)</td></tr></table></div><p class="subSecExplanation">Here is a simple servlet that returns some information about an error:</p><pre class="subSecCode"><code>import <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/package-summary.html" class="javadoc">javax.servlet.http.*</a>;
import <a href="http://java.sun.com/javase/6/docs/api/java/io/package-summary.html" class="javadoc">java.io.*</a>;

public class ErrorHandlerServlet extends <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html" class="javadoc">HttpServlet</a> {

    private void doGet(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
        throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a> {

        response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setContentType(java.lang.String)" class="javadoc">setContentType</a>("text/plain; charset=UTF-8");
        response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setCharacterEncoding(java.lang.String)" class="javadoc">setCharacterEncoding</a>("UTF-8");

        <a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html" class="javadoc">PrintWriter</a> w = response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#getWriter()" class="javadoc">getWriter</a>();
        w.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#printf(java.lang.String, java.lang.Object...)" class="javadoc">printf</a>("Error Code: %d\n", request.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html#getAttribute()" class="javadoc"><em>getAttribute</em></a>("javax.servlet.error.status_code"));
        w.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#printf(java.lang.String, java.lang.Object...)" class="javadoc">printf</a>("Message: %s\n", request.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html#getAttribute()" class="javadoc"><em>getAttribute</em></a>("javax.servlet.error.message"));
        w.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#printf(java.lang.String, java.lang.Object...)" class="javadoc">printf</a>("URL: %s\n", request.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html#getAttribute()" class="javadoc"><em>getAttribute</em></a>("javax.servlet.error.request_uri"));
        w.<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#printf(java.lang.String, java.lang.Object...)" class="javadoc">printf</a>("Name: %s\n", request.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html#getAttribute()" class="javadoc"><em>getAttribute</em></a>("javax.servlet.error.servlet_name"));
    }
}
</code></pre></div></div><div id="colla_temporarydirectory" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="temporarydirectory.xhtml#temporarydirectory" name="temporarydirectory">Temporary Directory</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('temporarydirectory');">How to Get a Temporary Directory</a></div></div></div><div class="subSecRow2" id="sec_temporarydirectory" style="display: none"><div class="subSecHead" id="sechd_temporarydirectory"><a class="multipageHeadLink" href="temporarydirectory.xhtml#temporarydirectory" name="temporarydirectory">Temporary Directory</a></div><div class="subSecContent" id="seccnt_temporarydirectory"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('temporarydirectory');">How to Get a Temporary Directory</a></div><p class="subSecExplanation">The web container <em>provides every web application with a private temporary directory</em>. Its location is stored in the context attribute <span class="idf">javax.servlet.context.tempdir</span>. The specification leaves it open whether the server deletes the directory's content after a restart, so your application should be prepared for both cases.</p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/io/File.html" class="javadoc">File</a> tmpDir = (<a href="http://java.sun.com/javase/6/docs/api/java/io/File.html" class="javadoc">File</a>) <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#getServletContext()" class="javadoc">getServletContext</a>().<em><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpSession.html#getAttribute(java.lang.String)" class="javadoc">getAttribute</a>("javax.servlet.context.tempdir")</em>;
<a href="http://java.sun.com/javase/6/docs/api/java/io/File.html" class="javadoc">File</a> privFile = new <a href="http://java.sun.com/javase/6/docs/api/java/io/File.html" class="javadoc">File</a>(tmpDir, "myTempFile");
privFile.<a href="http://java.sun.com/javase/6/docs/api/java/io/File.html#delete()" class="javadoc">delete</a>();   <span class="cmt">// delete file in case it already exists</span>

<span class="cmt">// <span class="abstract">do something with privFile</span></span>

privFile.<a href="http://java.sun.com/javase/6/docs/api/java/io/File.html#delete()" class="javadoc">delete</a>();   <span class="cmt">// clean up (possibly in <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#destroy()" class="javadoc">destroy</a>)</span>
</code></pre><p class="subSecExplanation"/></div></div><div id="colla_ejbinvocation" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="ejbinvocation.xhtml#ejbinvocation" name="ejbinvocation">EJB Invocation</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('ejbinvocation');">How to Access an EJB</a></div></div></div><div class="subSecRow1" id="sec_ejbinvocation" style="display: none"><div class="subSecHead" id="sechd_ejbinvocation"><a class="multipageHeadLink" href="ejbinvocation.xhtml#ejbinvocation" name="ejbinvocation">EJB Invocation</a></div><div class="subSecContent" id="seccnt_ejbinvocation"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('ejbinvocation');">How to Access an EJB</a></div><p class="subSecExplanation">If you run your servlet in a EJB 3.x capable container, accessing EJBs from a servlet is very easy. Similar to the <a href="#resources" onclick="if (event.button == 0) return goTo('#resources', true); else return true;">@Resource annotation</a>, you only need to declare a <em>field or property</em> with the <em>EJB interface as type and an <a href="http://java.sun.com/javaee/5/docs/api/javax/ejb/EJB.html" class="javadoc">@EJB</a> annotation</em>. The container will automatically inject the value after the servlet's construction. Filters and listeners are also suported.</p><p class="subSecExplanation">Let's take this simple EJB interface:</p><pre class="subSecCode"><code>import <a href="http://java.sun.com/javaee/5/docs/api/javax/ejb/Local.html" class="javadoc">javax.ejb.Local</a>;

<a href="http://java.sun.com/javaee/5/docs/api/javax/ejb/Local.html" class="javadoc">@Local</a>
public interface HelloBeanLocal {
    String hello();
}
</code></pre><p class="subSecExplanation"> The following servlet uses the <a href="http://java.sun.com/javaee/5/docs/api/javax/ejb/EJB.html" class="javadoc">@EJB</a> annotation to acquire a reference to a <span class="idf">HelloBeanLocal</span> bean and invokes it in its <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a> method: </p><pre class="subSecCode"><code>import <a href="http://java.sun.com/javaee/5/docs/api/javax/ejb/EJB.html" class="javadoc">javax.ejb.EJB</a>;
import <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/package-summary.html" class="javadoc">javax.servlet.http.*</a>;
import <a href="http://java.sun.com/javase/6/docs/api/java/io/package-summary.html" class="javadoc">java.io.*</a>;

public class EjbUsingServlet extends <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html" class="javadoc">HttpServlet</a> {

    <a href="http://java.sun.com/javaee/5/docs/api/javax/ejb/EJB.html" class="javadoc"><em>@EJB</em></a>
    private HelloBeanLocal helloBean;

    private void doGet(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
        throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a> {

        response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setContentType(java.lang.String)" class="javadoc">setContentType</a>("text/plain; charset=UTF-8");
        response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#setCharacterEncoding(java.lang.String)" class="javadoc">setCharacterEncoding</a>("UTF-8");

        String v = <em>helloBean.hello()</em>;  <span class="cmt">// invoke the EJB</span>
        response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html#getWriter()" class="javadoc">getWriter</a>().<a href="http://java.sun.com/javase/6/docs/api/java/io/PrintWriter.html#println(java.lang.String)" class="javadoc">println</a>("The EJB says " + v);
    }
}
</code></pre></div></div><div id="colla_distributedapps" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="distributedapps.xhtml#distributedapps" name="distributedapps">Distributed Applications</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('distributedapps');">How to Create a Distributed Application</a></div></div></div><div class="subSecRow2" id="sec_distributedapps" style="display: none"><div class="subSecHead" id="sechd_distributedapps"><a class="multipageHeadLink" href="distributedapps.xhtml#distributedapps" name="distributedapps">Distributed Applications</a></div><div class="subSecContent" id="seccnt_distributedapps"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('distributedapps');">How to Create a Distributed Application</a></div><p class="subSecExplanation"> A distributed web application is an application that is capable of <em>running in a cluster of web containers</em>. It's not very difficult to create a distributable application, as long as you follow these rules:</p><ul class="subSecList"><li><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpSession.html" class="javadoc">HttpSession</a> can be moved across cluster nodes. You must <em>store only serializable objects in <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpSession.html" class="javadoc">HttpSession</a></em> (most <em>EJB-capable container allow EJB references</em> as well).</li><li>The application has a <em>separate <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html" class="javadoc">ServletContext</a> instance on every cluster node</em>. Any attributes that you set in the context are local to the node that set them.</li><li>As each node runs a separate Java VM, <em>static fields are not distributed</em> and thus any values stored in them are local to the cluster node.</li></ul><p class="subSecExplanation">In practice, that means if your application needs to keep data longer than for handling the current request, it needs to store it either <em>in the <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpSession.html" class="javadoc">HttpSession</a> or in a database shared by all cluster nodes</em>. </p><p class="subSecExplanation">In order to mark your web application as distributable, <em>you must put an <span class="tag">&lt;<a href="#" id="tl-d1104e11864" class="tooltip" onclick="return tlClick('tl-d1104e11864','pp-d1104e344');" onmouseover="return tlOver('tl-d1104e11864','pp-d1104e344');" onmouseout="return tlOut('tl-d1104e11864','pp-d1104e344');">distributable</a>&gt;</span> element in your <span class="idf">web.xml</span></em>. The element is always empty, you only need to add the following line:</p><pre class="subSecConfig"><span class="tag">&lt;<a href="#" id="tl-d1104e11872" class="tooltip" onclick="return tlClick('tl-d1104e11872','pp-d1104e344');" onmouseover="return tlOver('tl-d1104e11872','pp-d1104e344');" onmouseout="return tlOut('tl-d1104e11872','pp-d1104e344');">distributable</a> /&gt;</span>
</pre><p class="subSecExplanation"/></div></div><div id="colla_listeners" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="listeners.xhtml#listeners" name="listeners">Listeners</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('listeners');">How to Be Notified about Events (Listeners)</a></div></div></div><div class="subSecRow1" id="sec_listeners" style="display: none"><div class="subSecHead" id="sechd_listeners"><a class="multipageHeadLink" href="listeners.xhtml#listeners" name="listeners">Listeners</a></div><div class="subSecContent" id="seccnt_listeners"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('listeners');">How to Be Notified about Events (Listeners)</a></div><p class="subSecExplanation">The Servlet API provides a number of <em>listener interfaces</em> that you can implement to be notified about various events. You only need to implement the interface in a class and <em>declare that class as listener</em> in the <span class="idf">web.xml</span> deployment descriptor.</p><p class="subSecExplanation">The Servlet API defines the following listener interfaces for applications:</p><div class="subSecTableDiv"><table><tr><th>Interface</th><th>Events</th></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContextListener.html" class="javadoc">ServletContextListener</a></td><td>Initialization and destruction of the application</td></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContextAttributeListener.html" class="javadoc">ServletContextAttributeListener</a></td><td>Changes in context attributes</td></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequestListener.html" class="javadoc">ServletRequestListener</a></td><td>Creation and destruction of requests</td></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequestAttributeListener.html" class="javadoc">ServletRequestAttributeListener</a></td><td>Changes in request attributes</td></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpSessionListener.html" class="javadoc">HttpSessionListener</a></td><td>Creation and destruction of sessions</td></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpSessionAttributeListener.html" class="javadoc">HttpSessionAttributeListener</a></td><td>Changes in session attributes</td></tr></table></div><p class="subSecExplanation">Note that the interfaces <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpSessionActivationListener.html" class="javadoc">HttpSessionActivationListener</a> and <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpSessionBindingListener.html" class="javadoc">HttpSessionBindingListener</a> are not listener interfaces to be implemented at the application level, but are implemented by objects being bound to a session. </p><p class="subSecExplanation">The following <span class="idf">web.xml</span> snippet shows how to declare a listener (any listener - it <em>does not matter which interface(s) it implements</em>):</p><pre class="subSecConfig"><span class="tag">&lt;<a href="#" id="tl-d1104e11978" class="tooltip" onclick="return tlClick('tl-d1104e11978','pp-d1104e411');" onmouseover="return tlOver('tl-d1104e11978','pp-d1104e411');" onmouseout="return tlOut('tl-d1104e11978','pp-d1104e411');">listener</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d1104e11981" class="tooltip" onclick="return tlClick('tl-d1104e11981','pp-d1104e418');" onmouseover="return tlOver('tl-d1104e11981','pp-d1104e418');" onmouseout="return tlOut('tl-d1104e11981','pp-d1104e418');">listener-class</a>&gt;</span>com.jarfiller.example.SessionLogger<span class="tag">&lt;/<a href="#" id="tl-d1104e11984" class="tooltip" onclick="return tlClick('tl-d1104e11984','pp-d1104e418');" onmouseover="return tlOver('tl-d1104e11984','pp-d1104e418');" onmouseout="return tlOut('tl-d1104e11984','pp-d1104e418');">listener-class</a>&gt;</span>
<span class="tag">&lt;/<a href="#" id="tl-d1104e11986" class="tooltip" onclick="return tlClick('tl-d1104e11986','pp-d1104e411');" onmouseover="return tlOver('tl-d1104e11986','pp-d1104e411');" onmouseout="return tlOut('tl-d1104e11986','pp-d1104e411');">listener</a>&gt;</span>				
				</pre><p class="subSecExplanation">This is an example shows the implementation of a simple listener:</p><pre class="subSecCode"><code>import <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/package-summary.html" class="javadoc">javax.servlet.http.*</a>;

public class SessionLogger <em>implements <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpSessionListener.html" class="javadoc">HttpSessionListener</a></em> {

    public void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpSessionListener.html#sessionCreated(javax.servlet.http.HttpSessionEvent)" class="javadoc"><em>sessionCreated</em></a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpSessionEvent.html" class="javadoc">HttpSessionEvent</a> event) {
        event.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpSessionEvent.html#getSession()" class="javadoc">getSession</a>().<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpSession.html#getServletContext()" class="javadoc">getServletContext</a>().<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html#log(java.lang.String)" class="javadoc">log</a>("Created new session");
    }

    public void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpSessionListener.html#sessionDestroyed(javax.servlet.http.HttpSessionEvent)" class="javadoc"><em>sessionDestroyed</em></a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpSessionEvent.html" class="javadoc">HttpSessionEvent</a> event) {
        event.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpSessionEvent.html#getSession()" class="javadoc">getSession</a>().<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpSession.html#getServletContext()" class="javadoc">getServletContext</a>().<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html#log(java.lang.String)" class="javadoc">log</a>("Session will be destroyed");
    }
}
</code></pre><p class="subSecExplanation"/></div></div><div id="colla_servlet24" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="servlet24.xhtml#servlet24" name="servlet24">Servlet 2.4</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('servlet24');">New Features Since Servlet API 2.4</a></div></div></div><div class="subSecRow2" id="sec_servlet24" style="display: none"><div class="subSecHead" id="sechd_servlet24"><a class="multipageHeadLink" href="servlet24.xhtml#servlet24" name="servlet24">Servlet 2.4</a></div><div class="subSecContent" id="seccnt_servlet24"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('servlet24');">New Features Since Servlet API 2.4</a></div><p class="subSecExplanation">New features in Servlet API 2.5:</p><ul class="subSecList"><li>Support for <a href="http://java.sun.com/javaee/5/docs/api/javax/annotation/Resource.html" class="javadoc">@Resource</a> and other Common Annotations (see <a href="#resources" onclick="if (event.button == 0) return goTo('#resources', true); else return true;">Resources</a>)</li><li>Simplified declaration of servlet and filter mappings in <span class="idf">web.xml</span> (see <a href="../../reference/webxml2x/#diffs25">Web.xml reference</a>)</li></ul></div></div><h2 id="sec_andnow" class="sectionHead"><a name="andnow">And now...?</a></h2><div class="subSecRow1" id="sec_nextsteps"><div class="subSecHead" id="sechd_nextsteps"><a class="multipageHeadLink" href="andnow.xhtml#nextsteps" name="nextsteps">Next Steps</a></div><div class="subSecContent" id="seccnt_nextsteps"><p class="subSecExplanation">This tutorial intends to give you a quick start on using Servlets, and maybe give answers for some questions that are hard to figure out. But now you are on you own. If you need to find out more, try to find it in the <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/package-summary.html">API Documents</a> and the <a href="/reference/webxml2x/">Jarfiller Web.xml Reference</a>. For a more thorough understanding of the Servlet API you should take the time to read the <a href="http://jcp.org/aboutJava/communityprocess/mrel/jsr154/index2.html">Servlet Specification</a>. </p></div></div></div><div id="sidecolumn">
    	<div><h3>Useful Links</h3><div class="sidecolumnSubTitleLine"/>
	  			<a href="http://java.sun.com/products/servlet/">Servlet Homepage</a><br/>
	  			<a href="http://en.wikipedia.org/wiki/Java_Servlet">Servlet on Wikipedia</a><br/>
	  			<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/package-summary.html">javax.servlet API Docs</a><br/>
	  			<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/package-summary.html">javax.servlet.http API Docs</a><br/>
	  			<a href="http://jcp.org/aboutJava/communityprocess/mrel/jsr154/index2.html">Servlet 2.5 Specification</a><br/>
	  		</div>
  		
  		<div><h3>Related Documents</h3><div class="sidecolumnSubTitleLine">(on Jarfiller.com)</div>
	  			<a href="/reference/webxml2x/">Web.xml Reference</a><br/>
	  		</div>
  	
  </div></div></div><div id="footer"><div id="footer-content"><div id="footer-left"><div class="footerLine"><a href="/">Home</a> - <a href="/about">About Jarfiller</a> - <a href="/imprint.xhtml">Imprint</a></div><div class="footerLine">Please send feedback and corrections to <a href="mailto:tim@tjansen.de">tim@<span style="display: none">got you</span>tjansen.de</a>.</div><div class="footerLine"><a href="http://www.twitter.com/timjansen">Follow</a> me on Twitter.</div><div class="copyrightLine">© 2010 Tim Jansen; content licensed under <a href="http://creativecommons.org/licenses/by/3.0/us/">cc-by</a>; example source code is public domain
				</div></div><div id="footer-right"><a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/"><img alt="Creative Commons License" style="border-width:0" src="../../images/ext/cc-by-88x31.png"/></a></div></div></div><div id="navbar" onclick="return navToggle();" onmouseover="document.getElementById('navbar').className='mouseover';" onmouseout="document.getElementById('navbar').className='';"/><div id="navcontainer"><div id="navlinks"><div id="navclosebar"><a href="#" onclick="return navClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div><div id="navpositionbar" class="navpositionbar"/><h2 id="navtitle">Servlet 2.5 Guide</h2><a id="nav_overview" class="navseclink" href="#overview" onclick="if (event.button == 0) return goTo('#overview', true); else return true;">Overview</a><a id="nav_intro" class="navsublink" href="#intro" onclick="if (event.button == 0) return goTo('#intro', true); else return true;">Intro</a><a id="nav_usecases" class="navsublink" href="#usecases" onclick="if (event.button == 0) return goTo('#usecases', true); else return true;">When should you write a Servlet?</a><a id="nav_requirements" class="navsublink" href="#requirements" onclick="if (event.button == 0) return goTo('#requirements', true); else return true;">What do you need for Servlets?</a><a id="nav_containers" class="navsublink" href="#containers" onclick="if (event.button == 0) return goTo('#containers', true); else return true;">Which container supports which Servlet / JEE version?</a><a id="nav_httpintro" class="navsublink" href="#httpintro" onclick="if (event.button == 0) return goTo('#httpintro', true); else return true;">Short HTTP Introduction</a><a id="nav_servlets" class="navseclink" href="#servlets" onclick="if (event.button == 0) return goTo('#servlets', true); else return true;">Servlets</a><a id="nav_servletintro" class="navsublink" href="#servletintro" onclick="if (event.button == 0) return goTo('#servletintro', true); else return true;">Servlet Intro</a><a id="nav_classoverview" class="navsublink" href="#classoverview" onclick="if (event.button == 0) return goTo('#classoverview', true); else return true;">Class Overview</a><a id="nav_servletclass" class="navsublink" href="#servletclass" onclick="if (event.button == 0) return goTo('#servletclass', true); else return true;">Servlet Class</a><a id="nav_servicemethods" class="navsublink" href="#servicemethods" onclick="if (event.button == 0) return goTo('#servicemethods', true); else return true;">Service Dispatching in the HttpServlet</a><a id="nav_lifecycle" class="navsublink" href="#lifecycle" onclick="if (event.button == 0) return goTo('#lifecycle', true); else return true;">The Servlet Lifecycle</a><a id="nav_multithreading" class="navsublink" href="#multithreading" onclick="if (event.button == 0) return goTo('#multithreading', true); else return true;">Multithreading</a><a id="nav_twothreadsafeways" class="navsublink" href="#twothreadsafeways" onclick="if (event.button == 0) return goTo('#twothreadsafeways', true); else return true;">Two Simple Ways to Write Thread-Safe Servlets</a><a id="nav_webapplications" class="navsublink" href="#webapplications" onclick="if (event.button == 0) return goTo('#webapplications', true); else return true;">Web Applications</a><a id="nav_webxml" class="navsublink" href="#webxml" onclick="if (event.button == 0) return goTo('#webxml', true); else return true;">web.xml</a><a id="nav_applayout" class="navsublink" href="#applayout" onclick="if (event.button == 0) return goTo('#applayout', true); else return true;">Example Application Layout</a><a id="nav_contextroot" class="navsublink" href="#contextroot" onclick="if (event.button == 0) return goTo('#contextroot', true); else return true;">Context Root</a><a id="nav_staticcontent" class="navsublink" href="#staticcontent" onclick="if (event.button == 0) return goTo('#staticcontent', true); else return true;">Static Content</a><a id="nav_eclipse" class="navsublink" href="#eclipse" onclick="if (event.button == 0) return goTo('#eclipse', true); else return true;">How to Create a Web Application with Eclipse</a><a id="nav_ant" class="navsublink" href="#ant" onclick="if (event.button == 0) return goTo('#ant', true); else return true;">How to Create a Web Application (WAR) with Ant</a><a id="nav_tomcat" class="navsublink" href="#tomcat" onclick="if (event.button == 0) return goTo('#tomcat', true); else return true;">How to Deploy a Web Application on Tomcat</a><a id="nav_responses" class="navseclink" href="#responses" onclick="if (event.button == 0) return goTo('#responses', true); else return true;">Responses</a><a id="nav_textoutput" class="navsublink" href="#textoutput" onclick="if (event.button == 0) return goTo('#textoutput', true); else return true;">Text Output</a><a id="nav_responsebinary" class="navsublink" href="#responsebinary" onclick="if (event.button == 0) return goTo('#responsebinary', true); else return true;">Binary Output</a><a id="nav_buffering" class="navsublink" href="#buffering" onclick="if (event.button == 0) return goTo('#buffering', true); else return true;">Buffering and Committing</a><a id="nav_errors" class="navsublink" href="#errors" onclick="if (event.button == 0) return goTo('#errors', true); else return true;">Error Code</a><a id="nav_redirection" class="navsublink" href="#redirection" onclick="if (event.button == 0) return goTo('#redirection', true); else return true;">Redirection</a><a id="nav_requests" class="navseclink" href="#requests" onclick="if (event.button == 0) return goTo('#requests', true); else return true;">Requests</a><a id="nav_reqparameters" class="navsublink" href="#reqparameters" onclick="if (event.button == 0) return goTo('#reqparameters', true); else return true;">Request Parameters</a><a id="nav_parameternames" class="navsublink" href="#parameternames" onclick="if (event.button == 0) return goTo('#parameternames', true); else return true;">How to find out which parameters have been sent</a><a id="nav_headers" class="navsublink" href="#headers" onclick="if (event.button == 0) return goTo('#headers', true); else return true;">How to read header values</a><a id="nav_paths" class="navsublink" href="#paths" onclick="if (event.button == 0) return goTo('#paths', true); else return true;">Paths</a><a id="nav_sessionsandcookies" class="navseclink" href="#sessionsandcookies" onclick="if (event.button == 0) return goTo('#sessionsandcookies', true); else return true;">Sessions and Cookies</a><a id="nav_cookies" class="navsublink" href="#cookies" onclick="if (event.button == 0) return goTo('#cookies', true); else return true;">Cookies</a><a id="nav_sessions" class="navsublink" href="#sessions" onclick="if (event.button == 0) return goTo('#sessions', true); else return true;">Sessions</a><a id="nav_distributablesessions" class="navsublink" href="#distributablesessions" onclick="if (event.button == 0) return goTo('#distributablesessions', true); else return true;">Sessions in Distributed Servers (Clusters)</a><a id="nav_sessioncaveat" class="navsublink" href="#sessioncaveat" onclick="if (event.button == 0) return goTo('#sessioncaveat', true); else return true;">Be Careful When Using HttpSession</a><a id="nav_resources" class="navseclink" href="#resources" onclick="if (event.button == 0) return goTo('#resources', true); else return true;">Resources</a><a id="nav_resourceannotations" class="navsublink" href="#resourceannotations" onclick="if (event.button == 0) return goTo('#resourceannotations', true); else return true;">Resource Annotations</a><a id="nav_jndilookup" class="navsublink" href="#jndilookup" onclick="if (event.button == 0) return goTo('#jndilookup', true); else return true;">How to get resources with JNDI</a><a id="nav_tomcatresources" class="navsublink" href="#tomcatresources" onclick="if (event.button == 0) return goTo('#tomcatresources', true); else return true;">How to Provide Resources in Tomcat</a><a id="nav_howtorequestresponses" class="navseclink" href="#howtorequestresponses" onclick="if (event.button == 0) return goTo('#howtorequestresponses', true); else return true;">How to... Requests and Responses</a><a id="nav_customheaders" class="navsublink" href="#customheaders" onclick="if (event.button == 0) return goTo('#customheaders', true); else return true;">How to Read and Write Additional Headers</a><a id="nav_attributes" class="navsublink" href="#attributes" onclick="if (event.button == 0) return goTo('#attributes', true); else return true;">How to Use Attributes in Request and Context</a><a id="nav_getlastmodified" class="navsublink" href="#getlastmodified" onclick="if (event.button == 0) return goTo('#getlastmodified', true); else return true;">How to Use HttpServlet.getLastModified to Improve Client-Side Caching</a><a id="nav_contentlength" class="navsublink" href="#contentlength" onclick="if (event.button == 0) return goTo('#contentlength', true); else return true;">How to Set the Content Length</a><a id="nav_fileupload" class="navsublink" href="#fileupload" onclick="if (event.button == 0) return goTo('#fileupload', true); else return true;">How to Receive File Uploads (Multi-Part File Upload)</a><a id="nav_browserdetection" class="navsublink" href="#browserdetection" onclick="if (event.button == 0) return goTo('#browserdetection', true); else return true;">How to Detect the User's Web Browser</a><a id="nav_contentlanguage" class="navsublink" href="#contentlanguage" onclick="if (event.button == 0) return goTo('#contentlanguage', true); else return true;">How to Declare the Content Language</a><a id="nav_acceptedlanguages" class="navsublink" href="#acceptedlanguages" onclick="if (event.button == 0) return goTo('#acceptedlanguages', true); else return true;">How to Detect the Client's Preferred Languages</a><a id="nav_sendingxml" class="navsublink" href="#sendingxml" onclick="if (event.button == 0) return goTo('#sendingxml', true); else return true;">How to Send XML as Response</a><a id="nav_dynamicimages" class="navsublink" href="#dynamicimages" onclick="if (event.button == 0) return goTo('#dynamicimages', true); else return true;">How to Generate Images as Response</a><a id="nav_jspforward" class="navsublink" href="#jspforward" onclick="if (event.button == 0) return goTo('#jspforward', true); else return true;">How to Use a JSP as Template</a><a id="nav_requestdispatcher" class="navsublink" href="#requestdispatcher" onclick="if (event.button == 0) return goTo('#requestdispatcher', true); else return true;">How to Invoke Servlets and JSPs with the RequestDispatcher</a><a id="nav_virtualhosts" class="navsublink" href="#virtualhosts" onclick="if (event.button == 0) return goTo('#virtualhosts', true); else return true;">How to Handle Virtual Hosts and Multiple IP Addresses?</a><a id="nav_filters" class="navsublink" href="#filters" onclick="if (event.button == 0) return goTo('#filters', true); else return true;">How to Write Filters</a><a id="nav_howtosessionssecurity" class="navseclink" href="#howtosessionssecurity" onclick="if (event.button == 0) return goTo('#howtosessionssecurity', true); else return true;">How to... Sessions and Security</a><a id="nav_usermanagement" class="navsublink" href="#usermanagement" onclick="if (event.button == 0) return goTo('#usermanagement', true); else return true;">How to Authenticate and Manage Users</a><a id="nav_declarativesecurity" class="navsublink" href="#declarativesecurity" onclick="if (event.button == 0) return goTo('#declarativesecurity', true); else return true;">How to Restrict Access to a Web Application (Declarative Security)</a><a id="nav_requiringssl" class="navsublink" href="#requiringssl" onclick="if (event.button == 0) return goTo('#requiringssl', true); else return true;">How to Require HTTPS / SSL</a><a id="nav_programmaticsecurity" class="navsublink" href="#programmaticsecurity" onclick="if (event.button == 0) return goTo('#programmaticsecurity', true); else return true;">How to Use Authentication Data in Servlets</a><a id="nav_cookielessessions" class="navsublink" href="#cookielessessions" onclick="if (event.button == 0) return goTo('#cookielessessions', true); else return true;">How to Use HttpSessions and Authentication without Cookies?</a><a id="nav_howtogeneral" class="navseclink" href="#howtogeneral" onclick="if (event.button == 0) return goTo('#howtogeneral', true); else return true;">How to... General</a><a id="nav_addinglibraries" class="navsublink" href="#addinglibraries" onclick="if (event.button == 0) return goTo('#addinglibraries', true); else return true;">How to Add Libraries to a Web Application / WAR</a><a id="nav_addingresourcefiles" class="navsublink" href="#addingresourcefiles" onclick="if (event.button == 0) return goTo('#addingresourcefiles', true); else return true;">How to Read Files Contained in a Web Application / WAR</a><a id="nav_throwingexceptions" class="navsublink" href="#throwingexceptions" onclick="if (event.button == 0) return goTo('#throwingexceptions', true); else return true;">How to Throw Exceptions in Servlets</a><a id="nav_initparameters" class="navsublink" href="#initparameters" onclick="if (event.button == 0) return goTo('#initparameters', true); else return true;">Configure your Servlet with Initialization Parameters</a><a id="nav_logging" class="navsublink" href="#logging" onclick="if (event.button == 0) return goTo('#logging', true); else return true;">How to Log</a><a id="nav_errorpages" class="navsublink" href="#errorpages" onclick="if (event.button == 0) return goTo('#errorpages', true); else return true;">How to Replace the Default Error Page</a><a id="nav_temporarydirectory" class="navsublink" href="#temporarydirectory" onclick="if (event.button == 0) return goTo('#temporarydirectory', true); else return true;">How to Get a Temporary Directory</a><a id="nav_ejbinvocation" class="navsublink" href="#ejbinvocation" onclick="if (event.button == 0) return goTo('#ejbinvocation', true); else return true;">How to Access an EJB</a><a id="nav_distributedapps" class="navsublink" href="#distributedapps" onclick="if (event.button == 0) return goTo('#distributedapps', true); else return true;">How to Create a Distributed Application</a><a id="nav_listeners" class="navsublink" href="#listeners" onclick="if (event.button == 0) return goTo('#listeners', true); else return true;">How to Be Notified about Events (Listeners)</a><a id="nav_servlet24" class="navsublink" href="#servlet24" onclick="if (event.button == 0) return goTo('#servlet24', true); else return true;">New Features Since Servlet API 2.4</a><a id="nav_andnow" class="navseclink" href="#andnow" onclick="if (event.button == 0) return goTo('#andnow', true); else return true;">And now...?</a><a id="nav_nextsteps" class="navsublink" href="#nextsteps" onclick="if (event.button == 0) return goTo('#nextsteps', true); else return true;">Next Steps</a></div></div><div id="popups"><div id="pp-d1104e1405" class="tooltip">You could spend a long time discussing whether mixing code with HTML is a good idea. Common opinion is that it should be avoided and custom tags (another JSP feature) should be used instead.<br/> However, the ability to include Java code makes JSPs very powerful. With JSPs you never have the situation wasting time to find a way around the limits of the template system. You always have pure Java as last resort.</div><div id="pp-d1104e1733" class="tooltip">There are encoding rules to transmit special characters and characters like "=" and "&amp;" in the URL. Spaces will be replaced by "+". All other characters are escaped as "%" character followed by a 2 hexadecimal characters to specify the character code.</div><div id="pp-d1104e2151" class="tooltip">To write a servlet, just create a class that <em>extends from <span class="idf">HttpServlet</span></em>, and provide a <em>constructor without arguments</em>. You do not need to override any of the <span class="idf">HttpServlet</span> methods.<br/> Beside the initialization and destruction methods <span class="idf">init</span> and <span class="idf">destroy</span>, the <span class="idf">HttpServlet</span> provides overridable methods for each HTTP command, like <span class="idf">doGet</span>, <span class="idf">doPost</span>, <span class="idf">doHead</span>....</div><div id="pp-d1104e2230" class="tooltip">A <em>constructor without arguments is required</em> for every <span class="idf">Servlet</span> class. You should <em>avoid putting code here</em>. Costly operations, such as retrieving connections via JNDI, should be done in the <em><span class="idf">init</span> method</em>, which will always be invoked before the servlet handles its first request.<br/> Usually it is up to the web container to decide when to initialize a servlet. Either the servlet is initialized when the application is started, or when the first request needs to be handled. You can enforce the former behaviour using the <span class="idf">&lt;load-on-startup&gt;</span> element in the <span class="idf">web.xml</span> deployment descriptor.</div><div id="pp-d1104e2277" class="tooltip">The <span class="idf">init</span> method will be invoked by the web container before the servlet gets the first request. All <em>costly initialization should be done here</em>. Also, the <span class="idf">ServletConfig</span> will be passed here and can be used to configure the servlet.<br/> Usually it is up to the web container to decide when to initialize a servlet. Either the servlet is initialized when the application is started, or when the first request needs to be handled. You can enforce the former behaviour using the <span class="idf">&lt;load-on-startup&gt;</span> element in the <span class="idf">web.xml</span> deployment descriptor.</div><div id="pp-d1104e2406" class="tooltip">When the server does not need the servlet anymore, it calls <span class="idf">destroy</span>. All <em>resources should be released here</em>.<br/> There are two reasons for the server to call <span class="idf">destroy</span>. Either the web application is being shut down, or the server decides that the servlet has not been needed for a while and it should be removed in order to conserve resources.<br/> After calling <span class="idf">destroy</span>, the container will not use the servlet anymore. If it needs the servlet to handle a request, it will create a new instance and initialize it again.</div><div id="pp-d1104e2593" class="tooltip">You can, of course, also use the usual synchronization techniques to write a thread-safe servlet. But explaining them is far outside of the scope of this page.</div><div id="pp-d1104e2624" class="tooltip">Yes, that's true! At least if you follow the Java specification by the word. Because thread synchronization is not only needed to avoid concurrent access, but also to synchronize the thread's local memory (read: the CPU core's cache) with the main memory.<br/> However, on today's machines, not synchronizing the constructor won't hurt. This may change though in the future, when caches are not cache coherent anymore.</div><div id="pp-d1104e2703" class="tooltip">The goal of these rules is to prevent the sharing of data between threads, which would require synchronization.</div><div id="pp-d1104e2897" class="tooltip">Any file that you put into a JAR will be served by the web container. The only exceptions are files in the special '/WEB-INF' and '/META-INF' directories.<br/> Depending on the extension, some files will be served as static content, and some files (like JSPs) will be handled in a special way. The files are reachable under the same path as in the JAR, within the application's context. For example, if your web-application's context URL is 'http://myserver/myapp' and you have a file 'a/b/c.html' in the WAR, its URL is 'http://myserver/myapp/a/b/c.html'.</div><div id="pp-d1104e2938" class="tooltip">As a WAR is technically a JAR, it supports many JAR features. You could, for example, put JAR's <span class="idf">MANIFEST.MF</span> descriptor there. Some containers also define <span class="idf">META-INF</span> as location for non-standard configuration files. Beside those vendor extensions, <span class="idf">META-INF</span> is not important for most WARs. You only need to know that files in '/META-INF' will not be served as static files.</div><div id="pp-d1104e2980" class="tooltip">As said above, a WAR is just a JAR with a special file layout and the file extension ".war". So if you do not have a IDE or build tool that helps you to assemble the web application, you can always resort to the good old "jar" command line tool. Just write "jar cvf <span class="idf">myapp.war</span> <span class="idf">path/to/dir</span>".</div><div id="pp-d1104e3057" class="tooltip">The servlet mapping defines for which path the server will invoke the servlet.<br/> This is is the path under which it is reachable by web browsers, minus the context root which must be declared by you in the web container.<br/>For example, if your server is at www.example.org, you define a context root 'timeapp', and the <span class="idf">&lt;url-pattern&gt;</span> is '/now', then you can reach the servlet under 'http://www.example.org/timeapp/now'.</div><div id="pp-d1104e3192" class="tooltip">Setting your application's context root is <em>container-specific</em>. Containers that allow you to deploy by copying a WAR into a deployment directory usually take <em>the WAR's file name without extension as context root</em> (thus a WAR called 'myapp.war' gets '/myapp' as context root). Depending on the specific container, you can either set an application's context root in a GUI, declare it in the container's configuration file, or you can declare it in the WAR itself by putting a container-specific configuration file into the '/WEB-INF/' directory.</div><div id="pp-d1104e3230" class="tooltip">For example, if you have a file "/images/ball.png" in your WAR and your application is located at "http://server/myapp/", you can reach it under "http://server/myapp/images/ball.png".</div><div id="pp-d1104e3291" class="tooltip">For example, if you define "index.html" as welcome file and a user requests the directory "/test/", the server returns the content of the file "/test/index.html".</div><div id="pp-d1104e3370" class="tooltip">You need to configure your server in <span class="idf">Preferences/Server/Runtime Environments</span>. Then you can add your project to the server, and start/stop/debug the server. Eclipse will do everything else for you. It can even automatically re-deploy when you change anything in your project.<br/> Eclipse ships with support for Tomcat, JBoss and a few others. Plugins for many other servers are available on the web.<br/> You can <em>edit the context root</em> in the project's properties / Web Project Settings. So for a server running on port 8080 and a context root 'MyApp', find your application at http://localhost:8080/MyApp/. </div><div id="pp-d1104e3488" class="tooltip">Before you can send a text as response, you need to <em>set the content type</em> of the response (<span class="idf">setContentType</span>) and optionally the character encoding (<span class="idf">setCharacterEncoding</span>). Then <em>retrieve a <span class="idf">Writer</span></em> using <span class="idf">getWriter</span> from the <span class="idf">HttpServletResponse</span>, and use the <span class="idf">Writer</span>'s methods to write the body.</div><div id="pp-d1104e3574" class="tooltip">You must always set the <em>content type</em> of your response (also called <em>internet media type</em> or <em>MIME type</em>). Basically it does what file extensions do for files - telling the browser what kind of document it is receiving.<br/> A good entry point to find the right content type is the <a href="http://en.wikipedia.org/wiki/Internet_media_type">Internet Media Type 
page on Wikipedia</a>.<br/> For some text formats (HTML and plain text in particular), you should <em>specify the <span class="idf">charset</span> attribute</em>, as shown here, to tell the browser about the encoding you use. </div><div id="pp-d1104e3608" class="tooltip">Usually you can't do anything wrong when you set the character set to "UTF-8". It's widely supported and works with every character that is possible in Java. The default, "ISO-8859-1", only works with western european languages.</div><div id="pp-d1104e3625" class="tooltip">After setting headers (such as content type and character encoding), you need to <em>write the response body</em>. Here you have a choice between getting a <span class="idf">Writer</span> for text and getting an <span class="idf">OutputStream</span> for binary data. Once you have the <span class="idf">Writer</span> or <span class="idf">OutputStream</span>, just write your response. <br/> <em>Closing the stream is not required</em>, the web container will do this automatically as soon as the service method ends.</div><div id="pp-d1104e3687" class="tooltip">Before you can send a binary document as response, you need to <em>set the content type</em> (<span class="idf">setContentType</span>). Then <em>retrieve an <span class="idf">OutputStream</span></em> using <span class="idf">getOutputStream</span> from the <span class="idf">HttpServletResponse</span>, and use the <span class="idf">OutputStream</span>'s methods to write the body.</div><div id="pp-d1104e3995" class="tooltip">This includes every operation that modifies headers, including setting the content type, content length and setting cookies.</div><div id="pp-d1104e4003" class="tooltip">If you call <span class="idf">resetBuffer</span>, the buffer will be cleared, and anything that you have written so far will be discarded. This means, that you can start all over again. Unlike <span class="idf">reset</span>, <span class="idf">resetBuffer</span> will not modify headers.</div><div id="pp-d1104e4020" class="tooltip">If you call <span class="idf">reset</span>, all headers and the buffer will be cleared, and anything that you have written so far will be discarded. This means that you can start all over again.</div><div id="pp-d1104e4036" class="tooltip">The Servlet API has a simple convenience method to <em>send a standard error page</em> to the user. <br/>The standard error page should only be used <em>for unexpected errors</em> that users usually do not run into. For example, if your database is not available, the error page with error code may be ok. If the user entered a wrong value into a form, an error code is not appropriate and you should explain the user her mistake more gently.<br/> The <span class="idf">web.xml</span> deployment descriptor lets you customize the page that will be shown with the <span class="tag">&lt;<a href="#" id="tl-d1104e4052" class="tooltip" onclick="return tlClick('tl-d1104e4052','pp-d1104e503');" onmouseover="return tlOver('tl-d1104e4052','pp-d1104e503');" onmouseout="return tlOut('tl-d1104e4052','pp-d1104e503');">error-page</a>&gt;</span> element.<br/> <span class="idf">sendError</span> will only work correctly if the <em>response is not committed</em> yet.:</div><div id="pp-d1104e4090" class="tooltip">The <span class="idf">HttpServletResponse</span> class offers constants for all HTTP status codes. It will be shown to the user together with the text you provide as second argument. By default, the web container provides its own page to show. You can customize it in the <span class="idf">web.xml</span> deployment descriptor with the <span class="tag">&lt;<a href="#" id="tl-d1104e4098" class="tooltip" onclick="return tlClick('tl-d1104e4098','pp-d1104e503');" onmouseover="return tlOver('tl-d1104e4098','pp-d1104e503');" onmouseout="return tlOut('tl-d1104e4098','pp-d1104e503');">error-page</a>&gt;</span> element.</div><div id="pp-d1104e4118" class="tooltip">After invoking <span class="idf">sendError</span> or <span class="idf">sendRedirect</span> you should usually <em>return immediately from the service method</em>, as the response for the client has already been sent. It is a common error to forget a <span class="idf">return</span> after the invocation and go on processing, often leading to bugs that are hard to find.</div><div id="pp-d1104e4144" class="tooltip">To <em>redirect the client</em> to a different URL use the <span class="idf">sendRedirect</span> method. Redirecting is often useful for various reasons, but be careful with it: it breaks the back button for the user (if the user want to go back, she will be redirected again).<br/> <span class="idf">sendRedirect</span> will only work correctly if the <em>response is not committed</em> yet.</div><div id="pp-d1104e4213" class="tooltip">Requests parameters are usually <em>values sent by a form</em> on an HTML page. Parameters are very simple: each has <em>a name</em> (corresponding to the form input's name) and a simple <em>string as value</em> (containing the user's input or, for buttons, a value specified in the HTML). You can retrieve a parameter's value using <span class="idf">HttpServletResponse</span>'s <span class="idf">getParameter</span> method. It is possible that there's more than one parameter with the same name - you can then retrieve the complete list using <span class="idf">getParameterValues</span>. To find out which parameters have been sent use <span class="idf">getParameterMap</span> or <span class="idf">getParameterNames</span>.</div><div id="pp-d1104e4362" class="tooltip">This method is called by <span class="idf">doGet</span> and <span class="idf">doPost</span> to handle both commands. GET will be used the first time the user visits the page - if a user enters a URL or follows a link, the browser uses GET. POST will be used for posting the form.</div><div id="pp-d1104e4413" class="tooltip">The following line tests whether both parameters have been set and are numeric. <em>Parameters validation of is very important</em> and a frequent source of security issues, as users can send any string as parameters. Always be sure to <em>only accept those values that you can handle</em> and ignore or return errors for everything else.</div><div id="pp-d1104e4581" class="tooltip">This servlet returns plain text instead of HTML. For trying things out plain text is often more convenient.</div><div id="pp-d1104e4639" class="tooltip">It is possible in HTTP that there is more than one name/value pair with the same name. That's why <em>the map contains string arrays</em> as values. Some mean people would add that Java designers prefer correctness over ease-of-use, but don't quote me on that!</div><div id="pp-d1104e4652" class="tooltip">The example uses <span class="idf">PrintWriter</span>'s <span class="idf">printf</span> method. It formats the string exactly like <span class="idf">String.format</span> does. If you don't know <span class="idf">String.format</span>, check out its Javadocs now - it will save you a lot of time!</div><div id="pp-d1104e4688" class="tooltip">Every browser version has a distinct <span class="idf">User-Agent</span> value. However, <em>a browser may lie</em> and give you a wrong value (usually the same as some more popular browser to increase compatibility). Furthermore, browsers try to include keywords from other browsers if they share the same features. All this makes interpreting the <span class="idf">User-Agent</span> an art of its own.</div><div id="pp-d1104e5046" class="tooltip">The Servlet API represents cookies with the <span class="idf">Cookie</span> object. Use <span class="idf">getCookies</span> on the request to get a list of all cookies sent by the client. In order to add or update a cookie, use the response's <span class="idf">addCookie</span> method.</div><div id="pp-d1104e5147" class="tooltip">Unfortunately, if there is is no cookie sent by the browser, <span class="idf">getCookies</span> returns null instead of an empty array. So you always need to check for null first.</div><div id="pp-d1104e5217" class="tooltip">To modify a cookie, <em>create a new <span class="idf">Cookie</span></em> instance and set it with <span class="idf">addCookie</span>.<br/> Only modifying a <span class="idf">Cookie</span> returned by <span class="idf">getCookies</span> will not work, you <em>always need to call <span class="idf">addCookie</span></em> to update a cookie, even if the cookie already exists!</div><div id="pp-d1104e5261" class="tooltip">By default, a cookie is only <em>valid for the current session</em>. That means that the browser will forget about the cookie as soon as it is closed. In order to let the browser save the cookie, you need to <em>give it an expiration date</em> as shown here. <br/> The value passed to <span class="idf">setMaxAge</span> is the cookie's <em>maximum age in seconds</em>.</div><div id="pp-d1104e5315" class="tooltip">Storing the session id in a cookie is the most important way for the container to connect sessions to browsers, but there are others: if the connection is SSL-encrypted (HTTPS), <em>SSL's session mechanism</em> will be used. As a third option, the container may <em>rewrite URLs</em> and add the session id to them. The latter approach works with every browset, but you have to modify every single link on your pages using the <span class="idf">encodeURL</span> string rewriting method.<br/> Note that the session implementation's <em>details are container-specific</em>.</div><div id="pp-d1104e5337" class="tooltip">Web containers <em>use session-only cookies to store the session id</em>. Thus the session is lost when the browser is restarted, and the server will create a new one.<br/> By default, containers <em>do not persist the http sessions</em>, and thus all sessions are lost on restart. Some containers offer you container-specific way to store sessions though, for clustering (several servers sharing the same session objects) or to allow restarts without losing sessions. <br/> If you need to store data about the user for a longer time, you should use cookies. </div><div id="pp-d1104e5427" class="tooltip"><span class="idf">getSession</span> returns the user's session if there is already one. Otherwise it creates a new session.</div><div id="pp-d1104e5578" class="tooltip">The problem is that users will not go through pages linearly. They may use the browser's back button to revisit a page, or open a new tab and go through the multi-page form with several tabs at the same time. Another common pitfall is that many people double-click links and thus may submit the content twice. <br/> If you write a multi-page-form, you should store all data as hidden fields in the form. Everything else is a nightmare to debug.</div><div id="pp-d1104e5719" class="tooltip"><span class="idf">@Resource</span> tells the container that the servlet <em>requires a JDBC <span class="idf">DataSource</span> with the JNDI name 'jdbc/db'</em>. The deployer is responsible for configuring the container to provide it. The container will <em>inject the value</em> into the field after instantiation.</div><div id="pp-d1104e5746" class="tooltip"><span class="idf">@Resource</span> tells the container that the servlet <em>requires a String with the JNDI name 'param/webmaster'</em>. The deployer is responsible for configuring the container to provide it. The container will <em>inject the value</em> into the field after instantiation.</div><div id="pp-d1104e5825" class="tooltip">The easiest way to handle an unexpected problem is to throw a <span class="idf">ServletException</span>. The server will return an error page with HTTP status code 500 (internal error).</div><div id="pp-d1104e6027" class="tooltip">All resources that the container provides to the application are always contained in the application's private namespace 'java:comp/env'. Also called Environment Naming Content (ENC).</div><div id="pp-d1104e6041" class="tooltip">Looks up the JNDI name 'java:comp/env/param/webmaster'. 'param/webmaster' is the name specified in <span class="idf">web.xml</span>.</div><div id="pp-d1104e6065" class="tooltip">Looks up the JNDI name 'java:comp/env/jdbc/db'. 'jdbc/db' is the name specified in <span class="idf">web.xml</span>.</div><div id="pp-d1104e6163" class="tooltip">For whatever reason, in Tomcat 'override' means overriding the (optional) default value given in <span class="idf">web.xml</span>'s <span class="tag">&lt;<a href="#" id="tl-d1104e6168" class="tooltip" onclick="return tlClick('tl-d1104e6168','pp-d1104e656');" onmouseover="return tlOver('tl-d1104e6168','pp-d1104e656');" onmouseout="return tlOut('tl-d1104e6168','pp-d1104e656');">env-entry</a>&gt;</span> element. So <em>to use the value in <span class="idf">context.xml</span> you must set the attribute to "false"</em>.<br/> If the application is declaring the value with <span class="idf">@Resource</span>, the <span class="idf">override is not needed.</span></div><div id="pp-d1104e6371" class="tooltip"><span class="idf">User-Agent</span> contains a string describing the user's browser and its version. If an Internet Explorer contains the Google Chrome Frame plugin, the user agent string contains the text "chromeframe" (according to the Chrome Frame documentation). </div><div id="pp-d1104e6385" class="tooltip">The <span class="idf">X-UA-Compatible</span> header is mostly used by Internet Explorer and allows the server to state which special IE features it supports. In this case, we set it to "chrome=1" to enable Google Chrome Frame.</div><div id="pp-d1104e6594" class="tooltip">The <span class="idf">File</span> provided by this attribute points to a directory that your web application can use to store temporary files.</div><div id="pp-d1104e7541" class="tooltip">It is up to the container to determine the right enconding for your locale if you set a locale but no encoding. However, you can override the container's choice with the <span class="idf">locale-encoding-mapping-list</span> element in the <span class="idf">web.xml</span>, which allows you to specify an encoding for each locale.</div><div id="pp-d1104e7946" class="tooltip"><span class="idf">text/xml</span> is a generic content type for XML. If possible, you should use a specific type for your response, for example <span class="idf">application/xhtml+xml</span> for XHTML.</div><div id="pp-d1104e8242" class="tooltip">All the 'magic' is done here: <span class="idf">ImageIO.write</span> takes the <span class="idf">BufferedImage</span> and writes it as PNG into the <span class="idf">OutputStream</span>.</div><div id="pp-d1104e8304" class="tooltip">Note that this example violates the Servlet API guideline to prefix attributes with your package name, but doing so would be quite cumbersome and is not really recommended for a simple application. </div><div id="pp-d1104e8371" class="tooltip">After invoking <span class="idf">forward</span> the response has been generated and you should usually return from the <span class="idf">service</span> method immediately. It is a common error to forget that <span class="idf">forward</span> finished the response, but does not end the method and all following code will still be executed.</div><div id="pp-d1104e9264" class="tooltip">Calling <span class="idf">doFilter</span> on the <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/FilterChain.html" class="javadoc">FilterChain</a> is required to invoke either the next filter or the original handler of the request.</div><div id="pp-d1104e9704" class="tooltip">For a consumer-oriented site it lacks features like letting user create their own accounts, change password by email, remembering the user's identity and many more. For a corporate application this is not important, since generally new users are only created by administrators. Also, most containers support authentification via external databases or LDAP directories, which is perfect in a corporate setting.</div><div id="pp-d1104e9751" class="tooltip">The container may either store users in a private file or database (and bring its own tools for user management), or is able to access an external source for authentication data, such as a database or LDAP directory</div><div id="pp-d1104e10331" class="tooltip">The Servlet API specifies several authentication modes (described above), but they all prompt the user only for authentication when the user has not authenticated yet and tries to access a restricted resource. <em>Without restricted resources users can not log in</em> and thus servlets won't get any authentication data.</div><div id="pp-d1104e10352" class="tooltip">The Principal class is very simple and offers you nothing more than the user's name (which you can easily get with <span class="idf">getRemoteUser</span>). Web containers may return a sub-class of <span class="idf">Principal</span> offering additional information, but this is container-specific.</div><div id="pp-d1104e10707" class="tooltip">The reason for putting them in <span class="idf">WEB-INF</span> is that data files should usually not be served as static content. <span class="idf">/WEB-INF/</span> and <span class="idf">/META-INF/</span> are the only directories in a web application that the container will never show to the user.<br/> You can also create a sub-directory in <span class="idf">WEB-INF</span> to organize your files.</div><div id="pp-d1104e11089" class="tooltip">If your servlet class extends <span class="idf">HttpServlet</span> or its super class <span class="idf">GenericServlet</span>, then <span class="idf">getServletContext</span> and <span class="idf">getServletConfig</span> will only work if the original <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#init(javax.servlet.ServletConfig)" class="javadoc">init</a> method has been invoked! Otherwise the <span class="idf">GenericServlet</span> will not be able to store the context reference.</div><div id="pp-d1104e11345" class="tooltip">If you define several error pages for exceptions, and more than one of them matches an exception, then the declaration with <em>the closest match in the class hierarchy wins</em>.</div><div id="pp-d1104e1427" class="tooltip">MVC (Model-View-Controller) is the most common pattern to implement user interfaces. The code is split into a Model (represents the data being edited), a View (to present the data to the user) and a Controller (which handles user input and initiates actions).</div><div id="pp-d1104e1438" class="tooltip">Originally Spring was a small and easy-to-use framework, while EJB 2.x application servers were monsters with complex APIs and a huge overhead. Over the years the situation has changed though. Spring grew and is a pretty large system now, while EJB reduced its overhead with version 3.0 and became simpler to use.<br/> Today Spring may still be smaller than EJB application servers, but the difference is not nearly as large as it used to be.</div><div id="pp-d1104e1592" class="tooltip">Websphere Application Server</div><div id="pp-d1104e1799" class="tooltip">The first line contains the command (GET), the path (/guide/jaxb/) and the HTTP protocol version (1.1).</div><div id="pp-d1104e1805" class="tooltip">The required header value "HOST" tells the web server the host name requested by the user. It allows you to host several domains on a single web server.</div><div id="pp-d1104e1811" class="tooltip">This tells the webserver all about the client doing the request. Here, it is a Firefox 3.6 browser running on Windows.</div><div id="pp-d1104e1817" class="tooltip">This header value is a list of comma-separated content types to show the web server what kind of documents the browser can handle. Firefox prefers "text/html" (HTML) or "application/xhtml+xml" (XHTML). Other XML ("application/xml") is also good, but less desirable ("q=0.9"). Everything else will be accepted ("*/*") if necessary.<br/> Note that this header value is ignored by most servlets - just send the browser the requested document.</div><div id="pp-d1104e1825" class="tooltip">Many multilingual pages use this setting to find out which language the user prefers. This user prefers US English ("en-us") over plain English ("en") and German ("de-de" and "de").</div><div id="pp-d1104e1831" class="tooltip">This tells the web server that the browser can handle compressed pages that use the "gzip" or "deflate" (ZIP) compression mechanisms.</div><div id="pp-d1104e1838" class="tooltip">This header value tells the web server what character sets the browser prefers. Here it prefers "ISO-8859" over "utf-8", but will take anything ("*").</div><div id="pp-d1104e1844" class="tooltip">Tells the server to keep the connection open for additional requests.</div><div id="pp-d1104e1859" class="tooltip">The first line of the response always contains the HTTP version used by the server (1.1) and the status code (200) with an explanation (OK).</div><div id="pp-d1104e1865" class="tooltip">This header value contains the length of the body document in bytes.</div><div id="pp-d1104e1871" class="tooltip">This is the date at which the server generated the response.</div><div id="pp-d1104e1877" class="tooltip">This contains the type of the body document. Here, it is XHTML ("application/xhtml+xml").</div><div id="pp-d1104e1883" class="tooltip">Here the web server identifies its version.</div><div id="pp-d1104e1889" class="tooltip">This is the date at which the document has been modified. It may be important for caching.</div><div id="pp-d1104e1896" class="tooltip">If the server sends this, it means that the client is also allowed to request the document partially by specifying a byte range.</div><div id="pp-d1104e2012" class="tooltip"><span class="idf">web.xml</span> is the <em>deployment descriptor for web applications</em>. It is always located at the path <em>/WEB-INF/web.xml</em> in the application's directory structure. Usually the whole web application is stored in a WAR file (a special kind of JAR archive) for deployment in the web container.</div><div id="pp-d1104e2029" class="tooltip">A URL Pattern defines which URLs the servlet responds to. You can either define a path, a partial path or a file extension.</div><div id="pp-d1104e2039" class="tooltip">A WAR file is a <em>special kind of JAR archive</em> that contains all classes of a web application as well as static files and JSPs. The content of the WAR is described in the deployment descriptor at /WEB-INF/web.xml.</div><div id="pp-d1104e4518" class="tooltip"><span class="idf">java.util.Enumeration</span> is the predecessor of <span class="idf">Iterator</span> and was used before Java 1.2 - as you can see the Servlet API is really old! Use <span class="idf">Collections.list</span> to convert the result into a modern <span class="idf">ArrayList</span>.</div><div id="pp-d1104e4920" class="tooltip"><span class="idf">&lt;url-pattern</span> elements that end with a wildcard and thus specify a directory (e.g. '/images/*').</div><div id="pp-d1104e4931" class="tooltip"><span class="idf">&lt;url-pattern</span> elements that start with a wildcard and describe a extension (e.g. '*.html').</div><div id="pp-d1104e5071" class="tooltip">Cookies are name/value string pairs that a server can store in the browser to store things such as the user's identity and configuration. In the browser's request it sends all cookies that it has for the server name. In the server's response, the server can add or overwrite cookies by sending a special header.<br/> To learn more about cookies, read <a href="http://en.wikipedia.org/wiki/HTTP_cookie">HTTP Cookie</a> on Wikipedia.</div><div id="pp-d1104e5633" class="tooltip">The person installing the application on the server.</div><div id="pp-d1104e6243" class="tooltip">Actually it is a timestamp as provided by <span class="idf">System.currentTimeMillis()</span>. The <span class="idf">long</span> contains the number of milliseconds passed since January 1 1970. You can easily use it with <span class="idf">Date</span>, <span class="idf">Calendar</span> and most other date-related objects in Java.</div><div id="pp-d1104e8413" class="tooltip">Forwarding means that you give your request and response objects to another servlet and let it handle the request. This is only possible if you haven't comitted your response yet. Beside servlets you can also forward to any other page supported by the container, including JSPs.</div><div id="pp-d1104e8419" class="tooltip">When including, the invoked servlet appends its output to your reponse's body, but does not modify the response headers. Beside servlets you can also include any other static page or JSP supported by the container.</div><div id="pp-d1104e8446" class="tooltip">This is the servlet name defined in the <span class="idf">web.xml</span> deployment descriptor with a &lt;servlet&gt;/&lt;servlet-name&gt; element.</div><div id="pp-d1104e9440" class="tooltip">The wrappers provided by the API wrap the original object by passing all method invocations to the underlying object, without modifying the arguments, and return the original return value.</div><div id="pp-d1104e9729" class="tooltip">This form of authentication requires that the user installs a SSL certificate into the client/browser. The certificate may either be obtained from a well-known certificate authority, or created by the owner of the server. In any case, it is a very secure but also cumbersome way of authentication that's not practical for most end-users. It may be useful in a corporate setting though.</div><div id="pp-d1104e9737" class="tooltip">The built-in form authentication only allows you to specify a HTML page with two fields for username and password. Users are then tracked using <span class="idf">HttpSession</span>s.<br/> Form-based authentication lacks basic features expected from a consumer-oriented site, such as being able to retrieve the password by mail or a 'keep me signed in' function. </div><div id="pp-d1104e10773" class="tooltip">Containers are not required to support this, as not every web container will extract WAR archives and put them into the file system. But most do this and thus can support the method.</div><div id="pp-d1104e288" class="tooltip">Declares the version of the Servlet Specification the descriptor uses, e.g. "2.4", "2.5" or "3.0". Newer versions are backward compatible, so "2.2" will work in 3.0 containers as well. Required.</div><div id="pp-d1104e290" class="tooltip">Defines the URLs that the filter will respond to. A complete path, or "/path/*", "*.extension" or "/". Repeat to define several alternative patterns. Optional, more than one allowed. At least one <span class="idf">&lt;servlet-name&gt;</span> or <span class="idf">&lt;url-pattern&gt;</span> must be present.</div><div id="pp-d1104e298" class="tooltip">The name of a servlet to be filtered. Must match the <span class="idf">&lt;servlet-name&gt;</span> set in the <span class="idf">&lt;servlet&gt;</span> declaration. Use the special name "*" to match all requests. Repeat it to define several alternative patterns. Optional, more than one allowed. At least one <span class="idf">&lt;servlet-name&gt;</span> or <span class="idf">&lt;url-pattern&gt;</span> must be present.</div><div id="pp-d1104e312" class="tooltip">Defines the URLs that the servlet will invoked for. A complete path, or "/path/*", "*.extension" or "/". Repeat to define several alternative patterns. Required, more than one allowed.</div><div id="pp-d1104e314" class="tooltip"><span class="idf">web-app</span> is the root element for all web.xml deployment descriptors. Its <span class="idf">version</span> attribute is required for declaring the Servlet Specification version.</div><div id="pp-d1104e321" class="tooltip">The namespace of all standard web.xml elements is "http://java.sun.com/xml/ns/j2ee".</div><div id="pp-d1104e323" class="tooltip">Declares the XML Schema namespace with the prefix "xsi". Only needed for <span class="idf">schemaLocation</span>.</div><div id="pp-d1104e328" class="tooltip">Declares the location of the XML Schema, so editors and other XML processors can find it. Optional (but recommended). The attribute is not directly part of the Servlet Specification, but comes from the XML Schema Specification.</div><div id="pp-d1104e330" class="tooltip">A description of the surrounding element which may be shown by a tool. Can be repeated with different <span class="idf">xml-lang</span> attributes in order to provide descriptions in several languages. Optional.</div><div id="pp-d1104e344" class="tooltip">If this element is set, it indicates that the web application is designed to be deployed in distributed servlet containers. In short, it only stores serializable objects in its sessions (some container allow additional references, for example EJB references) and handles things like static fields and context attributes correctly. Optional.</div><div id="pp-d1104e346" class="tooltip">Specifies a context parameter (string name/value pair) that will be put into the <span class="idf">ServletContext</span> and can be read using <span class="idf">getInitParameter</span>. You can specify any number of parameters. Optional, more than one allowed.</div><div id="pp-d1104e358" class="tooltip">Declares a <span class="idf">Filter</span> that can process requests and/or responses in the web server. Does not specify when the filter will run - you need <span class="idf">&lt;filter-mapping&gt;</span> elements to declare the URL patterns for the filter. <br/> Optional, more than one allowed.</div><div id="pp-d1104e370" class="tooltip">The name of the filter. Must be non-empty and unique in the web application. Will be referenced by the <span class="idf">&lt;filter-mapping&gt;</span>. Required.</div><div id="pp-d1104e375" class="tooltip">Name of the class that implements the filter. The class must implement <span class="idf">javax.servlet.Filter</span>. Required.</div><div id="pp-d1104e392" class="tooltip">Contains the name of a parameter. Any unique name allowed. Required.</div><div id="pp-d1104e394" class="tooltip">Contains the value (string) of a parameter. Required.</div><div id="pp-d1104e396" class="tooltip">Specifies when the given <span class="idf">Filter</span> should be invoked. You can repeat this element to declare more mappings. If a request has more than one matching filter, they will be executed in the order of their declaration. URL pattern mappings will always be processed before servlet name mappings. Optional, more than one allowed.</div><div id="pp-d1104e401" class="tooltip">The name of the <span class="idf">&lt;filter&gt;</span> to map. Must match the <span class="idf">&lt;filter-name&gt;</span> declared there. Required.</div><div id="pp-d1104e409" class="tooltip">Up to four dispatchers for the filter. Describes what should be filtered. Possible: "REQUEST" (filter regular requests), "FORWARD" (filter forwards), "INCLUDE" (filter includes), "ERROR" (filter error pages). If omitted, default is "REQUEST" only. Optional, more than one allowed. </div><div id="pp-d1104e411" class="tooltip">Declares the class as event listener. Use this element for all servlet listener interfaces (e.g. there is no special element for <span class="idf">ServletContextListener</span>). Listeners will be invoked in the order of declaration. Optional, more than one allowed.</div><div id="pp-d1104e418" class="tooltip">The full class name of the listener implementation. Required.</div><div id="pp-d1104e420" class="tooltip">Declares a servlet, either in the form of a class implementing the <span class="idf">Servlet</span> interface or as a JSP page. The URL mapping must be declared in one or more <span class="idf">&lt;servlet-mapping&gt;</span> elements. Optional, more than one allowed.</div><div id="pp-d1104e431" class="tooltip">The name of the servlet. Must be unique in the descriptor, and will be referenced by <span class="idf">&lt;servlet-mapping&gt;</span> elements. Required.</div><div id="pp-d1104e436" class="tooltip">The name of the class that implements the <span class="idf">Servlet</span> interface. Required if <span class="idf">&lt;jsp-file&gt;</span> is not present.</div><div id="pp-d1104e449" class="tooltip">Declares initialization parameters for the servlet. The servlet can retrieve initialization parameters using <span class="idf">ServletConfig.getInitParameter</span>. Optional, more than one allowed.</div><div id="pp-d1104e460" class="tooltip">Declares a role name that the servlet can use when checking the user's permissions with <span class="idf">HttpServletRequest.isUserInRole</span>. Optional, more than one allowed.</div><div id="pp-d1104e465" class="tooltip">The name of the role to declare. This is the role that the servlet passes to <span class="idf">HttpServletRequest.isUserInRole</span>. Required.</div><div id="pp-d1104e470" class="tooltip">The name of role declared with a <span class="idf">&lt;security-role&gt;</span> that <span class="idf">&lt;security-role-ref&gt;</span>refers to. If not specified, the container will ask the deployer for a role. Optional.</div><div id="pp-d1104e478" class="tooltip">Defines the URL or a pattern for those URLs that the servlet responds to. Optional, more than one allowed.</div><div id="pp-d1104e481" class="tooltip">The name of the servlet that is mapped. Must correspond to a <span class="idf">&lt;servlet&gt;</span>/<span class="idf">&lt;servlet-name&gt;</span> element. Required.</div><div id="pp-d1104e493" class="tooltip">Defines the MIME type (content type) of a file extension, for use with static files that are contained in the WAR file. Optional, more than one allowed.</div><div id="pp-d1104e495" class="tooltip">The file extension, for example "html" or "jpg". Required.</div><div id="pp-d1104e497" class="tooltip">The content type, for example "text/html" or "image/jpeg". Required.</div><div id="pp-d1104e499" class="tooltip">An ordered list of file names to show for requests that go to a directory (possibly the root directory). The first file that exists will be shown. Optional.</div><div id="pp-d1104e501" class="tooltip">Specifies a single file name, e.g. "index.html" or "index.jsp". Required, more than one allowed.</div><div id="pp-d1104e503" class="tooltip">Defines the page to be shown in case of the specified error. Optional, more than one allowed.</div><div id="pp-d1104e505" class="tooltip">The code of the error (in HTTP error codes such as 404, 500..). Required if <span class="idf">&lt;exception-type&gt;</span> not present.</div><div id="pp-d1104e510" class="tooltip">The name of the exception that will cause the error page to be shown. May be a super-class of the actual exception. If several error pages match an exception, the closest match in the class hierarchy wins. Required if <span class="idf">&lt;error-code&gt;</span> not present.</div><div id="pp-d1104e579" class="tooltip">Allows restricting access access to a collection of resources. You can either restrict it to a group of users, or to forbid any access to the resource. Without any constraint, any user is allowed to access a resource. Optional, more than one allowed.</div><div id="pp-d1104e581" class="tooltip">Defines the resources (=pages and other elements) this <span class="idf">&lt;security-constraint&gt;</span> applies to. You can define several collections in a constraint. Required, more than one allowed.</div><div id="pp-d1104e586" class="tooltip">A name for the collection. You can put anything in here. Required.</div><div id="pp-d1104e588" class="tooltip">Specifies a URL pattern of resources to include. May be repeated to add additional resources. Required, more than one allowed.</div><div id="pp-d1104e590" class="tooltip">Specifies the HTTP methods ("GET", "POST", "PUT", "DELETE"...) that will be constrained. If no method is specified, the constraint applies to all methods. Optional, more than one allowed.</div><div id="pp-d1104e592" class="tooltip">Defines the roles that are allowed to access the resources. If omitted, no user is allowed to access the resources. Optional.</div><div id="pp-d1104e594" class="tooltip">The role that is allowed to access the collection. Must be one of the roles defined in the <span class="idf">&lt;security-role&gt;</span> element, or "*" to allow access to all users. Can be repeated to allow different roles. If omitted, no user has access. Optional, more than one allowed.</div><div id="pp-d1104e599" class="tooltip">Contains constraints for data sent to the client. Currently only the <span class="idf">&lt;transport-guarantee&gt;</span> can be set, which will essentially allow you to require SSL. Optional.</div><div id="pp-d1104e604" class="tooltip">Can be used to require certain standards for the transport. "NONE" means that any transport is allowed. "INTEGRAL" means that it must be transported in a way that tampering is not possible, and "CONFIDENTIAL" requires encryption. With HTTP, both "INTEGRAL" and "CONFIDENTIAL" both mean that the data must be send over SSL/TLS.</div><div id="pp-d1104e607" class="tooltip">Specifies how users login. Optional. </div><div id="pp-d1104e609" class="tooltip">Specifies the authentication method: "BASIC" (standard HTTP authentication, with the browser's dialog), "DIGEST" (like BASIC, more secure, but problems with older browsers), "FORM" (you specify a HTML login page) and CLIENT-CERT (SSL client authentication, secure but complicated). Optional.</div><div id="pp-d1104e611" class="tooltip">The "realm" to show the user for Basic Authentication. Optional.</div><div id="pp-d1104e613" class="tooltip">Configuration for the FORM <span class="idf">&lt;auth-method&gt;</span>. Optional.</div><div id="pp-d1104e618" class="tooltip">Path of the login page for FORM authentication, starting with "/" and relative to the web application / WAR root. The page must contain a POST form with action "j_security_check" and two fields "j_username" and "j_password". Required.</div><div id="pp-d1104e620" class="tooltip">Path to the error page for FORM authentication, starting with "/" and relative to the web application / WAR root. It will be shown when the authentication failed. Required.</div><div id="pp-d1104e622" class="tooltip">Specifies one security role which can be referred to by a <span class="idf">&lt;security-constraint&gt;</span> or <span class="idf">&lt;servlet&gt;</span>. All further configuration of the role, such as which users are in that role, must be done in the web container. Repeat to define several roles. Optional, more than one allowed.</div><div id="pp-d1104e630" class="tooltip">The name of the role to define. Must follow NMTOKEN rules (in short: only alphanumeric characters, '.', '-' and '_', <em>no spaces</em>). Referred to by <span class="idf">&lt;security-constraint&gt;</span> or <span class="idf">&lt;servlet&gt;</span>. You need to define the role in the web container as well. Required.</div><div id="pp-d1104e656" class="tooltip">Declares that the application requires an environment entry with the given name. Environment entries are used for configuration and must be provided by the deployer. The application can find the entry in the JNDI context, relative to <span class="idf">java:comp/env/</span>. Optional, more than one allowed.</div><div id="pp-d1104e661" class="tooltip">The name of the entry in the JNDI namespace, relative to <span class="idf">java:comp/env/</span>. This is the name the application uses to look up the entry. It is recommended for environment entries that their name starts with "param/". Required.</div><div id="pp-d1104e666" class="tooltip">The Java type of the entry as fully qualified class name. Supported are at least <span class="idf">java.lang.String</span>, <span class="idf">java.lang.Character</span>, <span class="idf">java.lang.Boolean</span>, <span class="idf">java.lang.Integer</span>, <span class="idf">java.lang.Long</span>, <span class="idf">java.lang.Float</span> or <span class="idf">java.lang.Double</span>. Required.</div><div id="pp-d1104e747" class="tooltip">Declares that the application needs a reference to some kind of <em>connection factory</em> that allows you to obtain connections. Typically this is used for JDBC <span class="idf">DataSource</span> (for database access), JMS <span class="idf">ConnectionFactory</span> (for messaging) or JavaMail <span class="idf">Session</span> objects. The reference will be put into the application's JNDI namespace. Optional, more than one allowed.</div><div id="pp-d1104e761" class="tooltip">The name under which the factory will be put into the application's JNDI environment, relative to <span class="idf">java:comp/env/</span>. Required.</div><div id="pp-d1104e766" class="tooltip">The fully-qualified class name of the connection factory. Required.</div><div id="pp-d1104e768" class="tooltip">Either <span class="idf">Container</span>, if the container is responsible for authentication, or <span class="idf">Application</span>, if the application will authenticate itself. Required.</div><div id="pp-d1104e144" class="topic"><div class="topicPara"><span class="topicHead">JSP</span><span class="topicAbbreviation"> - JavaServer Pages</span></div><div class="topicPara">JSPs are a template system for generating dynamic web pages. It is tightly integrated with
  		Java and allows mixing Java source code with markup code.</div><div class="topicPara"><span class="topicLinkHead">Homepage: </span><a href="http://java.sun.com/products/jsp/">JavaServer Pages Technology (Sun/Oracle)</a><br/><span class="topicLinkHead">Wikipedia: </span><a href="http://en.wikipedia.org/wiki/JavaServer_Pages">JavaServer Pages</a></div><div class="topicPara"><span class="topicLinkHead">Specification: </span><a href="http://jcp.org/aboutJava/communityprocess/mrel/jsr245/index.html">JSP 2.2</a><br/><span class="topicLinkHead">JSR: </span><a href="http://jcp.org/en/jsr/detail?id=53">JSR-53</a>, <a href="http://jcp.org/en/jsr/detail?id=152">JSR-152</a>, <a href="http://jcp.org/en/jsr/detail?id=245">JSR-245</a></div></div><div id="pp-d1104e184" class="topic"><div class="topicPara"><span class="topicHead">JAR</span><span class="topicAbbreviation"> - Java ARchive</span></div><div class="topicPara">JARs are ZIP files with a <span class="idf">.jar</span> extension and a special directory structure. Java uses them to store Java 
  		applications and libraries.</div><div class="topicPara"><span class="topicLinkHead">Jarfiller Guide: </span><a href="/javabasics/jar/">Java Basics: JAR Files</a></div><div class="topicPara"><span class="topicLinkHead">Wikipedia: </span><a href="http://en.wikipedia.org/wiki/JAR_(file_format)">JAR (file format)</a></div><div class="topicPara"><span class="topicLinkHead">Specification: </span><a href="http://java.sun.com/j2se/1.5.0/docs/guide/jar/jar.html">JAR Specification</a></div></div><div id="pp-d1104e217" class="topic"><div class="topicPara"><span class="topicHead">JSF</span><span class="topicAbbreviation"> - JavaServer Faces</span></div><div class="topicPara">JSF is a MVC-based framework for web applications which runs on top of a display technologies such as Facelets (default
  		for JSF 2.0) and JSPs(default for 1.x).</div><div class="topicPara"><span class="topicLinkHead">Homepage: </span><a href="http://java.sun.com/javaee/javaserverfaces/">JavaServer Faces Homepage (Sun/Oracle)</a><br/><span class="topicLinkHead">Wikipedia: </span><a href="http://en.wikipedia.org/wiki/JavaServer_Faces">JavaServer Faces</a></div><div class="topicPara"><span class="topicLinkHead">Specification: </span><a href="http://jcp.org/aboutJava/communityprocess/final/jsr314/index.html">JSF 2.0 Specification</a><br/><span class="topicLinkHead">JSR: </span><a href="http://jcp.org/en/jsr/detail?id=127">JSR-127</a>, <a href="http://jcp.org/en/jsr/detail?id=252">JSR-252</a>, <a href="http://jcp.org/en/jsr/detail?id=314">JSR-314</a></div></div><div id="pp-d1104e257" class="topic"><div class="topicPara"><span class="topicHead">Spring</span></div><div class="topicPara">Spring is a popular application framework for Java. It is not part of Java EE, but usually considered an alternative to using the full JEE stack.</div><div class="topicPara"><span class="topicLinkHead">Homepage: </span><a href="http://www.springsource.org/">Spring Source</a><br/><span class="topicLinkHead">Wikipedia: </span><a href="http://en.wikipedia.org/wiki/Spring_Framework">Spring Framework</a></div><div class="topicPara"><span class="topicLinkHead">API: </span><a href="http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/">Reference</a>, <a href="http://static.springsource.org/spring/docs/3.0.x/javadoc-api/">API</a></div></div><div id="ttCloseBar" class="closeBar"><a href="#" onclick="return tlClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div><div id="topicCloseBar" class="closeBar"><a href="#" onclick="return tpcClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div></div></body></html>