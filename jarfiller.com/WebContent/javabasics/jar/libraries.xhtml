<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/1999/xhtml" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:page="http://tjansen.de/refPage" xmlns:i="http://tjansen.de/internal"><head><title>How to Add Libraries to a JAR - Java Basics: JAR Files</title><meta http-equiv="X-UA-Compatible" content="chrome=1"/><meta http-equiv="content-language" content="en"/><link rel="shortcut icon" href="../../images/favicon.png" type="image/png"/><link rel="stylesheet" type="text/css" href="../../style/style.css"/><script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-6791190-2']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
})();
</script><script type="text/javascript" src="../../js/all.js"/></head><body id="body"><div id="visibleContent"><div id="top"><a href="/"><img src="../../images/titlebar.png" alt="Jarfiller.com"/></a></div><div id="main"><div id="bodycolumn"><div class="yahbar"><div class="yahprev"><a href="viewextract.xhtml">Prev</a></div><h3 class="yahhere"><a href="#" onclick="return navToggle();">Java Basics: JAR Files / How to...</a></h3><div class="yahnext"><a href="selfsigning.xhtml">Next</a></div></div><h1 id="sec_howto" class="multipageTitle">How to Add Libraries to a JAR</h1><div class="subSecRow1" id="sec_libraries"><div class="subSecHead" id="sechd_libraries"><a name="libraries">Libraries</a></div><div class="subSecContent" id="seccnt_libraries"><p class="subSecExplanation">Most JARs, no matter whether they contain an executable program or a library, require other libraries to run. Those dependencies are usually contained in JARs as well. So how can you make sure that your JAR has all required JARs in its <a href="#" id="tl-d37368e1314" class="dottedTooltip" onclick="return tlClick('tl-d37368e1314','pp-d37368e1317');" onmouseover="return tlOver('tl-d37368e1314','pp-d37368e1317');" onmouseout="return tlOut('tl-d37368e1314','pp-d37368e1317');">CLASSPATH</a>? There are three common solutions for executable JARs. </p><h4 class="subSecMiniHeadline">Solution 1: Using the Class-Path Attribute</h4><p class="subSecExplanation"> The <span class="idf">Class-Path</span> attribute of the manifest file allows you to state a list of JARs that the Java runtime should put into its classpath. So basically <em>your program consists of several JARs</em>, one executable for the program itself and one JAR for each library.<br/> This example shows a manifest file with several dependencies: </p><pre class="subSecConfig"><a href="#" id="tl-d37368e1336" class="tooltip" onclick="return tlClick('tl-d37368e1336','pp-d37368e288');" onmouseover="return tlOver('tl-d37368e1336','pp-d37368e288');" onmouseout="return tlOut('tl-d37368e1336','pp-d37368e288');">Manifest-Version</a>: 1.0
<a href="#" id="tl-d37368e1339" class="tooltip" onclick="return tlClick('tl-d37368e1339','pp-d37368e297');" onmouseover="return tlOver('tl-d37368e1339','pp-d37368e297');" onmouseout="return tlOut('tl-d37368e1339','pp-d37368e297');">Main-Class</a>: com.jarfiller.example.MainClass
<a href="#" id="tl-d37368e1342" class="tooltip" onclick="return tlClick('tl-d37368e1342','pp-d37368e329');" onmouseover="return tlOver('tl-d37368e1342','pp-d37368e329');" onmouseout="return tlOut('tl-d37368e1342','pp-d37368e329');">Class-Path</a>: log4j.jar mail.jar
</pre><p class="subSecExplanation"> Note that your IDE may be able to create such a manifest and package your libraries automatically. For example, <a href="http://www.eclipse.org">Eclipse</a> can do this since version 3.5 (export your project as 'Runnable JAR file' and select the appropriate option). </p><h4 class="subSecMiniHeadline">Solution 2: Unpack Library JARs into a Single JAR</h4><p class="subSecExplanation">A nifty solution to the problem is to <em>unpack all JARs</em> you depend on <em>and put them all into a single JAR</em>. This <em>works most of the time</em>, but with some JARs, such as <a href="#" id="tl-d37368e1367" class="dottedTooltip" onclick="return tlClick('tl-d37368e1367','pp-d37368e1370');" onmouseover="return tlOver('tl-d37368e1367','pp-d37368e1370');" onmouseout="return tlOut('tl-d37368e1367','pp-d37368e1370');">Service Providers</a>, it won't (<a href="#" id="tl-d37368e1373" class="dottedTooltip" onclick="return tlClick('tl-d37368e1373','pp-d37368e1373');" onmouseover="return tlOver('tl-d37368e1373','pp-d37368e1373');" onmouseout="return tlOut('tl-d37368e1373','pp-d37368e1373');">more</a>). </p><p class="subSecExplanation">There are several tools that allow you to do this to various extends (e.g. they may not merge the manifests of the JARs correctly). Recent <a href="http://www.eclipse.org">Eclipse</a> versions can repack executable JARs. Just export the project into a 'Runnable JAR file' and select the right option.<br/> <a href="http://ant.apache.org">Ant</a> also allows you to unpack JARs into a single JAR using the <span class="idf">jar</span> task.</p><h4 class="subSecMiniHeadline">Solution 3: Call <span class="idf">java</span> with all JARs in the CLASSPATH</h4><p class="subSecExplanation">Another common solution is to write a script or batch file that puts all JARs into the classpath and then starts the application. This also allows you to add other arguments to the Java runtime (such as an increased heap) and state the main class (so you don't need a special manifest). Then you start the application like this:</p><pre class="subSecConsole">C:\Users\tim\tmp&gt;java <a href="#" id="tl-d37368e1402" class="dottedTooltip" onclick="return tlClick('tl-d37368e1402','pp-d37368e1406');" onmouseover="return tlOver('tl-d37368e1402','pp-d37368e1406');" onmouseout="return tlOut('tl-d37368e1402','pp-d37368e1406');">-cp jarfiller-example.jar;log4j.jar;mail.jar</a> <a href="#" id="tl-d37368e1412" class="dottedTooltip" onclick="return tlClick('tl-d37368e1412','pp-d37368e1416');" onmouseover="return tlOver('tl-d37368e1412','pp-d37368e1416');" onmouseout="return tlOut('tl-d37368e1412','pp-d37368e1416');">com.jarfiller.example.MainClass</a>
<br/></pre><h4 class="subSecMiniHeadline">Dependencies for Library</h4><p class="subSecExplanation">Most libraries also depend on other libraries. Theoretically you could apply Solution 1 or Solution 2 to a library. This would be rather unusual though. Common practice is to <em>state your dependencies somewhere in the documentation</em> (or just have a directory containing dependencies) and let the library's user take care of putting them into the classpath. <em>Do not apply the solutions above to libraries</em>.<br/> The main reason is that the you (or, rather, the library's user) needs to be sure to have every library only once in the classpath. With Solution 1, two JARs could depend on the same library, but use different names for it, and you end up with including the library twice. With Solution 2, several JARs could contain the same library. Both solutions get especially messy when different versions of the same library are involved. </p></div></div><div class="yahbar"><div class="yahprev"><a href="viewextract.xhtml">Prev<br/><span>How to View and Extract a JAR</span></a></div><div class="yahhere"><a href="#" onclick="return navToggle();">Java Basics: JAR Files / How to...</a><br/><a href="/javabasics/jar/"><span>Single Page Mode</span></a>, <a href="#" onclick="return navToggle();"><span>Show Table of Content</span></a></div><div class="yahnext"><a href="selfsigning.xhtml">Next<br/><span>How to Create a (Self-)Signed Jar</span></a></div></div></div><div id="sidecolumn">
  	  	<div><h3>Useful Links</h3><div class="sidecolumnSubTitleLine"/>
  			<a href="http://java.sun.com/javase/6/docs/technotes/guides/jar/index.html">Java Documentation</a><br/>
  			<a href="http://java.sun.com/javase/6/docs/technotes/guides/jar/jar.html">JAR File Specification</a><br/>
  			<a href="http://en.wikipedia.org/wiki/JAR_(file_format)">JAR on Wikipedia</a><br/>
  		</div>
  </div></div></div><div id="footer"><div id="footer-content"><div id="footer-left"><div class="footerLine"><a href="/">Home</a> - <a href="/about">About Jarfiller</a> - <a href="/imprint.xhtml">Imprint</a></div><div class="footerLine">Please send feedback and corrections to <a href="mailto:tim@tjansen.de">tim@<span style="display: none">got you</span>tjansen.de</a>.</div><div class="footerLine"><a href="http://www.twitter.com/timjansen">Follow</a> me on Twitter.</div><div class="copyrightLine">Â© 2010 Tim Jansen; content licensed under <a href="http://creativecommons.org/licenses/by/3.0/us/">cc-by</a>; example source code is public domain
				</div></div><div id="footer-right"><a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/"><img alt="Creative Commons License" style="border-width:0" src="../../images/ext/cc-by-88x31.png"/></a></div></div></div><div id="navbar" onclick="return navToggle();" onmouseover="document.getElementById('navbar').className='mouseover';" onmouseout="document.getElementById('navbar').className='';"/><div id="navcontainer"><div id="navlinks"><div id="navclosebar"><a href="#" onclick="return navClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div><div id="navpositionbar" class="navpositionbar"/><h2 id="navtitle">Java Basics: JAR Files</h2><a id="nav_overview" class="navseclink" href="overview.xhtml#overview">Overview</a><a id="nav_intro" class="navsublink" href="overview.xhtml#intro">Intro</a><a id="nav_usecases" class="navsublink" href="overview.xhtml#usecases">When to use JARs</a><a id="nav_requirements" class="navsublink" href="overview.xhtml#requirements">Requirements</a><a id="nav_creatingjars" class="navseclink" href="creatingjars.xhtml#creatingjars">Creating JARs</a><a id="nav_structure" class="navsublink" href="creatingjars.xhtml#structure">Structure</a><a id="nav_manifest" class="navsublink" href="creatingjars.xhtml#manifest">Manifest</a><a id="nav_jartool" class="navsublink" href="creatingjars.xhtml#jartool">jar tool</a><span class="navseclink">How to...</span><a id="nav_executables" class="navsublink" href="executables.xhtml#executables">How to Start an Executable JAR</a><a id="nav_viewextract" class="navsublink" href="viewextract.xhtml#viewextract">How to View and Extract a JAR</a><a id="nav_libraries" class="navsublink" href="libraries.xhtml#libraries">How to Add Libraries to a JAR</a><a id="nav_selfsigning" class="navsublink" href="selfsigning.xhtml#selfsigning">How to Create a (Self-)Signed Jar</a><a id="nav_certification" class="navsublink" href="certification.xhtml#certification">How to Sign a Jar with a Valid Certificate</a><a id="nav_perentry" class="navsublink" href="perentry.xhtml#perentry">How to Specify Attributes For Single Packages (Per-Entry Attributes)</a><a id="nav_sealing" class="navsublink" href="sealing.xhtml#sealing">How to Seal Packages in a JAR</a><a id="nav_jarmetadata" class="navsublink" href="jarmetadata.xhtml#jarmetadata">How to Get Package Versioning Information</a><a id="nav_eclipse" class="navsublink" href="eclipse.xhtml#eclipse">How to Create JARs with Eclipse</a><a id="nav_ant" class="navsublink" href="ant.xhtml#ant">How to Create JARs with Ant</a></div></div><div id="popups"><div id="pp-d37368e1373" class="tooltip">In other words, you extract all your libraries' JARs into a single directory, then copy your program into that directory and create a new JAR with the directory's content. However, this will overwrite any manifest files your libraries may have. It may be possible to solve the problems by merging manifests manually, but it won't always work.</div><div id="pp-d37368e1317" class="tooltip">The classpath is a list of all JARs and directories containing code or other resources for the currently running program.</div><div id="pp-d37368e1370" class="tooltip">In Java, Service Providers are exchangeable implementations for APIs that ship in JARs. They are needed, for example, for alternative XML implementations or to connect to application servers via JNDI. This is a rather complicated topic and out of scope for this tutorial.</div><div id="pp-d37368e1406" class="tooltip">The <span class="idf">-cp</span> option allows you to specify the program's classpath as semi-colon separated paths to JARs or directories.</div><div id="pp-d37368e1416" class="tooltip">This argument is the main class to start, so you don't need to specify it in the JAR file.</div><div id="pp-d37368e288" class="tooltip">Every <span class="idf">MANIFEST.MF</span> file is required to start with the <span class="idf">Manifest-Version</span>. It describes the file format version of the file. Currently it is always "1.0".</div><div id="pp-d37368e297" class="tooltip"><span class="idf">Main-Class</span> specifies the name of the main class. A JAR file is only executable if it has this attribute.</div><div id="pp-d37368e329" class="tooltip"><span class="idf">Class-Path</span> is a space-separated list of relative paths to additional JAR files and directories. They will be automatically put into the class path. Directories must end with a slash ('/'). A typical application is for executable JARs that need additional libraries to put them into the <span class="idf">Class-Path</span>.</div><div id="ttCloseBar" class="closeBar"><a href="#" onclick="return tlClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div><div id="topicCloseBar" class="closeBar"><a href="#" onclick="return tpcClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div></div></body></html>