<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/1999/xhtml" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:page="http://tjansen.de/refPage" xmlns:i="http://tjansen.de/internal"><head><title>Using Regular Expressions - Java Basics: Regular Expressions</title><meta http-equiv="X-UA-Compatible" content="chrome=1"/><meta http-equiv="content-language" content="en"/><link rel="shortcut icon" href="../../images/favicon.png" type="image/png"/><link rel="stylesheet" type="text/css" href="../../style/style.css"/><script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-6791190-2']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
})();
</script><script type="text/javascript" src="../../js/all.js"/></head><body id="body"><div id="visibleContent"><div id="top"><a href="/"><img src="../../images/titlebar.png" alt="Jarfiller.com"/></a></div><div id="main"><div id="bodycolumn"><div class="yahbar"><div class="yahprev"><a href="regularexpressions.xhtml">Prev</a></div><h3 class="yahhere"><a href="#" onclick="return navToggle();">Java Basics: Regular Expressions / Using Regular Expressions</a></h3><div class="yahnext"><a href="advanced.xhtml">Next</a></div></div><h1 id="sec_using" class="multipageTitle"><a name="using">Using Regular Expressions</a></h1><div class="subSecRow2" id="sec_simplematching"><div class="subSecHead" id="sechd_simplematching"><a name="simplematching">Simple Matching</a><br/>(<a href="#" id="tl-d39088e1117" class="dottedTooltip" onclick="return tlClick('tl-d39088e1117','pp-d39088e1122');" onmouseover="return tlOver('tl-d39088e1117','pp-d39088e1122');" onmouseout="return tlOut('tl-d39088e1117','pp-d39088e1122');">more</a>)
		</div><div class="subSecContent" id="seccnt_simplematching"><pre class="subSecCode"><code>String a = "I love Java";
assert a.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#matches(java.lang.String)" class="javadoc"><em>matches</em></a>("I love Java");  <span class="cmt">// match whole string</span>
assert a.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#matches(java.lang.String)" class="javadoc">matches</a>("<em>.*love.*</em>");     <span class="cmt">// contains 'love'? (<a href="#" id="tl-d39088e1155" class="dottedTooltip" onclick="return tlClick('tl-d39088e1155','pp-d39088e1155');" onmouseover="return tlOver('tl-d39088e1155','pp-d39088e1155');" onmouseout="return tlOut('tl-d39088e1155','pp-d39088e1155');">more</a>)</span>

<span class="cmt">// Escaping a search string (<a href="#" id="tl-d39088e1163" class="dottedTooltip" onclick="return tlClick('tl-d39088e1163','pp-d39088e1163');" onmouseover="return tlOver('tl-d39088e1163','pp-d39088e1163');" onmouseout="return tlOut('tl-d39088e1163','pp-d39088e1163');">more</a>)</span>
String anyString = <span class="abstract">...</span>;           <span class="cmt">// works with any string</span>
boolean containsString = a.matches(".*" + <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html" class="javadoc">Matcher</a>.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#quoteReplacement(java.lang.String)" class="javadoc"><em>quoteReplacement</em></a>(anyString) + ".*");
</code></pre></div></div><div class="subSecRow1" id="sec_finding"><div class="subSecHead" id="sechd_finding"><a name="finding">Finding and Parsing</a><br/>(<a href="#" id="tl-d39088e1190" class="dottedTooltip" onclick="return tlClick('tl-d39088e1190','pp-d39088e1195');" onmouseover="return tlOver('tl-d39088e1190','pp-d39088e1195');" onmouseout="return tlOut('tl-d39088e1190','pp-d39088e1195');">more</a>)
		</div><div class="subSecContent" id="seccnt_finding"><pre class="subSecCode"><code><span class="cmt">// Find all numbers in a string:</span>
String a = "6 times 7 is 42";
<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc"><em>Pattern</em></a> pattern = <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a>.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#compile(java.lang.String)" class="javadoc"><em>compile</em></a>("[0-9]+");             <span class="cmt">// compile pattern (<a href="#" id="tl-d39088e1227" class="dottedTooltip" onclick="return tlClick('tl-d39088e1227','pp-d39088e1227');" onmouseover="return tlOver('tl-d39088e1227','pp-d39088e1227');" onmouseout="return tlOut('tl-d39088e1227','pp-d39088e1227');">more</a>)</span>
<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html" class="javadoc"><em>Matcher</em></a> m = pattern.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#matcher(java.lang.CharSequence)" class="javadoc"><em>matcher</em></a>(a);                          <span class="cmt">// create <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html" class="javadoc">Matcher</a> (<a href="#" id="tl-d39088e1249" class="dottedTooltip" onclick="return tlClick('tl-d39088e1249','pp-d39088e1249');" onmouseover="return tlOver('tl-d39088e1249','pp-d39088e1249');" onmouseout="return tlOut('tl-d39088e1249','pp-d39088e1249');">more</a>)</span>
while (m.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#find()" class="javadoc"><em>find</em></a>()) {                                       <span class="cmt">// loop through all matches (<a href="#" id="tl-d39088e1266" class="dottedTooltip" onclick="return tlClick('tl-d39088e1266','pp-d39088e1266');" onmouseover="return tlOver('tl-d39088e1266','pp-d39088e1266');" onmouseout="return tlOut('tl-d39088e1266','pp-d39088e1266');">more</a>)</span>
    System.out.println(m.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#group()" class="javadoc"><em>group</em></a>() +                       <span class="cmt">// print the match/number</span>
                 " at "+ m.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#start()" class="javadoc"><em>start</em></a>() + " - " + m.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#end()" class="javadoc"><em>end</em></a>())    <span class="cmt">// print position (<a href="#" id="tl-d39088e1303" class="dottedTooltip" onclick="return tlClick('tl-d39088e1303','pp-d39088e1303');" onmouseover="return tlOver('tl-d39088e1303','pp-d39088e1303');" onmouseout="return tlOut('tl-d39088e1303','pp-d39088e1303');">more</a>)</span>
}

<span class="cmt">// Parse an email address:</span>
String b = "tom@example.org";
<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a> emailPtrn = <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a>.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#compile(java.lang.String)" class="javadoc">compile</a>("<em>([^@]+)</em>@<em>([^@]+)</em>");  <span class="cmt">// Pattern with capturing groups (<a href="#" id="tl-d39088e1343" class="dottedTooltip" onclick="return tlClick('tl-d39088e1343','pp-d39088e1343');" onmouseover="return tlOver('tl-d39088e1343','pp-d39088e1343');" onmouseout="return tlOut('tl-d39088e1343','pp-d39088e1343');">more</a>)</span>
<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html" class="javadoc">Matcher</a> em = emailPtrn.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#matcher(java.lang.CharSequence)" class="javadoc">matcher</a>(b)
if (em.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#matches(java.lang.String)" class="javadoc"><em>matches</em></a>(b));                                      <span class="cmt">// match whole string (<a href="#" id="tl-d39088e1373" class="dottedTooltip" onclick="return tlClick('tl-d39088e1373','pp-d39088e1373');" onmouseover="return tlOver('tl-d39088e1373','pp-d39088e1373');" onmouseout="return tlOut('tl-d39088e1373','pp-d39088e1373');">more</a>)</span>
    System.out.println("Name=" + em.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#group(int)" class="javadoc"><em>group</em></a>(1) + " Host=" + em.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#group(int)" class="javadoc"><em>group</em></a>(2));
</code></pre></div></div><div class="subSecRow2" id="sec_replacing"><div class="subSecHead" id="sechd_replacing"><a name="replacing">Simple Replacing</a><br/>(<a href="#" id="tl-d39088e1401" class="dottedTooltip" onclick="return tlClick('tl-d39088e1401','pp-d39088e1406');" onmouseover="return tlOver('tl-d39088e1401','pp-d39088e1406');" onmouseout="return tlOut('tl-d39088e1401','pp-d39088e1406');">more</a>)
		</div><div class="subSecContent" id="seccnt_replacing"><pre class="subSecCode"><code>String a = "r2d2";
assert a.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#replaceAll(java.lang.String, java.lang.String)" class="javadoc"><em>replaceAll</em></a>("[a-z]", "00").equals("002002");
assert a.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#replaceFirst(java.lang.String, java.lang.String)" class="javadoc"><em>replaceFirst</em></a>("[a-z]", "00").equals("002<em>d</em>2");

<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc"><em>Pattern</em></a> p = <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a>.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#compile(java.lang.String)" class="javadoc"><em>compile</em></a>("[a-z]");  <span class="cmt">// with pre-compiled Pattern (<a href="#" id="tl-d39088e1459" class="dottedTooltip" onclick="return tlClick('tl-d39088e1459','pp-d39088e1459');" onmouseover="return tlOver('tl-d39088e1459','pp-d39088e1459');" onmouseout="return tlOut('tl-d39088e1459','pp-d39088e1459');">more</a>)</span>
<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html" class="javadoc">Matcher</a> m = p.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#matcher(java.lang.CharSequence)" class="javadoc"><em>matcher</em></a>(a);
assert m.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#replaceAll(java.lang.String)" class="javadoc"><em>replaceAll</em></a>("00").equals("002002");
assert m.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#replaceFirst(java.lang.String)" class="javadoc"><em>replaceFirst</em></a>("00").equals("002<em>d</em>2");
</code></pre></div></div><div class="subSecRow1" id="sec_complrexreplacing"><div class="subSecHead" id="sechd_complrexreplacing"><a name="complrexreplacing">Complex Replacements</a><br/>(<a href="#" id="tl-d39088e1506" class="dottedTooltip" onclick="return tlClick('tl-d39088e1506','pp-d39088e1511');" onmouseover="return tlOver('tl-d39088e1506','pp-d39088e1511');" onmouseout="return tlOut('tl-d39088e1506','pp-d39088e1511');">more</a>)
		</div><div class="subSecContent" id="seccnt_complrexreplacing"><pre class="subSecCode"><code><span class="cmt">// Replace all dates in format yyyy-mm-dd with ddmmyyyy in the string:</span>
String a = "2009/12/24, 2009/12/31, 2010/01/01";
<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a> p = <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a>.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#compile(java.lang.String)" class="javadoc">compile</a>("(\\d{4})-(\\d{2})-(\\d{2})");
<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html" class="javadoc">Matcher</a> m = p.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#matcher(java.lang.CharSequence)" class="javadoc">matcher</a>(a);
<a href="http://java.sun.com/javase/6/docs/api/java/util/StringBuffer.html" class="javadoc">StringBuffer</a> result = new <a href="http://java.sun.com/javase/6/docs/api/java/util/StringBuffer.html" class="javadoc">StringBuffer</a>();
while (m.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#find()" class="javadoc"><em>find</em></a>())                                                    <span class="cmt">// loop through all results</span>
    m.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#appendReplacement(java.lang.StringBuffer, java.lang.String)" class="javadoc"><em>appendReplacement</em></a>(result, m.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#group(int)" class="javadoc">group</a>(3)+m.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#group(int)" class="javadoc">group</a>(2)+m.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#group(int)" class="javadoc">group</a>(3));  <span class="cmt">// add replacement (<a href="#" id="tl-d39088e1589" class="dottedTooltip" onclick="return tlClick('tl-d39088e1589','pp-d39088e1589');" onmouseover="return tlOver('tl-d39088e1589','pp-d39088e1589');" onmouseout="return tlOut('tl-d39088e1589','pp-d39088e1589');">more</a>)</span>
m.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#appendTail(java.lang.StringBuffer)" class="javadoc"><em>appendTail</em></a>(result);                                               <span class="cmt">// important! (<a href="#" id="tl-d39088e1609" class="dottedTooltip" onclick="return tlClick('tl-d39088e1609','pp-d39088e1609');" onmouseover="return tlOver('tl-d39088e1609','pp-d39088e1609');" onmouseout="return tlOut('tl-d39088e1609','pp-d39088e1609');">more</a>)</span>
System.out.println(result.toString());
</code></pre></div></div><div class="subSecRow2" id="sec_splitting"><div class="subSecHead" id="sechd_splitting"><a name="splitting">Splitting</a><br/>(<a href="#" id="tl-d39088e1621" class="dottedTooltip" onclick="return tlClick('tl-d39088e1621','pp-d39088e1626');" onmouseover="return tlOver('tl-d39088e1621','pp-d39088e1626');" onmouseout="return tlOut('tl-d39088e1621','pp-d39088e1626');">more</a>)
		</div><div class="subSecContent" id="seccnt_splitting"><pre class="subSecCode"><code>String a = "42, 17, 24, 5, 175";
String[] r = a.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#split(java.lang.String)" class="javadoc"><em>split</em></a>("[ ,]+");                   <span class="cmt">// comma and space split (<a href="#" id="tl-d39088e1642" class="dottedTooltip" onclick="return tlClick('tl-d39088e1642','pp-d39088e1642');" onmouseover="return tlOver('tl-d39088e1642','pp-d39088e1642');" onmouseout="return tlOut('tl-d39088e1642','pp-d39088e1642');">more</a>)</span>
assert r.length == 5;                            <span class="cmt">// split into 5 substrings</span>
assert r[0].equals("42") &amp;&amp; r[1].equals("17");   <span class="cmt">// ...</span>

String b = "-3--2";
String[] r2 = b.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#split(java.lang.String)" class="javadoc"><em>split</em></a>("-");
assert r2.length == <em>4</em>;
assert <em>r2[0].equals("")</em> &amp;&amp; <em>r2[2].equals("")</em>;     <span class="cmt">// substrings may be empty</span>

String[] r3 = a.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#split(java.lang.String, int)" class="javadoc">split</a>("[ ,]+", <em>3</em>);               <span class="cmt">// limit to 3 (<a href="#" id="tl-d39088e1700" class="dottedTooltip" onclick="return tlClick('tl-d39088e1700','pp-d39088e1700');" onmouseover="return tlOver('tl-d39088e1700','pp-d39088e1700');" onmouseout="return tlOut('tl-d39088e1700','pp-d39088e1700');">more</a>)</span>
assert r3.length == <em>3</em>;                           <span class="cmt">// limited array size</span>
assert r3[2].equals(<em>"24, 5, 175"</em>);               <span class="cmt">// contains remaining text</span>

String c = "1, 2,, 3,,,";
String[] r4 = a.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#split(java.lang.String, int)" class="javadoc">split</a>("[ ,]+", <em>0</em>);               <span class="cmt">// remove empty strings at the end (<a href="#" id="tl-d39088e1735" class="dottedTooltip" onclick="return tlClick('tl-d39088e1735','pp-d39088e1735');" onmouseover="return tlOver('tl-d39088e1735','pp-d39088e1735');" onmouseout="return tlOut('tl-d39088e1735','pp-d39088e1735');">more</a>)</span>
assert r4.length == <em>4</em>;                           <span class="cmt">// empty strings at the end removed</span>
assert r4[2].equals(<em>""</em>);                         <span class="cmt">// other empty strings remain</span>

<span class="cmt">// <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a> has exact equivalents of <span class="idf">String</span>'s <span class="idf">split</span> methods:</span>
<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a> p = <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a>.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#compile(java.lang.String)" class="javadoc">compile</a>(("[ ,]+");
assert p.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#split(java.lang.CharSequence)" class="javadoc"><em>split</em></a>(a).length == 5;
assert p.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#split(java.lang.CharSequence, int)" class="javadoc"><em>split</em></a>(a, 3).length == 3;                <span class="cmt">// with limit</span>
</code></pre></div></div><div class="subSecRow1" id="sec_patternflags"><div class="subSecHead" id="sechd_patternflags"><a name="patternflags">Pattern Flags</a><br/>(<a href="#" id="tl-d39088e1801" class="dottedTooltip" onclick="return tlClick('tl-d39088e1801','pp-d39088e1806');" onmouseover="return tlOver('tl-d39088e1801','pp-d39088e1806');" onmouseout="return tlOut('tl-d39088e1801','pp-d39088e1806');">more</a>)
		</div><div class="subSecContent" id="seccnt_patternflags"><pre class="subSecCode"><code><span class="cmt">// Case-insensitive matching:</span>
String a = "I lOvE jAvA";
<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a> p = <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a>.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#compile(java.lang.String, int)" class="javadoc">compile</a>(".*love.*", <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a>.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#CASE_INSENSITIVE" class="javadoc"><em>CASE_INSENSITIVE</em></a>);  <span class="cmt">// <strong class="warn">ASCII only!</strong> (<a href="#" id="tl-d39088e1851" class="dottedTooltip" onclick="return tlClick('tl-d39088e1851','pp-d39088e1851');" onmouseover="return tlOver('tl-d39088e1851','pp-d39088e1851');" onmouseout="return tlOut('tl-d39088e1851','pp-d39088e1851');">more</a>)</span>
assert p.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#matcher(java.lang.CharSequence)" class="javadoc">matcher</a>(a).<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#matches()" class="javadoc">matches</a>();

<span class="cmt">// </span>Find all lines containing numbers:
String b = "23\naSd\n5\nLOVE\n\NYE\n3\n";
<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a> p2 = <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a>.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#compile(java.lang.String, int)" class="javadoc">compile</a>("^\\d+$", <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a>.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#MULTILINE" class="javadoc"><em>MULTILINE</em></a>);          <span class="cmt">// multiline (<a href="#" id="tl-d39088e1898" class="dottedTooltip" onclick="return tlClick('tl-d39088e1898','pp-d39088e1898');" onmouseover="return tlOver('tl-d39088e1898','pp-d39088e1898');" onmouseout="return tlOut('tl-d39088e1898','pp-d39088e1898');">more</a>)</span>
<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html" class="javadoc">Matcher</a> m2 = p2.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#matcher(java.lang.CharSequence)" class="javadoc">matcher</a>(b);
while (m2.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#find()" class="javadoc">find</a>()) 
    System.out.println(m2.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#group()" class="javadoc">group</a>());                                 <span class="cmt">// print numbers 23, 5 and 3</span>

<span class="cmt">// Patterns that may span several lines:</span>
String c = "a\n\b\nc";
<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a> p3 = <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a>.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#compile(java.lang.String, int)" class="javadoc">compile</a>("a.*b.*c", <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a>.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#DOTALL" class="javadoc"><em>DOTALL</em></a>);            <span class="cmt">// "." matches newlines (<a href="#" id="tl-d39088e1958" class="dottedTooltip" onclick="return tlClick('tl-d39088e1958','pp-d39088e1958');" onmouseover="return tlOver('tl-d39088e1958','pp-d39088e1958');" onmouseout="return tlOut('tl-d39088e1958','pp-d39088e1958');">more</a>)</span>
assert p3.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#matcher(java.lang.CharSequence)" class="javadoc">matcher</a>(c).<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#matches()" class="javadoc">matches</a>();
assert <em>!</em>c.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#matches(java.lang.String)" class="javadoc">matches</a>("a.*b.*c");                                       <span class="cmt">// no match without <span class="idf">DOTALL</span></span>

<span class="cmt">// Multiple flags:</span>
<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a> p4 = <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a>.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#compile(java.lang.String, int)" class="javadoc">compile</a>(".*love.*", 
          <em><a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a>.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#CASE_INSENSITIVE" class="javadoc">CASE_INSENSITIVE</a> <em>|</em> <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#DOTALL" class="javadoc">DOTALL</a></em>);                       <span class="cmt">// combining flags (<a href="#" id="tl-d39088e2024" class="dottedTooltip" onclick="return tlClick('tl-d39088e2024','pp-d39088e2024');" onmouseover="return tlOver('tl-d39088e2024','pp-d39088e2024');" onmouseout="return tlOut('tl-d39088e2024','pp-d39088e2024');">more</a>)</span>
assert p4.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#matcher(java.lang.CharSequence)" class="javadoc">matcher</a>(b).<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#matches()" class="javadoc">matches</a>();
</code></pre></div></div><div class="yahbar"><div class="yahprev"><a href="regularexpressions.xhtml">Prev<br/><span>Regular Expressions</span></a></div><div class="yahhere"><a href="#" onclick="return navToggle();">Java Basics: Regular Expressions / Using Regular Expressions</a><br/><a href="/javabasics/regexp/"><span>Single Page Mode</span></a>, <a href="#" onclick="return navToggle();"><span>Show Table of Content</span></a></div><div class="yahnext"><a href="advanced.xhtml">Next<br/><span>Advanced Regular Expressions</span></a></div></div></div><div id="sidecolumn">
  	  	<div><h3>Useful Links</h3><div class="sidecolumnSubTitleLine"/>
  			<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#sum">Regular expression summary (Java Documentation)</a><br/>
  			<a href="http://en.wikipedia.org/wiki/Regular_expression">Regular expressions on Wikipedia</a><br/>
  		</div>
  </div></div></div><div id="footer"><div id="footer-content"><div id="footer-left"><div class="footerLine"><a href="/">Home</a> - <a href="/about">About Jarfiller</a> - <a href="/imprint.xhtml">Imprint</a></div><div class="footerLine">Please send feedback and corrections to <a href="mailto:tim@tjansen.de">tim@<span style="display: none">got you</span>tjansen.de</a>.</div><div class="footerLine"><a href="http://www.twitter.com/timjansen">Follow</a> me on Twitter.</div><div class="copyrightLine">© 2010 Tim Jansen; content licensed under <a href="http://creativecommons.org/licenses/by/3.0/us/">cc-by</a>; example source code is public domain
				</div></div><div id="footer-right"><a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/"><img alt="Creative Commons License" style="border-width:0" src="../../images/ext/cc-by-88x31.png"/></a></div></div></div><div id="navbar" onclick="return navToggle();" onmouseover="document.getElementById('navbar').className='mouseover';" onmouseout="document.getElementById('navbar').className='';"/><div id="navcontainer"><div id="navlinks"><div id="navclosebar"><a href="#" onclick="return navClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div><div id="navpositionbar" class="navpositionbar"/><h2 id="navtitle">Java Basics: Regular Expressions</h2><a id="nav_overview" class="navseclink" href="overview.xhtml#overview">Overview</a><a id="nav_intro" class="navsublink" href="overview.xhtml#intro">Intro</a><a id="nav_usecases" class="navsublink" href="overview.xhtml#usecases">When to use regular expressions?</a><a id="nav_requirements" class="navsublink" href="overview.xhtml#requirements">Requirements</a><a id="nav_assert" class="navsublink" href="overview.xhtml#assert">Assert</a><a id="nav_regularexpressions" class="navseclink" href="regularexpressions.xhtml#regularexpressions">Regular Expressions</a><a id="nav_plainstrings" class="navsublink" href="regularexpressions.xhtml#plainstrings">Plain Strings</a><a id="nav_groupsandor" class="navsublink" href="regularexpressions.xhtml#groupsandor">Groups and Or</a><a id="nav_characterclasses" class="navsublink" href="regularexpressions.xhtml#characterclasses">Character Classes</a><a id="nav_quantifiers" class="navsublink" href="regularexpressions.xhtml#quantifiers">Quantifiers</a><a id="nav_anchors" class="navsublink" href="regularexpressions.xhtml#anchors">Anchors</a><a id="nav_flags" class="navsublink" href="regularexpressions.xhtml#flags">Flags</a><a id="nav_backreferences" class="navsublink" href="regularexpressions.xhtml#backreferences">Back references</a><a id="nav_using" class="navseclink" href="#using" onclick="if (event.button == 0) return goTo('#using', true); else return true;">Using Regular Expressions</a><a id="nav_simplematching" class="navsublink" href="#simplematching" onclick="if (event.button == 0) return goTo('#simplematching', true); else return true;">Simple Matching</a><a id="nav_finding" class="navsublink" href="#finding" onclick="if (event.button == 0) return goTo('#finding', true); else return true;">Finding and Parsing</a><a id="nav_replacing" class="navsublink" href="#replacing" onclick="if (event.button == 0) return goTo('#replacing', true); else return true;">Simple Replacing</a><a id="nav_complrexreplacing" class="navsublink" href="#complrexreplacing" onclick="if (event.button == 0) return goTo('#complrexreplacing', true); else return true;">Complex Replacements</a><a id="nav_splitting" class="navsublink" href="#splitting" onclick="if (event.button == 0) return goTo('#splitting', true); else return true;">Splitting</a><a id="nav_patternflags" class="navsublink" href="#patternflags" onclick="if (event.button == 0) return goTo('#patternflags', true); else return true;">Pattern Flags</a><a id="nav_advanced" class="navseclink" href="advanced.xhtml#advanced">Advanced Regular Expressions</a><a id="nav_greedy" class="navsublink" href="advanced.xhtml#greedy">Greedy / Non-Greedy Quantifier</a><a id="nav_lookaround" class="navsublink" href="advanced.xhtml#lookaround">Lookaround</a></div></div><div id="popups"><div id="pp-d39088e1122" class="tooltip">The easiest way to check whether a string matches a regular expression pattern is the <span class="idf">matches</span> method in <span class="idf">String</span>. By using a pattern that ignores all characters at the beginning and at the end of a string, you can also use it to find out whether a string contains a pattern.</div><div id="pp-d39088e1155" class="tooltip">If you want to find a partial string, just start and end the pattern with ".*". Then any string containing the pattern between will match. The example's regular expression matches if the input string contains the word 'love'. </div><div id="pp-d39088e1163" class="tooltip">In order to include an arbitrary string into your regular expression pattern, without having to escape control sequences manually, use the <span class="idf">Matcher.quoteReplacement()</span> method. It escapes all characters that may otherwise be interpreted by the regular expression parser. </div><div id="pp-d39088e1195" class="tooltip">Using the <span class="idf">Pattern</span> and <span class="idf">Matcher</span> class, it is possible to locate instances of your regular expression pattern in your input string. You can also make it return the pattern's capturing groups, thus allow simple parsing of strings.</div><div id="pp-d39088e1227" class="tooltip">For complex operations on regular expression, you need to compile the regular expression into a <span class="idf">Pattern</span> object first. This pattern object can also be reused, if you need the regular expression more than once.<br/> By the way, instead of the regular expression "[0-9]+]" you could also write "\\d+", which would be a little bit shorter (but also a bit less readable).</div><div id="pp-d39088e1249" class="tooltip">A <span class="idf">Matcher</span> represents the results of matching a string against a regular expression. You need the <span class="idf">Matcher</span> for most complex operations on regular expressions.</div><div id="pp-d39088e1266" class="tooltip">The <span class="idf">find</span> method searches for the next match of the <span class="idf">Matcher</span>'s pattern in the input string. If it finds one, it returns <span class="idf">true</span>. If there are no more matches, it returns <span class="idf">false</span>.</div><div id="pp-d39088e1303" class="tooltip">The methods <span class="idf">start()</span> and <span class="idf">end()</span> return the start and end position of the match within the stream.</div><div id="pp-d39088e1343" class="tooltip">This regular expression uses capturing groups (parenthesis) to define those two regions that should be extracted. The first capturing group includes all characters before the "@", and the second group includes all following the "@".<br/> The content of the capturing groups can be retrieved only after executing the pattern with <span class="idf">find</span> or <span class="idf">matches</span>. Then <span class="idf">group(int)</span> returns the n'th capturing group, with n=1 for the first group.</div><div id="pp-d39088e1373" class="tooltip">Note the difference: <span class="idf">matches</span> compares the whole input string against the pattern, unlike <span class="idf">find</span>, which looks for matches within the input string. Thus you can have only one match or none at all with <span class="idf">matches</span>, but you can have several with <span class="idf">find</span>.</div><div id="pp-d39088e1406" class="tooltip">As long as you replace every match with the same string, replacing is very easy: just invoke the <span class="idf">replaceFirst</span> or <span class="idf">replaceAll</span> methods of either <span class="idf">String</span> or <span class="idf">Pattern</span>.</div><div id="pp-d39088e1459" class="tooltip">Using <span class="idf">replaceAll</span> and <span class="idf">replaceFirst</span> with <span class="idf">Pattern</span> and <span class="idf">Matcher</span> does the same as <span class="idf">String</span>'s equivalents, but may be faster if you can re-use the pattern. It also allows you to compile the pattern with additional flags, which will be shown below.</div><div id="pp-d39088e1511" class="tooltip">If you want to replace a pattern with a custom built string, you need to use <span class="idf">Matcher</span>'s <span class="idf">appendReplacement</span> and <span class="idf">appendTail</span> methods. They make it relatively easy to do such replacements in a <span class="idf">StringBuffer</span>.</div><div id="pp-d39088e1589" class="tooltip"><span class="idf">appendReplacement</span> is the most important method here, and the place where the magic is hidden. It does two things:<br/> First, it appends a part of the import string to the <span class="idf">StringBuffer</span>. If it is the first match, it appends the region from the input string start to the beginning of the match. Otherwise it appends the region from the last match to the current match.<br/> Second, it appends the string given as second argument. This is the string the old match region will be replaced with.</div><div id="pp-d39088e1609" class="tooltip">Invoking <span class="idf">appendTail</span> is important because it will append the part of the original string from the last match to the end (if there was no match, at appends the whole input string).</div><div id="pp-d39088e1626" class="tooltip">Beside matching, parsing and replacing, Java can also use regular expressions to split strings into an array of strings.</div><div id="pp-d39088e1642" class="tooltip">The <span class="idf">split</span> method takes a regular expression which defines the separator between the substrings that you want to get.</div><div id="pp-d39088e1700" class="tooltip">Using the limit argument, you can limit the number of substrings that you get. The last string will then always contain the remaining string.</div><div id="pp-d39088e1735" class="tooltip">The value 0 has a special meaning for <span class="idf">split</span>: when set, empty elements at the end of the array will be removed.</div><div id="pp-d39088e1806" class="tooltip">Compiling a <span class="idf">Pattern</span> allows you to specify additional flags, modifying the default behaviour of regular expressions. The most important flags are <span class="idf">CASE_INSENSITIVE</span>, <span class="idf">MULTILINE</span> ("^" and "$" refer to the beginning/end of the line) and <span class="idf">DOTALL</span> ("." matches newlines).</div><div id="pp-d39088e1851" class="tooltip">As you can see, the flag <span class="idf">CASE_INSENSITIVE</span> declares the pattern to be case-sensitive. However, this only works for pure ASCII texts. If you want to match all unicode text, you must additionally add the <span class="idf">UNICODE_CASE</span> flag, thus write "Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE".</div><div id="pp-d39088e1898" class="tooltip">The <span class="idf">MULTILINE</span> flag redefines the "^" and "$" anchors. Without the flag, they only match the beginning and end of the input string. With <span class="idf">MULTILINE</span>, they match the beginning and end of lines.</div><div id="pp-d39088e1958" class="tooltip">The <span class="idf">DOTALL</span> flag redefines the "." character group. Without the flag, it matches any character but newline. With <span class="idf">DOTALL</span>, it matches everything.</div><div id="pp-d39088e2024" class="tooltip">You can easily combine several flags by ORing them with the binary OR ("|").</div><div id="ttCloseBar" class="closeBar"><a href="#" onclick="return tlClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div><div id="topicCloseBar" class="closeBar"><a href="#" onclick="return tpcClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div></div></body></html>