<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/1999/xhtml" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:page="http://tjansen.de/refPage" xmlns:i="http://tjansen.de/internal"><head><title>Regular Expressions - Java Basics: Regular Expressions</title><meta http-equiv="X-UA-Compatible" content="chrome=1"/><meta http-equiv="content-language" content="en"/><link rel="shortcut icon" href="../../images/favicon.png" type="image/png"/><link rel="stylesheet" type="text/css" href="../../style/style.css"/><script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-6791190-2']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
})();
</script><script type="text/javascript" src="../../js/all.js"/></head><body id="body"><div id="visibleContent"><div id="top"><a href="/"><img src="../../images/titlebar.png" alt="Jarfiller.com"/></a></div><div id="main"><div id="bodycolumn"><div class="yahbar"><div class="yahprev"><a href="overview.xhtml">Prev</a></div><h3 class="yahhere"><a href="#" onclick="return navToggle();">Java Basics: Regular Expressions / Regular Expressions</a></h3><div class="yahnext"><a href="using.xhtml">Next</a></div></div><h1 id="sec_regularexpressions" class="multipageTitle"><a name="regularexpressions">Regular Expressions</a></h1><div class="subSecRow1" id="sec_plainstrings"><div class="subSecHead" id="sechd_plainstrings"><a name="plainstrings">Plain Strings</a><br/>(<a href="#" id="tl-d39088e159" class="dottedTooltip" onclick="return tlClick('tl-d39088e159','pp-d39088e164');" onmouseover="return tlOver('tl-d39088e159','pp-d39088e164');" onmouseout="return tlOut('tl-d39088e159','pp-d39088e164');">more</a>)
		</div><div class="subSecContent" id="seccnt_plainstrings"><p class="subSecExplanation">Regular expressions are strings which <em>may contain certain control sequences</em>. However, they don't have to. The regular expressions in the first examples don't have any control sequences, and thus <em>they match only if they are equal to the input string</em>.</p><pre class="subSecCode"><code>String s = "foo bar bar";                                   <span class="cmt">// input string</span>

assert s.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#matches(java.lang.String)" class="javadoc">matches</a>("<em>foo bar bar</em>");                            <span class="cmt">// regular expression in <em>red</em> (<a href="#" id="tl-d39088e198" class="dottedTooltip" onclick="return tlClick('tl-d39088e198','pp-d39088e198');" onmouseover="return tlOver('tl-d39088e198','pp-d39088e198');" onmouseout="return tlOut('tl-d39088e198','pp-d39088e198');">more</a>)</span>
assert <em>!</em>s.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#matches(java.lang.String)" class="javadoc">matches</a>("dog");                                   <span class="cmt">// not equal, <em>no match</em> (<a href="#" id="tl-d39088e214" class="dottedTooltip" onclick="return tlClick('tl-d39088e214','pp-d39088e214');" onmouseover="return tlOver('tl-d39088e214','pp-d39088e214');" onmouseout="return tlOut('tl-d39088e214','pp-d39088e214');">more</a>)</span>

assert s.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#replaceFirst(java.lang.String, java.lang.String)" class="javadoc">replaceFirst</a>(<em>"foo"</em>, "bar").equals("bar bar bar");  <span class="cmt">// replace first"foo"</span>
assert s.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#replaceFirst(java.lang.String, java.lang.String)" class="javadoc">replaceFirst</a>(<em>"bar"</em>, "dog").equals("foo dog <em>bar</em>");  <span class="cmt">// replace first "bar"</span>

assert s.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#replaceAll(java.lang.String, java.lang.String)" class="javadoc">replaceAll</a>(<em>"foo"</em>, "bar").equals("bar bar bar");    <span class="cmt">// replace all "foo"</span>
assert s.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#replaceAll(java.lang.String, java.lang.String)" class="javadoc">replaceAll</a>(<em>"bar"</em>, "dog").equals("foo dog <em>dog</em>");    <span class="cmt">// replace all "bar"</span>
</code></pre></div></div><div class="subSecRow2" id="sec_groupsandor"><div class="subSecHead" id="sechd_groupsandor"><a name="groupsandor">Groups and Or</a><br/>(<a href="#" id="tl-d39088e274" class="dottedTooltip" onclick="return tlClick('tl-d39088e274','pp-d39088e279');" onmouseover="return tlOver('tl-d39088e274','pp-d39088e279');" onmouseout="return tlOut('tl-d39088e274','pp-d39088e279');">more</a>)
		</div><div class="subSecContent" id="seccnt_groupsandor"><pre class="subSecCode"><code>String a = "abc";
String b = "xyz";
assert a.matches("abc<em>|</em>xyz");       <span class="cmt">// "|" means <em>or</em> (<a href="#" id="tl-d39088e302" class="dottedTooltip" onclick="return tlClick('tl-d39088e302','pp-d39088e302');" onmouseover="return tlOver('tl-d39088e302','pp-d39088e302');" onmouseout="return tlOut('tl-d39088e302','pp-d39088e302');">more</a>)</span>
assert b.matches("abc<em>|</em>xyz");       <span class="cmt">// matches "abc" and "xyz"</span>
assert <em>!</em>"123".matches("abc|xyz");  <span class="cmt">// "123" does <em>not match</em></span>

assert a.replaceFirst("b|z", "O").equals("aOc");
assert b.replaceFirst("b|z", "O").equals("xyO");
assert a.replaceAll("a|b|c", "O").equals("OOO");

assert a.matches("<em>(</em>a<em>)</em><em>(</em>b<em>)</em><em>(</em>c<em>)</em>");     <span class="cmt">// "()" defines a <em>capturing group</em> (<a href="#" id="tl-d39088e361" class="dottedTooltip" onclick="return tlClick('tl-d39088e361','pp-d39088e361');" onmouseover="return tlOver('tl-d39088e361','pp-d39088e361');" onmouseout="return tlOut('tl-d39088e361','pp-d39088e361');">more</a>)</span>
assert a.matches("<em>((</em>a<em>)</em>bc<em>)</em>");       <span class="cmt">// nested groups are possible</span>

String c = "cold";
assert c.matches("<em>(b|c)</em>old");      <span class="cmt">// <em>or</em> and <em>groups</em> combined</span>
assert c.matches("ice|((b|c)ol(d|t))|hot");
assert c.replaceAll("o(d|l)", "XX").equals("cXXd");

String d = "(|)";
assert d.matches("<em>\\(\\|\\)</em>");     <span class="cmt">// escaping (<a href="#" id="tl-d39088e416" class="dottedTooltip" onclick="return tlClick('tl-d39088e416','pp-d39088e416');" onmouseover="return tlOver('tl-d39088e416','pp-d39088e416');" onmouseout="return tlOut('tl-d39088e416','pp-d39088e416');">more</a>)</span>
</code></pre></div></div><div class="subSecRow1" id="sec_characterclasses"><div class="subSecHead" id="sechd_characterclasses"><a name="characterclasses">Character Classes</a><br/>(<a href="#" id="tl-d39088e427" class="dottedTooltip" onclick="return tlClick('tl-d39088e427','pp-d39088e432');" onmouseover="return tlOver('tl-d39088e427','pp-d39088e432');" onmouseout="return tlOut('tl-d39088e427','pp-d39088e432');">more</a>)
		</div><div class="subSecContent" id="seccnt_characterclasses"><pre class="subSecCode"><code>String a = "abc";
assert a.matches("a<em>[bgh]</em>c");             <span class="cmt">// "[]" defines a <em>character class</em>(<a href="#" id="tl-d39088e449" class="dottedTooltip" onclick="return tlClick('tl-d39088e449','pp-d39088e449');" onmouseover="return tlOver('tl-d39088e449','pp-d39088e449');" onmouseout="return tlOut('tl-d39088e449','pp-d39088e449');">more</a>)</span>
assert a.replaceAll("<em>[abc]</em>", "X").equals("XXX");

assert a.matches("[a<em>-</em>z][a<em>-</em>z][a<em>-</em>z]");     <span class="cmt">// "-" defines a <em>character range</em></span>
assert a.replaceAll("<em>[b-f]</em>", "X").equals("aXX");
String b = "I love Java";
assert b.replaceAll("<em>[a-zA-Z]</em>", "X").equals("X XXXX XXXX");
assert b.replaceAll("<em>[oa-cJ]</em>", "X").equals("I lXve XXvX");

assert a.matches("[<em>[^x-z][^k][^st-w]</em>");  <span class="cmt">// "^" means "all other characters match" (<a href="#" id="tl-d39088e510" class="dottedTooltip" onclick="return tlClick('tl-d39088e510','pp-d39088e510');" onmouseover="return tlOver('tl-d39088e510','pp-d39088e510');" onmouseout="return tlOut('tl-d39088e510','pp-d39088e510');">more</a>)</span>
assert a.replaceAll("[<em>[^b]</em>", "X").equals("XbX");

assert "x".matches("<em>.</em>");                 <span class="cmt">// "." matches <em>any character</em> except newline (<a href="#" id="tl-d39088e532" class="dottedTooltip" onclick="return tlClick('tl-d39088e532','pp-d39088e532');" onmouseover="return tlOver('tl-d39088e532','pp-d39088e532');" onmouseout="return tlOut('tl-d39088e532','pp-d39088e532');">more</a>)</span>
assert a.matches("<em>...</em>");
assert b.matches("I.l.v. .a.a");
assert b.replaceAll(".", "X").equals("XXXXXXXXXXX");

assert a.matches("<em>\\w</em>\\w\\w");           <span class="cmt">// "\\w" is short for "[a-zA-Z_0-9]" (<a href="#" id="tl-d39088e563" class="dottedTooltip" onclick="return tlClick('tl-d39088e563','pp-d39088e563');" onmouseover="return tlOver('tl-d39088e563','pp-d39088e563');" onmouseout="return tlOut('tl-d39088e563','pp-d39088e563');">more</a>)</span>
assert b.replaceAll("\\w", "X").equals("X XXXX XXXX");
assert " ".matches("<em>\\s</em>");               <span class="cmt">// "\\s" matches <em>whitespace</em> ("[ \t\n\x0B\f\r]") (<a href="#" id="tl-d39088e579" class="dottedTooltip" onclick="return tlClick('tl-d39088e579','pp-d39088e579');" onmouseover="return tlOver('tl-d39088e579','pp-d39088e579');" onmouseout="return tlOut('tl-d39088e579','pp-d39088e579');">more</a>)</span>
assert b.replaceAll("\\s", "X").equals("IXloveXJava");
assert "123".matches("<em>\\d</em>\\d\\d");       <span class="cmt">// "\\d" is short for "[0-9]" (<a href="#" id="tl-d39088e592" class="dottedTooltip" onclick="return tlClick('tl-d39088e592','pp-d39088e592');" onmouseover="return tlOver('tl-d39088e592','pp-d39088e592');" onmouseout="return tlOut('tl-d39088e592','pp-d39088e592');">more</a>)</span>
assert <em>!</em>a.matches("<em>\\W</em>\\W\\W");          <span class="cmt">// "\\W" inverts "\\w", same as "[^a-zA-Z_0-9]" (<a href="#" id="tl-d39088e606" class="dottedTooltip" onclick="return tlClick('tl-d39088e606','pp-d39088e606');" onmouseover="return tlOver('tl-d39088e606','pp-d39088e606');" onmouseout="return tlOut('tl-d39088e606','pp-d39088e606');">more</a>)</span>
assert b.replaceAll("<em>\\S</em>", "X").equals("X XXXX XXXX");
assert "a1".replaceAll("<em>\\D</em>", "X").equals("X1");
</code></pre></div></div><div class="subSecRow2" id="sec_quantifiers"><div class="subSecHead" id="sechd_quantifiers"><a name="quantifiers">Quantifiers</a><br/>(<a href="#" id="tl-d39088e623" class="dottedTooltip" onclick="return tlClick('tl-d39088e623','pp-d39088e628');" onmouseover="return tlOver('tl-d39088e623','pp-d39088e628');" onmouseout="return tlOut('tl-d39088e623','pp-d39088e628');">more</a>)
		</div><div class="subSecContent" id="seccnt_quantifiers"><pre class="subSecCode"><code>String a = "b ba baa baaa";
assert a.replaceAll("b<em>a*</em>", "X").equals("X X X X");        <span class="cmt">// "*" means "<em>zero or more</em>" (<a href="#" id="tl-d39088e646" class="dottedTooltip" onclick="return tlClick('tl-d39088e646','pp-d39088e646');" onmouseover="return tlOver('tl-d39088e646','pp-d39088e646');" onmouseout="return tlOut('tl-d39088e646','pp-d39088e646');">more</a>)</span>
assert a.matches("ba* ba* ba* ba*");
assert a.replaceAll("b<em>(aa)*</em>, "X").equals("X ba X baaa");  <span class="cmt">// apply "*" to group "aa"</span>
assert a.replaceAll("b<em>[a-z]*</em>", "X").equals("X X X X");
assert a.matches("<em>(ba* *)*</em>");                             <span class="cmt">// complex pattern (<a href="#" id="tl-d39088e674" class="dottedTooltip" onclick="return tlClick('tl-d39088e674','pp-d39088e674');" onmouseover="return tlOver('tl-d39088e674','pp-d39088e674');" onmouseout="return tlOut('tl-d39088e674','pp-d39088e674');">more</a>)</span>

assert a.replaceAll("b<em>a+</em>", "X").equals("b X X X");        <span class="cmt">// "+" means "<em>one or more</em>" (<a href="#" id="tl-d39088e689" class="dottedTooltip" onclick="return tlClick('tl-d39088e689','pp-d39088e689');" onmouseover="return tlOver('tl-d39088e689','pp-d39088e689');" onmouseout="return tlOut('tl-d39088e689','pp-d39088e689');">more</a>)</span>
assert a.matches("b ba+ ba+ ba+");
assert a.replaceAll("b<em>(aa)+</em>, "X").equals("b ba X baaa");  <span class="cmt">// apply "+" to group "aa"</span>
assert a.replaceAll("b<em>[a-z]+</em>", "X").equals("b X X X");
assert a.matches("<em>b( ba+)+</em>");                             <span class="cmt">// complex pattern (<a href="#" id="tl-d39088e717" class="dottedTooltip" onclick="return tlClick('tl-d39088e717','pp-d39088e717');" onmouseover="return tlOver('tl-d39088e717','pp-d39088e717');" onmouseout="return tlOut('tl-d39088e717','pp-d39088e717');">more</a>)</span>

assert a.replaceAll("b<em>a?</em>", "X").equals("X X Xa Xaa");     <span class="cmt">// "?" means <em>optional</em> (0 or 1) (<a href="#" id="tl-d39088e732" class="dottedTooltip" onclick="return tlClick('tl-d39088e732','pp-d39088e732');" onmouseover="return tlOver('tl-d39088e732','pp-d39088e732');" onmouseout="return tlOut('tl-d39088e732','pp-d39088e732');">more</a>)</span>
assert a.replaceAll("b<em>(aa)?</em>, "X").equals("X ba X Xa");    <span class="cmt">// apply "?" to group "aa"</span>
assert a.matches("<em>(ba* ?)+</em>");                             <span class="cmt">// complex pattern</span>

assert a.replaceAll("b<em>a{2}</em>", "X").equals("b ba X baaa");  <span class="cmt">// "{2}" means "twice" (<a href="#" id="tl-d39088e761" class="dottedTooltip" onclick="return tlClick('tl-d39088e761','pp-d39088e761');" onmouseover="return tlOver('tl-d39088e761','pp-d39088e761');" onmouseout="return tlOut('tl-d39088e761','pp-d39088e761');">more</a>)</span>
assert a.replaceAll("b<em>a{2,3}</em>", "X").equals("b ba X X");   <span class="cmt">// "{2,3}" means "2-3 times" (<a href="#" id="tl-d39088e771" class="dottedTooltip" onclick="return tlClick('tl-d39088e771','pp-d39088e771');" onmouseover="return tlOver('tl-d39088e771','pp-d39088e771');" onmouseout="return tlOut('tl-d39088e771','pp-d39088e771');">more</a>)</span>
assert a.replaceAll("b<em>a{2,}</em>", "X").equals("b ba X X");    <span class="cmt">// "{2,}" means "at least twice" (<a href="#" id="tl-d39088e781" class="dottedTooltip" onclick="return tlClick('tl-d39088e781','pp-d39088e781');" onmouseover="return tlOver('tl-d39088e781','pp-d39088e781');" onmouseout="return tlOut('tl-d39088e781','pp-d39088e781');">more</a>)</span>
</code></pre></div></div><div class="subSecRow1" id="sec_anchors"><div class="subSecHead" id="sechd_anchors"><a name="anchors">Anchors</a><br/>(<a href="#" id="tl-d39088e787" class="dottedTooltip" onclick="return tlClick('tl-d39088e787','pp-d39088e792');" onmouseover="return tlOver('tl-d39088e787','pp-d39088e792');" onmouseout="return tlOut('tl-d39088e787','pp-d39088e792');">more</a>)
		</div><div class="subSecContent" id="seccnt_anchors"><pre class="subSecCode"><code>String a = "aaa";
String b = "abc aca";

assert a.replaceAll("<em>^</em>a", "X").equals("Xaa");        <span class="cmt">// "^" means "<em>beginning of input/line</em>" (<a href="#" id="tl-d39088e815" class="dottedTooltip" onclick="return tlClick('tl-d39088e815','pp-d39088e815');" onmouseover="return tlOver('tl-d39088e815','pp-d39088e815');" onmouseout="return tlOut('tl-d39088e815','pp-d39088e815');">more</a>)</span>
assert a.matches("<em>^</em>aaa");
assert <em>!</em>b.matches("<em>^aca</em>");

assert a.replaceAll("a<em>$</em>", "X").equals("aaa");        <span class="cmt">// "$" means "<em>end of input/line</em>" (<a href="#" id="tl-d39088e852" class="dottedTooltip" onclick="return tlClick('tl-d39088e852','pp-d39088e852');" onmouseover="return tlOver('tl-d39088e852','pp-d39088e852');" onmouseout="return tlOut('tl-d39088e852','pp-d39088e852');">more</a>)</span>
assert a.matches("<em>^</em>aaa<em>$</em>");
assert <em>!</em>b.matches("<em>abc$</em>");

assert b.replaceAll("<em>\\b</em>a", "X").equals("Xbc Xc<em>a</em>");  <span class="cmt">// "\b" means "at <em>word boundary</em>" (<a href="#" id="tl-d39088e895" class="dottedTooltip" onclick="return tlClick('tl-d39088e895','pp-d39088e895');" onmouseover="return tlOver('tl-d39088e895','pp-d39088e895');" onmouseout="return tlOut('tl-d39088e895','pp-d39088e895');">more</a>)</span>
assert b.replaceAll("<em>\\B</em>a", "X").equals("abc ac<em>X</em>");  <span class="cmt">// "\B" means "not at word boundary" (<a href="#" id="tl-d39088e908" class="dottedTooltip" onclick="return tlClick('tl-d39088e908','pp-d39088e908');" onmouseover="return tlOver('tl-d39088e908','pp-d39088e908');" onmouseout="return tlOut('tl-d39088e908','pp-d39088e908');">more</a>)</span>
</code></pre></div></div><div class="subSecRow2" id="sec_flags"><div class="subSecHead" id="sechd_flags"><a name="flags">Flags</a><br/>(<a href="#" id="tl-d39088e913" class="dottedTooltip" onclick="return tlClick('tl-d39088e913','pp-d39088e918');" onmouseover="return tlOver('tl-d39088e913','pp-d39088e918');" onmouseout="return tlOut('tl-d39088e913','pp-d39088e918');">more</a>)
		</div><div class="subSecContent" id="seccnt_flags"><pre class="subSecCode"><code>String a = "aBcDeF";
String b = "A\nB\nC";
assert a.replaceAll("<em>(?i)</em>[a-f]", "X").equals("XXXXXX");  <span class="cmt">// <span class="idf">(?<em>i</em>)</span> means <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#CASE_INSENSITIVE" class="javadoc"><em>CASE_INSENSITIVE</em></a> (<a href="#" id="tl-d39088e954" class="dottedTooltip" onclick="return tlClick('tl-d39088e954','pp-d39088e954');" onmouseover="return tlOver('tl-d39088e954','pp-d39088e954');" onmouseout="return tlOut('tl-d39088e954','pp-d39088e954');">more</a>)</span>
assert b.matches("<em>(?s)</em>.+");                              <span class="cmt">// <span class="idf">(?<em>s</em>)</span> enables <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#DOTALL" class="javadoc"><em>DOTALL</em></a> mode (<a href="#" id="tl-d39088e979" class="dottedTooltip" onclick="return tlClick('tl-d39088e979','pp-d39088e1958');" onmouseover="return tlOver('tl-d39088e979','pp-d39088e1958');" onmouseout="return tlOut('tl-d39088e979','pp-d39088e1958');">more</a>)</span>
assert b.matches("<em>(?is)</em>[a-z].[a-z].[a-z]");              <span class="cmt">// <span class="idf">(?<em>is</em>)</span> <em>combines 'i' and 's'</em> (<a href="#" id="tl-d39088e996" class="dottedTooltip" onclick="return tlClick('tl-d39088e996','pp-d39088e996');" onmouseover="return tlOver('tl-d39088e996','pp-d39088e996');" onmouseout="return tlOut('tl-d39088e996','pp-d39088e996');">more</a>)</span>
assert !b.matches("<em>(?is)</em>[a-z].[a-z].<em>(?-i)</em>[a-z]");        <span class="cmt">// <span class="idf">(?<em>-i</em>)</span> <em>disables</em> the <span class="idf">i</span> flag (<a href="#" id="tl-d39088e1024" class="dottedTooltip" onclick="return tlClick('tl-d39088e1024','pp-d39088e1024');" onmouseover="return tlOver('tl-d39088e1024','pp-d39088e1024');" onmouseout="return tlOut('tl-d39088e1024','pp-d39088e1024');">more</a>)</span>
assert b.replaceAll("<em>(?m)</em>^\\w", "X").equals("X\nX\nX");  <span class="cmt">// (?<em>m</em>) enables <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#MULTILINE" class="javadoc"><em>MUTLILINE</em></a> mode (<a href="#" id="tl-d39088e1050" class="dottedTooltip" onclick="return tlClick('tl-d39088e1050','pp-d39088e1898');" onmouseover="return tlOver('tl-d39088e1050','pp-d39088e1898');" onmouseout="return tlOut('tl-d39088e1050','pp-d39088e1898');">more</a>)</span>
</code></pre></div></div><div class="subSecRow1" id="sec_backreferences"><div class="subSecHead" id="sechd_backreferences"><a name="backreferences">Back references</a><br/>(<a href="#" id="tl-d39088e1054" class="dottedTooltip" onclick="return tlClick('tl-d39088e1054','pp-d39088e1059');" onmouseover="return tlOver('tl-d39088e1054','pp-d39088e1059');" onmouseout="return tlOut('tl-d39088e1054','pp-d39088e1059');">more</a>)
		</div><div class="subSecContent" id="seccnt_backreferences"><pre class="subSecCode"><code>String a = "101 102 201 202";
assert a.replaceAll("<em>(</em>\\d<em>)</em>0<em>\\1</em>", "X").equals("X 102 201 X");  <span class="cmt">// "\1" is a <em>back reference</em> (<a href="#" id="tl-d39088e1083" class="dottedTooltip" onclick="return tlClick('tl-d39088e1083','pp-d39088e1083');" onmouseover="return tlOver('tl-d39088e1083','pp-d39088e1083');" onmouseout="return tlOut('tl-d39088e1083','pp-d39088e1083');">more</a>)</span>

String b = "acbba";
assert b.matches("([a-z])<em>(?:</em>b|c<em>)</em>([a-z])\\2\\1");              <span class="cmt">// <em>non-capturing group</em> (<a href="#" id="tl-d39088e1103" class="dottedTooltip" onclick="return tlClick('tl-d39088e1103','pp-d39088e1103');" onmouseover="return tlOver('tl-d39088e1103','pp-d39088e1103');" onmouseout="return tlOut('tl-d39088e1103','pp-d39088e1103');">more</a>)</span>
</code></pre></div></div><div class="yahbar"><div class="yahprev"><a href="overview.xhtml">Prev<br/><span>Overview</span></a></div><div class="yahhere"><a href="#" onclick="return navToggle();">Java Basics: Regular Expressions / Regular Expressions</a><br/><a href="/javabasics/regexp/"><span>Single Page Mode</span></a>, <a href="#" onclick="return navToggle();"><span>Show Table of Content</span></a></div><div class="yahnext"><a href="using.xhtml">Next<br/><span>Using Regular Expressions</span></a></div></div></div><div id="sidecolumn">
  	  	<div><h3>Useful Links</h3><div class="sidecolumnSubTitleLine"/>
  			<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#sum">Regular expression summary (Java Documentation)</a><br/>
  			<a href="http://en.wikipedia.org/wiki/Regular_expression">Regular expressions on Wikipedia</a><br/>
  		</div>
  </div></div></div><div id="footer"><div id="footer-content"><div id="footer-left"><div class="footerLine"><a href="/">Home</a> - <a href="/about">About Jarfiller</a> - <a href="/imprint.xhtml">Imprint</a></div><div class="footerLine">Please send feedback and corrections to <a href="mailto:tim@tjansen.de">tim@<span style="display: none">got you</span>tjansen.de</a>.</div><div class="footerLine"><a href="http://www.twitter.com/timjansen">Follow</a> me on Twitter.</div><div class="copyrightLine">© 2010 Tim Jansen; content licensed under <a href="http://creativecommons.org/licenses/by/3.0/us/">cc-by</a>; example source code is public domain
				</div></div><div id="footer-right"><a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/"><img alt="Creative Commons License" style="border-width:0" src="../../images/ext/cc-by-88x31.png"/></a></div></div></div><div id="navbar" onclick="return navToggle();" onmouseover="document.getElementById('navbar').className='mouseover';" onmouseout="document.getElementById('navbar').className='';"/><div id="navcontainer"><div id="navlinks"><div id="navclosebar"><a href="#" onclick="return navClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div><div id="navpositionbar" class="navpositionbar"/><h2 id="navtitle">Java Basics: Regular Expressions</h2><a id="nav_overview" class="navseclink" href="overview.xhtml#overview">Overview</a><a id="nav_intro" class="navsublink" href="overview.xhtml#intro">Intro</a><a id="nav_usecases" class="navsublink" href="overview.xhtml#usecases">When to use regular expressions?</a><a id="nav_requirements" class="navsublink" href="overview.xhtml#requirements">Requirements</a><a id="nav_assert" class="navsublink" href="overview.xhtml#assert">Assert</a><a id="nav_regularexpressions" class="navseclink" href="#regularexpressions" onclick="if (event.button == 0) return goTo('#regularexpressions', true); else return true;">Regular Expressions</a><a id="nav_plainstrings" class="navsublink" href="#plainstrings" onclick="if (event.button == 0) return goTo('#plainstrings', true); else return true;">Plain Strings</a><a id="nav_groupsandor" class="navsublink" href="#groupsandor" onclick="if (event.button == 0) return goTo('#groupsandor', true); else return true;">Groups and Or</a><a id="nav_characterclasses" class="navsublink" href="#characterclasses" onclick="if (event.button == 0) return goTo('#characterclasses', true); else return true;">Character Classes</a><a id="nav_quantifiers" class="navsublink" href="#quantifiers" onclick="if (event.button == 0) return goTo('#quantifiers', true); else return true;">Quantifiers</a><a id="nav_anchors" class="navsublink" href="#anchors" onclick="if (event.button == 0) return goTo('#anchors', true); else return true;">Anchors</a><a id="nav_flags" class="navsublink" href="#flags" onclick="if (event.button == 0) return goTo('#flags', true); else return true;">Flags</a><a id="nav_backreferences" class="navsublink" href="#backreferences" onclick="if (event.button == 0) return goTo('#backreferences', true); else return true;">Back references</a><a id="nav_using" class="navseclink" href="using.xhtml#using">Using Regular Expressions</a><a id="nav_simplematching" class="navsublink" href="using.xhtml#simplematching">Simple Matching</a><a id="nav_finding" class="navsublink" href="using.xhtml#finding">Finding and Parsing</a><a id="nav_replacing" class="navsublink" href="using.xhtml#replacing">Simple Replacing</a><a id="nav_complrexreplacing" class="navsublink" href="using.xhtml#complrexreplacing">Complex Replacements</a><a id="nav_splitting" class="navsublink" href="using.xhtml#splitting">Splitting</a><a id="nav_patternflags" class="navsublink" href="using.xhtml#patternflags">Pattern Flags</a><a id="nav_advanced" class="navseclink" href="advanced.xhtml#advanced">Advanced Regular Expressions</a><a id="nav_greedy" class="navsublink" href="advanced.xhtml#greedy">Greedy / Non-Greedy Quantifier</a><a id="nav_lookaround" class="navsublink" href="advanced.xhtml#lookaround">Lookaround</a></div></div><div id="popups"><div id="pp-d39088e164" class="tooltip">Almost any string is a valid regular expression. If it does not contain any control sequences, the regular expression pattern will only match those strings which are equal.</div><div id="pp-d39088e198" class="tooltip">"foo bar bar" is a regular expression, albeit a pretty boring one without control sequences. Thus it only matches this one exact string, "foo bar bar".</div><div id="pp-d39088e214" class="tooltip">"dog" does not match, as only those patterns that exactly match the regular expression will fulfill the test.</div><div id="pp-d39088e279" class="tooltip">Using or ("|") you can specify two or more patterns. Any of them can match the input string to make the test succeed.<br/> You can define groups in the regular expression by putting parts of the regular expression into parenthesis ("()"). They can be useful for the "|" operator and quantifiers, and are also used by back-references.</div><div id="pp-d39088e302" class="tooltip">With the or operator "|" you can specify two alternatives for the pattern. The pattern matches if at least one of the alternatives matches.</div><div id="pp-d39088e361" class="tooltip">If you put a part of your regular expression into parenthesis, this defines a capturing group. Capturing groups have no direct influence on the pattern, but other operators may refer to them.</div><div id="pp-d39088e416" class="tooltip">In order to match the actual characters "(", ")" or "|", instead of interpreting them in the regular expression, <em>prefix them with a backslash</em>. As Java itself interprets backslashes in string literals, you need to <em>use a double backslash</em> in the source code.</div><div id="pp-d39088e432" class="tooltip">A character class allows you to specify a set of characters which will fulfill the pattern at its place.</div><div id="pp-d39088e449" class="tooltip">A list of characters in square brackets ("[]") is called a <em>character class</em>. They match any of their characters in the pattern. Writing "[abc]" is the same as "(a|b|c)". In this example, "a[bgh]c" matches the strings "abc", "agc" and "ahc".</div><div id="pp-d39088e510" class="tooltip">By starting a character class with a caret ("^"), you specify that all characters match except those listed.</div><div id="pp-d39088e532" class="tooltip">The dot "." matches any character except newline. You can enable newline matching with the <span class="idf">(?s)</span> flag or <span class="idf">DOTALL</span> option.</div><div id="pp-d39088e563" class="tooltip">"\\w" is a predefined character class to match only alphanumeric characters and the underscore. It is the same as writing "[a-zA-Z_0-9]".</div><div id="pp-d39088e579" class="tooltip">"\\s" is a predefined character class to match only whitespace characters. It is the same as writing "[ \t\n\x0B\f\r]".</div><div id="pp-d39088e592" class="tooltip">"\\d" is a predefined character class to match only digits. It is the same as writing "[0-9]".</div><div id="pp-d39088e606" class="tooltip">Uppercase character classes like "\\W" are the opposite of the lower case characters: they match every character that is not a part of the lowercase pendant</div><div id="pp-d39088e628" class="tooltip">Quantifies allow you to specify that the preceding character or character class or group is either optional and/or is expected to occur more than one time.</div><div id="pp-d39088e646" class="tooltip">The quantifier "*" means that the preceding character or character class or group is optional and does not need to appear to match the pattern. But if it does, it can be there any number of times.</div><div id="pp-d39088e674" class="tooltip">This is a very complex pattern that will still match the input string "b ba baa baaa". Note the use of groups and "*" quantifiers. The first "*" means that "b" can be followed by any number of "a"'s. The second means that the "ba" part can be followed by any number of spaces. And the third part means that the preceding group ("ba* *") can be repeated any number of times.</div><div id="pp-d39088e689" class="tooltip">The quantifier "+" means that the preceding character or character class or group appears at least once (but possibly more often).</div><div id="pp-d39088e717" class="tooltip">This is a very complex pattern that will still match the input string "b ba baa baaa". Note the use of groups and quantifiers. The first "+" means that " b" is followed by at least one "a". And the second part means that the preceding group ("( ba+)") will be repeated at least once.</div><div id="pp-d39088e732" class="tooltip">The quantifier "?" means that the preceding character or character class or group is optional. Its presence is not required for a match.</div><div id="pp-d39088e761" class="tooltip">The quantifier "{n}", with "n" being a number, means that the preceding character or character class or group needs to be repeated exactly "n" times to match the pattern.</div><div id="pp-d39088e771" class="tooltip">The quantifier "{n,m}", with "n" and "m" being numbers, means that the preceding character or character class or group needs to be repeated at least "n" times and at most "m" times to match the pattern.</div><div id="pp-d39088e781" class="tooltip">The quantifier "{n,}", with "n" being a number, means that the preceding character or character class or group needs to be repeated at least "n" times to match the pattern.</div><div id="pp-d39088e792" class="tooltip">Anchors allow you to specify where a regular expression pattern needs to be positioned within the input string. For example, you can specify that it must start at the beginning of a line, or at the end of a word.</div><div id="pp-d39088e815" class="tooltip">The "^" must be placed at the beginning of a regular expression. Then the pattern will only match if the pattern can be found at the beginning of the regular expression. If specify the <span class="idf">(?m)</span> flag or <span class="idf">MULTILINE</span> option, it will also match if found at the beginning of a line.</div><div id="pp-d39088e852" class="tooltip">The "$" must be placed at the end of a regular expression. Then the pattern will only match if the pattern can be found at the end of the regular expression. If specify the <span class="idf">(?m)</span> flag or <span class="idf">MULTILINE</span> option, it will also match if found at the end of a line.</div><div id="pp-d39088e895" class="tooltip">With the "\b" anchor a pattern will only match if the "\b" is aligned to a word-boundary. A word-boundary is the beginning and end of a string or line, as well as any alphanumeric character next to whitespace.</div><div id="pp-d39088e908" class="tooltip">With the "\B" anchor a pattern will only match if the "\b" is not aligned to a word-boundary. A word-boundary is the beginning and end of a string or line, as well as any alphanumeric character next to whitespace.</div><div id="pp-d39088e918" class="tooltip">Using flags you can modify the regular expression's behaviour. The most important flag is 'i'. It makes your regular expression (or a part thereof) case-insentitive. Just add '<em>(?i)</em>' at the beginning, and the rest will be case-insensitive. You can also declare only parts of the pattern to be case-insensitive and turn case-sensitivity on again using '<em>(?-i)</em>'. You can find a list of all flags in the <span class="idf">Pattern</span> javadoc.</div><div id="pp-d39088e954" class="tooltip">By putting <span class="idf">(?i)</span> into a pattern, the rest of the pattern (but not the preceding part) is case-insensitive. <strong class="warn">Please note that this only works with ASCII characters.</strong> You need to add an 'u' flag in order to process unicode characters, thus write '(?iu)'.</div><div id="pp-d39088e996" class="tooltip">You can combine several flags in a single control sequence. In this case, the regular expression is case-insensitive and in <span class="idf">DOTALL</span> mode. Without both flags the pattern would not match.</div><div id="pp-d39088e1024" class="tooltip">By putting a '-'in front of one or more flags, you can disable them until the rest of the pattern (unless you enable them later). To disable both <span class="idf">i</span> and <span class="idf">s</span>, you could write <span class="idf">(?-is)</span>.</div><div id="pp-d39088e1059" class="tooltip">A back reference states you that the content of a previous capturing group needs to be repeated in order to match the pattern.</div><div id="pp-d39088e1083" class="tooltip">"\1" is a back reference to the first capturing group. The pattern matches only if the matcher finds the same content in both the capturing group and at the place of the back reference. Similarly, you can use "\2" for the second capturing group and so on.</div><div id="pp-d39088e1103" class="tooltip">If you put a group in "(?:" and ")" (instead of just "(" and ")"), it is a non-capturing group. The only difference between a capturing groupd and a non-capturing group is that the latter won't count for back-references and it won't be returned as group in <span class="idf">Matcher</span>.</div><div id="ttCloseBar" class="closeBar"><a href="#" onclick="return tlClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div><div id="topicCloseBar" class="closeBar"><a href="#" onclick="return tpcClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div></div></body></html>