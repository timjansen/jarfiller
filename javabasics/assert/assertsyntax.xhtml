<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/1999/xhtml" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:page="http://tjansen.de/refPage" xmlns:i="http://tjansen.de/internal"><head><title>Assert Syntax - Java Basics: Assert</title><meta http-equiv="X-UA-Compatible" content="chrome=1"/><meta http-equiv="content-language" content="en"/><link rel="shortcut icon" href="../../images/favicon.png" type="image/png"/><link rel="stylesheet" type="text/css" href="../../style/style.css"/><script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-6791190-2']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
})();
</script><script type="text/javascript" src="../../js/all.js"/></head><body id="body"><div id="visibleContent"><div id="top"><a href="/"><img src="../../images/titlebar.png" alt="Jarfiller.com"/></a></div><div id="main"><div id="bodycolumn"><div class="yahbar"><div class="yahprev"><a href="overview.xhtml">Prev</a></div><h3 class="yahhere"><a href="#" onclick="return navToggle();">Java Basics: Assert / Assert Syntax</a></h3><div class="yahnext"><a href="enabling.xhtml">Next</a></div></div><h1 id="sec_assertsyntax" class="multipageTitle"><a name="assertsyntax">Assert Syntax</a></h1><div class="subSecRow2" id="sec_syntax"><div class="subSecHead" id="sechd_syntax"><a name="syntax">Syntax</a></div><div class="subSecContent" id="seccnt_syntax"><p class="subSecExplanation"> The syntax of assertions is very simple. You just write the <em><span class="idf">assert</span> keyword followed by the expression</em>. For example: </p><pre class="subSecCode"><code>assert 2 + 2 == 4;
</code></pre><p class="subSecExplanation"> The assertion's expression will <em>only be executed if assertions have been enabled</em> (<a href="#" id="tl-d37152e163" class="dottedTooltip" onclick="return tlClick('tl-d37152e163','pp-d37152e163');" onmouseover="return tlOver('tl-d37152e163','pp-d37152e163');" onmouseout="return tlOut('tl-d37152e163','pp-d37152e163');">more</a>). By default, they are disabled. If assertions are enabled and the expression is <span class="idf">false</span>, an <em><a href="http://java.sun.com/javase/6/docs/api/java/lang/AssertionError.html" class="javadoc">AssertionError</a></em> will be thrown. </p><p class="subSecExplanation">You can add a second expression argument expression to the <span class="idf">assert</span> statement, separated by a colon (':') from the first argument. Its value will be shown to the user if the assertion failed and is used to show the wrong value or cause of the error: </p><pre class="subSecCode"><code>String a = "abcdefg";
assert a.contains("c")<em> : a</em>;
</code></pre><p class="subSecExplanation"> If <span class="idf">a</span> would not contain a "c" (which obviously can never happen in this example), the assertion would abort the execution by throwing an <a href="http://java.sun.com/javase/6/docs/api/java/lang/AssertionError.html" class="javadoc">AssertionError</a> and specify the value of <span class="idf">a</span> as reason. </p></div></div><div class="subSecRow1" id="sec_syntaxexample"><div class="subSecHead" id="sechd_syntaxexample"><a name="syntaxexample">Examples</a></div><div class="subSecContent" id="seccnt_syntaxexample"><p class="subSecExplanation">Compute length of the hypotenuse (<a href="http://en.wikipedia.org/wiki/Pythagorean_theorem">Pythagorean theorem</a>):</p><pre class="subSecCode"><code>static double getLengthOfHypotenuse(double a, double b) {
    double squareSum = a*a + b*b;
    <em>assert squareSum &gt;= 0</em>;  <span class="cmt">// always positive (<a href="#" id="tl-d37152e241" class="dottedTooltip" onclick="return tlClick('tl-d37152e241','pp-d37152e241');" onmouseover="return tlOver('tl-d37152e241','pp-d37152e241');" onmouseout="return tlOut('tl-d37152e241','pp-d37152e241');">more</a>)</span>
    return Math.sqrt(squareSum);
}
</code></pre><p class="subSecExplanation">Split string into space-separated words, capitalize the words, and put the string together:</p><pre class="subSecCode"><code>String capitalizeWords(String sentence) {
    if (sentence.trim().length() == 0)                   <span class="cmt">// no empty sentences (<a href="#" id="tl-d37152e269" class="dottedTooltip" onclick="return tlClick('tl-d37152e269','pp-d37152e269');" onmouseover="return tlOver('tl-d37152e269','pp-d37152e269');" onmouseout="return tlOut('tl-d37152e269','pp-d37152e269');">more</a>)</span>
        return sentence;

    String r = "";
    for (String word: sentence.trim().split("\\s+")) {   <span class="cmt">// split into words (<a href="#" id="tl-d37152e291" class="dottedTooltip" onclick="return tlClick('tl-d37152e291','pp-d37152e291');" onmouseover="return tlOver('tl-d37152e291','pp-d37152e291');" onmouseout="return tlOut('tl-d37152e291','pp-d37152e291');">more</a>)</span>
        <em>assert word.length() &gt;= 1;</em>                       <span class="cmt">// no empty strings (<a href="#" id="tl-d37152e315" class="dottedTooltip" onclick="return tlClick('tl-d37152e315','pp-d37152e315');" onmouseover="return tlOver('tl-d37152e315','pp-d37152e315');" onmouseout="return tlOut('tl-d37152e315','pp-d37152e315');">more</a>)</span>
        r += Character.toUpperCase(word.charAt(0)) + word.substring(1) + " ";
    }
    return r.trim();
}
</code></pre><p class="subSecExplanation">Return an opening hour for the given date - 8 for weekdays, 9 on Saturday, 11 on Sunday:</p><pre class="subSecCode"><code>static int getOpeningHour(Date date) {
	  Calendar cal = new GregorianCalendar();
    cal.setTime(date);
    int weekday = cal.get(Calendar.DAY_OF_WEEK);

    if (weekday &gt;= Calendar.MONDAY &amp;&amp; weekday &lt;= Calendar.FRIDAY)
        return 8;
    else if (weekday == Calendar.SATURDAY)
        return 9;
    else if (weekday == Calendar.SUNDAY)
        return 11;
    else {
        <em>assert false</em>;  <span class="cmt">// all days considered? (<a href="#" id="tl-d37152e393" class="dottedTooltip" onclick="return tlClick('tl-d37152e393','pp-d37152e393');" onmouseover="return tlOver('tl-d37152e393','pp-d37152e393');" onmouseout="return tlOut('tl-d37152e393','pp-d37152e393');">more</a>)</span>
        return 0;      <span class="cmt">// still needed (<a href="#" id="tl-d37152e415" class="dottedTooltip" onclick="return tlClick('tl-d37152e415','pp-d37152e415');" onmouseover="return tlOver('tl-d37152e415','pp-d37152e415');" onmouseout="return tlOut('tl-d37152e415','pp-d37152e415');">more</a>)</span>
    }
}
</code></pre></div></div><div class="subSecRow2" id="sec_sizeeffects"><div class="subSecHead" id="sechd_sizeeffects"><a name="sizeeffects">Side-effects</a></div><div class="subSecContent" id="seccnt_sizeeffects"><p class="subSecExplanation">Side-effects are assertions that modify data and thus influence the rest of the program. Then the program may behave differently depending on whether assertions are enabled or not. <em>Side-effects should be avoided</em>. The following line shows a simple <span class="idf">assert</span> statement with side-effect:</p><pre class="subSecCode"><code>int a = 4;
assert <em>a++</em> != 0;  <span class="cmt">// <strong class="warn">bad: side-effect</strong></span>
System.out.println("a=" + a);
</code></pre><p class="subSecExplanation">Depending on whether assertions are enabled or not, the program will either print "a=4" or "a=5".</p></div></div><div class="yahbar"><div class="yahprev"><a href="overview.xhtml">Prev<br/><span>Overview</span></a></div><div class="yahhere"><a href="#" onclick="return navToggle();">Java Basics: Assert / Assert Syntax</a><br/><a href="/javabasics/assert/"><span>Single Page Mode</span></a>, <a href="#" onclick="return navToggle();"><span>Show Table of Content</span></a></div><div class="yahnext"><a href="enabling.xhtml">Next<br/><span>Enabling Assertions</span></a></div></div></div><div id="sidecolumn">
  	  	<div><h3>Useful Links</h3><div class="sidecolumnSubTitleLine"/>
  			<a href="http://java.sun.com/javase/6/docs/technotes/guides/language/assert.html">Programming with Assertions (Java Documentation)</a><br/>
  			<a href="http://en.wikipedia.org/wiki/Assertion_(computing)">Assertions on Wikipedia</a><br/>
  		</div>
  </div></div></div><div id="footer"><div id="footer-content"><div id="footer-left"><div class="footerLine"><a href="/">Home</a> - <a href="/about">About Jarfiller</a> - <a href="/imprint.xhtml">Imprint</a></div><div class="footerLine">Please send feedback and corrections to <a href="mailto:tim@tjansen.de">tim@<span style="display: none">got you</span>tjansen.de</a>.</div><div class="footerLine"><a href="http://www.twitter.com/timjansen">Follow</a> me on Twitter.</div><div class="copyrightLine">Â© 2010 Tim Jansen; content licensed under <a href="http://creativecommons.org/licenses/by/3.0/us/">cc-by</a>; example source code is public domain
				</div></div><div id="footer-right"><a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/"><img alt="Creative Commons License" style="border-width:0" src="../../images/ext/cc-by-88x31.png"/></a></div></div></div><div id="navbar" onclick="return navToggle();" onmouseover="document.getElementById('navbar').className='mouseover';" onmouseout="document.getElementById('navbar').className='';"/><div id="navcontainer"><div id="navlinks"><div id="navclosebar"><a href="#" onclick="return navClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div><div id="navpositionbar" class="navpositionbar"/><h2 id="navtitle">Java Basics: Assert</h2><a id="nav_overview" class="navseclink" href="overview.xhtml#overview">Overview</a><a id="nav_intro" class="navsublink" href="overview.xhtml#intro">Intro</a><a id="nav_usecases" class="navsublink" href="overview.xhtml#usecases">When to use assert?</a><a id="nav_requirements" class="navsublink" href="overview.xhtml#requirements">Requirements</a><a id="nav_assertsyntax" class="navseclink" href="#assertsyntax" onclick="if (event.button == 0) return goTo('#assertsyntax', true); else return true;">Assert Syntax</a><a id="nav_syntax" class="navsublink" href="#syntax" onclick="if (event.button == 0) return goTo('#syntax', true); else return true;">Syntax</a><a id="nav_syntaxexample" class="navsublink" href="#syntaxexample" onclick="if (event.button == 0) return goTo('#syntaxexample', true); else return true;">Examples</a><a id="nav_sizeeffects" class="navsublink" href="#sizeeffects" onclick="if (event.button == 0) return goTo('#sizeeffects', true); else return true;">Side-effects</a><a id="nav_enabling" class="navseclink" href="enabling.xhtml#enabling">Enabling Assertions</a><a id="nav_runtime" class="navsublink" href="enabling.xhtml#runtime">Runtime</a></div></div><div id="popups"><div id="pp-d37152e163" class="tooltip">In order to execute assertion's, invoke the <span class="idf">java</span> launcher with <em>the <span class="idf">-ea</span> option</em>. See below for more details</div><div id="pp-d37152e241" class="tooltip">Squares of numbers are always positive, and thus their sum is always positive. The assertions just verifies this (simple) assumption. It is important that the value of <span class="idf">squareSum</span> is always positive, as <span class="idf">Math.sqrt</span> does not return a meaningful result for negative numbers.</div><div id="pp-d37152e269" class="tooltip">If an empty string is given to the <span class="idf">split</span> method below, it returns an array containing an empty string. As the code in the <span class="idf">for</span> loop can not handle this, this case will be handled here by just returning the input to the caller.</div><div id="pp-d37152e291" class="tooltip">The <span class="idf">split</span> method splits a string into an array of substrings which were separated by the given regular expression. <span class="idf">"\\s+"</span> is a regular expression that represents one or more whitespace characters (such as space or tab). The <span class="idf">trim</span> method removes all whitespace at the front and end of the string, because otherwise <span class="idf">split</span> would return an empty string for them. The result is, that the <span class="idf">for</span> loop runs for each word of the sentence</div><div id="pp-d37152e315" class="tooltip">The following statement depends on <span class="idf">word</span> having at least one character. By using the right regular expression in the <span class="idf">split</span> method and trimming the string, the method makes sure that all <span class="idf">word</span> processed in the <span class="idf">for</span> loop are not empty. The assertion documents this and also allows testing this assumption.</div><div id="pp-d37152e393" class="tooltip">Another typical use of assertions is to use them with <span class="idf">false</span> argument at the end of a complex <span class="idf">if</span> statement (or <span class="idf">switch</span>/<span class="idf">case</span> statement) to make sure that no case has been forgotten. The <span class="idf">assert false</span> will always fail, and thus it is written into lines which should never be reached.</div><div id="pp-d37152e415" class="tooltip">The <span class="idf">assert</span> in the previous line will only be checked if assertions have been turned on in the Java runtime. The <span class="idf">return</span> will be executed when assertions have been turned off. In real-life, this should never happen - provided that you thoroughly tested your program with enabled assertions.</div><div id="ttCloseBar" class="closeBar"><a href="#" onclick="return tlClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div><div id="topicCloseBar" class="closeBar"><a href="#" onclick="return tpcClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div></div></body></html>