<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/1999/xhtml" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:page="http://tjansen.de/refPage" xmlns:i="http://tjansen.de/internal"><head><title>Java Basics: Regular Expressions</title><meta http-equiv="X-UA-Compatible" content="chrome=1"/><meta http-equiv="content-language" content="en"/><link rel="shortcut icon" href="../../images/favicon.png" type="image/png"/><link rel="stylesheet" type="text/css" href="../../style/style.css"/><script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-6791190-2']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
})();
</script><script type="text/javascript" src="../../js/all.js"/></head><body id="body"><div id="visibleContent"><div id="top"><a href="/"><img src="../../images/titlebar.png" alt="Jarfiller.com"/></a></div><div id="titleArea"><h1>Java Basics: Regular Expressions</h1><p id="titleIntro">Learn how to read and use regular expressions in Java</p></div><div id="main"><div id="bodycolumn"><div id="options">Options: <a href="#" onclick="return navToggle();">Table of Content</a>, <a href="overview.xhtml">Multi-Page Version</a></div><h2 id="sec_overview" class="sectionHead"><a name="overview">Overview</a></h2><div class="subSecRow1" id="sec_intro"><div class="subSecHead" id="sechd_intro"><a class="multipageHeadLink" href="overview.xhtml#intro" name="intro">Intro</a></div><div class="subSecContent" id="seccnt_intro"><p class="subSecExplanation"> Regular expressions allow you to find patterns in strings and work with them. They are an invaluable tool and allow a simpler and faster implementation for many non-trivial tasks on strings. </p></div></div><div id="colla_usecases" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="overview.xhtml#usecases" name="usecases">Use cases</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('usecases');">When to use regular expressions?</a></div></div></div><div class="subSecRow2" id="sec_usecases" style="display: none"><div class="subSecHead" id="sechd_usecases"><a class="multipageHeadLink" href="overview.xhtml#usecases" name="usecases">Use cases</a></div><div class="subSecContent" id="seccnt_usecases"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('usecases');">When to use regular expressions?</a></div><p class="subSecExplanation">Use regular expressions when..</p><ul class="subSecList"><li>you want to <em>parse a string</em></li><li>you want to <em>replace patterns</em> in a string</li></ul><p class="subSecExplanation">Do <em>not</em> use regular expressions when..</p><ul class="subSecList"><li>your input is very complex. For example, don't try to parse a string containing XML or HTML with regular expressions (you will almost always fail to consider all cases), but use an appropriate library instead.</li><li>you need to squeeze the last bit of performance out of your code and you are willing to put a lot of effort into this (simple implementations will usually not beat a pre-compiled regular expression)</li></ul></div></div><div class="subSecRow1" id="sec_requirements"><div class="subSecHead" id="sechd_requirements"><a class="multipageHeadLink" href="overview.xhtml#requirements" name="requirements">Requirements</a></div><div class="subSecContent" id="seccnt_requirements"><p class="subSecExplanation">Java supports regular expressions <em>since version 1.4</em>.</p></div></div><div class="subSecRow2" id="sec_assert"><div class="subSecHead" id="sechd_assert"><a class="multipageHeadLink" href="overview.xhtml#assert" name="assert">Assert</a></div><div class="subSecContent" id="seccnt_assert"><p class="subSecExplanation">This tutorial uses the <span class="idf">assert</span> statement to explain the topic. If you don't fully understand <span class="idf">assert</span> yet, read <a href="/javabasics/assert/javabasics-assert.xhtml">Java Basics: Assert</a> first.</p></div></div><h2 id="sec_regularexpressions" class="sectionHead"><a name="regularexpressions">Regular Expressions</a></h2><div class="subSecRow1" id="sec_plainstrings"><div class="subSecHead" id="sechd_plainstrings"><a class="multipageHeadLink" href="regularexpressions.xhtml#plainstrings" name="plainstrings">Plain Strings</a><br/>(<a href="#" id="tl-d2528e159" class="dottedTooltip" onclick="return tlClick('tl-d2528e159','pp-d2528e164');" onmouseover="return tlOver('tl-d2528e159','pp-d2528e164');" onmouseout="return tlOut('tl-d2528e159','pp-d2528e164');">more</a>)
		</div><div class="subSecContent" id="seccnt_plainstrings"><p class="subSecExplanation">Regular expressions are strings which <em>may contain certain control sequences</em>. However, they don't have to. The regular expressions in the first examples don't have any control sequences, and thus <em>they match only if they are equal to the input string</em>.</p><pre class="subSecCode"><code>String s = "foo bar bar";                                   <span class="cmt">// input string</span>

assert s.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#matches(java.lang.String)" class="javadoc">matches</a>("<em>foo bar bar</em>");                            <span class="cmt">// regular expression in <em>red</em> (<a href="#" id="tl-d2528e198" class="dottedTooltip" onclick="return tlClick('tl-d2528e198','pp-d2528e198');" onmouseover="return tlOver('tl-d2528e198','pp-d2528e198');" onmouseout="return tlOut('tl-d2528e198','pp-d2528e198');">more</a>)</span>
assert <em>!</em>s.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#matches(java.lang.String)" class="javadoc">matches</a>("dog");                                   <span class="cmt">// not equal, <em>no match</em> (<a href="#" id="tl-d2528e214" class="dottedTooltip" onclick="return tlClick('tl-d2528e214','pp-d2528e214');" onmouseover="return tlOver('tl-d2528e214','pp-d2528e214');" onmouseout="return tlOut('tl-d2528e214','pp-d2528e214');">more</a>)</span>

assert s.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#replaceFirst(java.lang.String, java.lang.String)" class="javadoc">replaceFirst</a>(<em>"foo"</em>, "bar").equals("bar bar bar");  <span class="cmt">// replace first"foo"</span>
assert s.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#replaceFirst(java.lang.String, java.lang.String)" class="javadoc">replaceFirst</a>(<em>"bar"</em>, "dog").equals("foo dog <em>bar</em>");  <span class="cmt">// replace first "bar"</span>

assert s.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#replaceAll(java.lang.String, java.lang.String)" class="javadoc">replaceAll</a>(<em>"foo"</em>, "bar").equals("bar bar bar");    <span class="cmt">// replace all "foo"</span>
assert s.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#replaceAll(java.lang.String, java.lang.String)" class="javadoc">replaceAll</a>(<em>"bar"</em>, "dog").equals("foo dog <em>dog</em>");    <span class="cmt">// replace all "bar"</span>
</code></pre></div></div><div class="subSecRow2" id="sec_groupsandor"><div class="subSecHead" id="sechd_groupsandor"><a class="multipageHeadLink" href="regularexpressions.xhtml#groupsandor" name="groupsandor">Groups and Or</a><br/>(<a href="#" id="tl-d2528e274" class="dottedTooltip" onclick="return tlClick('tl-d2528e274','pp-d2528e279');" onmouseover="return tlOver('tl-d2528e274','pp-d2528e279');" onmouseout="return tlOut('tl-d2528e274','pp-d2528e279');">more</a>)
		</div><div class="subSecContent" id="seccnt_groupsandor"><pre class="subSecCode"><code>String a = "abc";
String b = "xyz";
assert a.matches("abc<em>|</em>xyz");       <span class="cmt">// "|" means <em>or</em> (<a href="#" id="tl-d2528e302" class="dottedTooltip" onclick="return tlClick('tl-d2528e302','pp-d2528e302');" onmouseover="return tlOver('tl-d2528e302','pp-d2528e302');" onmouseout="return tlOut('tl-d2528e302','pp-d2528e302');">more</a>)</span>
assert b.matches("abc<em>|</em>xyz");       <span class="cmt">// matches "abc" and "xyz"</span>
assert <em>!</em>"123".matches("abc|xyz");  <span class="cmt">// "123" does <em>not match</em></span>

assert a.replaceFirst("b|z", "O").equals("aOc");
assert b.replaceFirst("b|z", "O").equals("xyO");
assert a.replaceAll("a|b|c", "O").equals("OOO");

assert a.matches("<em>(</em>a<em>)</em><em>(</em>b<em>)</em><em>(</em>c<em>)</em>");     <span class="cmt">// "()" defines a <em>capturing group</em> (<a href="#" id="tl-d2528e361" class="dottedTooltip" onclick="return tlClick('tl-d2528e361','pp-d2528e361');" onmouseover="return tlOver('tl-d2528e361','pp-d2528e361');" onmouseout="return tlOut('tl-d2528e361','pp-d2528e361');">more</a>)</span>
assert a.matches("<em>((</em>a<em>)</em>bc<em>)</em>");       <span class="cmt">// nested groups are possible</span>

String c = "cold";
assert c.matches("<em>(b|c)</em>old");      <span class="cmt">// <em>or</em> and <em>groups</em> combined</span>
assert c.matches("ice|((b|c)ol(d|t))|hot");
assert c.replaceAll("o(d|l)", "XX").equals("cXXd");

String d = "(|)";
assert d.matches("<em>\\(\\|\\)</em>");     <span class="cmt">// escaping (<a href="#" id="tl-d2528e416" class="dottedTooltip" onclick="return tlClick('tl-d2528e416','pp-d2528e416');" onmouseover="return tlOver('tl-d2528e416','pp-d2528e416');" onmouseout="return tlOut('tl-d2528e416','pp-d2528e416');">more</a>)</span>
</code></pre></div></div><div class="subSecRow1" id="sec_characterclasses"><div class="subSecHead" id="sechd_characterclasses"><a class="multipageHeadLink" href="regularexpressions.xhtml#characterclasses" name="characterclasses">Character Classes</a><br/>(<a href="#" id="tl-d2528e427" class="dottedTooltip" onclick="return tlClick('tl-d2528e427','pp-d2528e432');" onmouseover="return tlOver('tl-d2528e427','pp-d2528e432');" onmouseout="return tlOut('tl-d2528e427','pp-d2528e432');">more</a>)
		</div><div class="subSecContent" id="seccnt_characterclasses"><pre class="subSecCode"><code>String a = "abc";
assert a.matches("a<em>[bgh]</em>c");             <span class="cmt">// "[]" defines a <em>character class</em>(<a href="#" id="tl-d2528e449" class="dottedTooltip" onclick="return tlClick('tl-d2528e449','pp-d2528e449');" onmouseover="return tlOver('tl-d2528e449','pp-d2528e449');" onmouseout="return tlOut('tl-d2528e449','pp-d2528e449');">more</a>)</span>
assert a.replaceAll("<em>[abc]</em>", "X").equals("XXX");

assert a.matches("[a<em>-</em>z][a<em>-</em>z][a<em>-</em>z]");     <span class="cmt">// "-" defines a <em>character range</em></span>
assert a.replaceAll("<em>[b-f]</em>", "X").equals("aXX");
String b = "I love Java";
assert b.replaceAll("<em>[a-zA-Z]</em>", "X").equals("X XXXX XXXX");
assert b.replaceAll("<em>[oa-cJ]</em>", "X").equals("I lXve XXvX");

assert a.matches("[<em>[^x-z][^k][^st-w]</em>");  <span class="cmt">// "^" means "all other characters match" (<a href="#" id="tl-d2528e510" class="dottedTooltip" onclick="return tlClick('tl-d2528e510','pp-d2528e510');" onmouseover="return tlOver('tl-d2528e510','pp-d2528e510');" onmouseout="return tlOut('tl-d2528e510','pp-d2528e510');">more</a>)</span>
assert a.replaceAll("[<em>[^b]</em>", "X").equals("XbX");

assert "x".matches("<em>.</em>");                 <span class="cmt">// "." matches <em>any character</em> except newline (<a href="#" id="tl-d2528e532" class="dottedTooltip" onclick="return tlClick('tl-d2528e532','pp-d2528e532');" onmouseover="return tlOver('tl-d2528e532','pp-d2528e532');" onmouseout="return tlOut('tl-d2528e532','pp-d2528e532');">more</a>)</span>
assert a.matches("<em>...</em>");
assert b.matches("I.l.v. .a.a");
assert b.replaceAll(".", "X").equals("XXXXXXXXXXX");

assert a.matches("<em>\\w</em>\\w\\w");           <span class="cmt">// "\\w" is short for "[a-zA-Z_0-9]" (<a href="#" id="tl-d2528e563" class="dottedTooltip" onclick="return tlClick('tl-d2528e563','pp-d2528e563');" onmouseover="return tlOver('tl-d2528e563','pp-d2528e563');" onmouseout="return tlOut('tl-d2528e563','pp-d2528e563');">more</a>)</span>
assert b.replaceAll("\\w", "X").equals("X XXXX XXXX");
assert " ".matches("<em>\\s</em>");               <span class="cmt">// "\\s" matches <em>whitespace</em> ("[ \t\n\x0B\f\r]") (<a href="#" id="tl-d2528e579" class="dottedTooltip" onclick="return tlClick('tl-d2528e579','pp-d2528e579');" onmouseover="return tlOver('tl-d2528e579','pp-d2528e579');" onmouseout="return tlOut('tl-d2528e579','pp-d2528e579');">more</a>)</span>
assert b.replaceAll("\\s", "X").equals("IXloveXJava");
assert "123".matches("<em>\\d</em>\\d\\d");       <span class="cmt">// "\\d" is short for "[0-9]" (<a href="#" id="tl-d2528e592" class="dottedTooltip" onclick="return tlClick('tl-d2528e592','pp-d2528e592');" onmouseover="return tlOver('tl-d2528e592','pp-d2528e592');" onmouseout="return tlOut('tl-d2528e592','pp-d2528e592');">more</a>)</span>
assert <em>!</em>a.matches("<em>\\W</em>\\W\\W");          <span class="cmt">// "\\W" inverts "\\w", same as "[^a-zA-Z_0-9]" (<a href="#" id="tl-d2528e606" class="dottedTooltip" onclick="return tlClick('tl-d2528e606','pp-d2528e606');" onmouseover="return tlOver('tl-d2528e606','pp-d2528e606');" onmouseout="return tlOut('tl-d2528e606','pp-d2528e606');">more</a>)</span>
assert b.replaceAll("<em>\\S</em>", "X").equals("X XXXX XXXX");
assert "a1".replaceAll("<em>\\D</em>", "X").equals("X1");
</code></pre></div></div><div class="subSecRow2" id="sec_quantifiers"><div class="subSecHead" id="sechd_quantifiers"><a class="multipageHeadLink" href="regularexpressions.xhtml#quantifiers" name="quantifiers">Quantifiers</a><br/>(<a href="#" id="tl-d2528e623" class="dottedTooltip" onclick="return tlClick('tl-d2528e623','pp-d2528e628');" onmouseover="return tlOver('tl-d2528e623','pp-d2528e628');" onmouseout="return tlOut('tl-d2528e623','pp-d2528e628');">more</a>)
		</div><div class="subSecContent" id="seccnt_quantifiers"><pre class="subSecCode"><code>String a = "b ba baa baaa";
assert a.replaceAll("b<em>a*</em>", "X").equals("X X X X");        <span class="cmt">// "*" means "<em>zero or more</em>" (<a href="#" id="tl-d2528e646" class="dottedTooltip" onclick="return tlClick('tl-d2528e646','pp-d2528e646');" onmouseover="return tlOver('tl-d2528e646','pp-d2528e646');" onmouseout="return tlOut('tl-d2528e646','pp-d2528e646');">more</a>)</span>
assert a.matches("ba* ba* ba* ba*");
assert a.replaceAll("b<em>(aa)*</em>, "X").equals("X ba X baaa");  <span class="cmt">// apply "*" to group "aa"</span>
assert a.replaceAll("b<em>[a-z]*</em>", "X").equals("X X X X");
assert a.matches("<em>(ba* *)*</em>");                             <span class="cmt">// complex pattern (<a href="#" id="tl-d2528e674" class="dottedTooltip" onclick="return tlClick('tl-d2528e674','pp-d2528e674');" onmouseover="return tlOver('tl-d2528e674','pp-d2528e674');" onmouseout="return tlOut('tl-d2528e674','pp-d2528e674');">more</a>)</span>

assert a.replaceAll("b<em>a+</em>", "X").equals("b X X X");        <span class="cmt">// "+" means "<em>one or more</em>" (<a href="#" id="tl-d2528e689" class="dottedTooltip" onclick="return tlClick('tl-d2528e689','pp-d2528e689');" onmouseover="return tlOver('tl-d2528e689','pp-d2528e689');" onmouseout="return tlOut('tl-d2528e689','pp-d2528e689');">more</a>)</span>
assert a.matches("b ba+ ba+ ba+");
assert a.replaceAll("b<em>(aa)+</em>, "X").equals("b ba X baaa");  <span class="cmt">// apply "+" to group "aa"</span>
assert a.replaceAll("b<em>[a-z]+</em>", "X").equals("b X X X");
assert a.matches("<em>b( ba+)+</em>");                             <span class="cmt">// complex pattern (<a href="#" id="tl-d2528e717" class="dottedTooltip" onclick="return tlClick('tl-d2528e717','pp-d2528e717');" onmouseover="return tlOver('tl-d2528e717','pp-d2528e717');" onmouseout="return tlOut('tl-d2528e717','pp-d2528e717');">more</a>)</span>

assert a.replaceAll("b<em>a?</em>", "X").equals("X X Xa Xaa");     <span class="cmt">// "?" means <em>optional</em> (0 or 1) (<a href="#" id="tl-d2528e732" class="dottedTooltip" onclick="return tlClick('tl-d2528e732','pp-d2528e732');" onmouseover="return tlOver('tl-d2528e732','pp-d2528e732');" onmouseout="return tlOut('tl-d2528e732','pp-d2528e732');">more</a>)</span>
assert a.replaceAll("b<em>(aa)?</em>, "X").equals("X ba X Xa");    <span class="cmt">// apply "?" to group "aa"</span>
assert a.matches("<em>(ba* ?)+</em>");                             <span class="cmt">// complex pattern</span>

assert a.replaceAll("b<em>a{2}</em>", "X").equals("b ba X baaa");  <span class="cmt">// "{2}" means "twice" (<a href="#" id="tl-d2528e761" class="dottedTooltip" onclick="return tlClick('tl-d2528e761','pp-d2528e761');" onmouseover="return tlOver('tl-d2528e761','pp-d2528e761');" onmouseout="return tlOut('tl-d2528e761','pp-d2528e761');">more</a>)</span>
assert a.replaceAll("b<em>a{2,3}</em>", "X").equals("b ba X X");   <span class="cmt">// "{2,3}" means "2-3 times" (<a href="#" id="tl-d2528e771" class="dottedTooltip" onclick="return tlClick('tl-d2528e771','pp-d2528e771');" onmouseover="return tlOver('tl-d2528e771','pp-d2528e771');" onmouseout="return tlOut('tl-d2528e771','pp-d2528e771');">more</a>)</span>
assert a.replaceAll("b<em>a{2,}</em>", "X").equals("b ba X X");    <span class="cmt">// "{2,}" means "at least twice" (<a href="#" id="tl-d2528e781" class="dottedTooltip" onclick="return tlClick('tl-d2528e781','pp-d2528e781');" onmouseover="return tlOver('tl-d2528e781','pp-d2528e781');" onmouseout="return tlOut('tl-d2528e781','pp-d2528e781');">more</a>)</span>
</code></pre></div></div><div class="subSecRow1" id="sec_anchors"><div class="subSecHead" id="sechd_anchors"><a class="multipageHeadLink" href="regularexpressions.xhtml#anchors" name="anchors">Anchors</a><br/>(<a href="#" id="tl-d2528e787" class="dottedTooltip" onclick="return tlClick('tl-d2528e787','pp-d2528e792');" onmouseover="return tlOver('tl-d2528e787','pp-d2528e792');" onmouseout="return tlOut('tl-d2528e787','pp-d2528e792');">more</a>)
		</div><div class="subSecContent" id="seccnt_anchors"><pre class="subSecCode"><code>String a = "aaa";
String b = "abc aca";

assert a.replaceAll("<em>^</em>a", "X").equals("Xaa");        <span class="cmt">// "^" means "<em>beginning of input/line</em>" (<a href="#" id="tl-d2528e815" class="dottedTooltip" onclick="return tlClick('tl-d2528e815','pp-d2528e815');" onmouseover="return tlOver('tl-d2528e815','pp-d2528e815');" onmouseout="return tlOut('tl-d2528e815','pp-d2528e815');">more</a>)</span>
assert a.matches("<em>^</em>aaa");
assert <em>!</em>b.matches("<em>^aca</em>");

assert a.replaceAll("a<em>$</em>", "X").equals("aaa");        <span class="cmt">// "$" means "<em>end of input/line</em>" (<a href="#" id="tl-d2528e852" class="dottedTooltip" onclick="return tlClick('tl-d2528e852','pp-d2528e852');" onmouseover="return tlOver('tl-d2528e852','pp-d2528e852');" onmouseout="return tlOut('tl-d2528e852','pp-d2528e852');">more</a>)</span>
assert a.matches("<em>^</em>aaa<em>$</em>");
assert <em>!</em>b.matches("<em>abc$</em>");

assert b.replaceAll("<em>\\b</em>a", "X").equals("Xbc Xc<em>a</em>");  <span class="cmt">// "\b" means "at <em>word boundary</em>" (<a href="#" id="tl-d2528e895" class="dottedTooltip" onclick="return tlClick('tl-d2528e895','pp-d2528e895');" onmouseover="return tlOver('tl-d2528e895','pp-d2528e895');" onmouseout="return tlOut('tl-d2528e895','pp-d2528e895');">more</a>)</span>
assert b.replaceAll("<em>\\B</em>a", "X").equals("abc ac<em>X</em>");  <span class="cmt">// "\B" means "not at word boundary" (<a href="#" id="tl-d2528e908" class="dottedTooltip" onclick="return tlClick('tl-d2528e908','pp-d2528e908');" onmouseover="return tlOver('tl-d2528e908','pp-d2528e908');" onmouseout="return tlOut('tl-d2528e908','pp-d2528e908');">more</a>)</span>
</code></pre></div></div><div class="subSecRow2" id="sec_flags"><div class="subSecHead" id="sechd_flags"><a class="multipageHeadLink" href="regularexpressions.xhtml#flags" name="flags">Flags</a><br/>(<a href="#" id="tl-d2528e913" class="dottedTooltip" onclick="return tlClick('tl-d2528e913','pp-d2528e918');" onmouseover="return tlOver('tl-d2528e913','pp-d2528e918');" onmouseout="return tlOut('tl-d2528e913','pp-d2528e918');">more</a>)
		</div><div class="subSecContent" id="seccnt_flags"><pre class="subSecCode"><code>String a = "aBcDeF";
String b = "A\nB\nC";
assert a.replaceAll("<em>(?i)</em>[a-f]", "X").equals("XXXXXX");  <span class="cmt">// <span class="idf">(?<em>i</em>)</span> means <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#CASE_INSENSITIVE" class="javadoc"><em>CASE_INSENSITIVE</em></a> (<a href="#" id="tl-d2528e954" class="dottedTooltip" onclick="return tlClick('tl-d2528e954','pp-d2528e954');" onmouseover="return tlOver('tl-d2528e954','pp-d2528e954');" onmouseout="return tlOut('tl-d2528e954','pp-d2528e954');">more</a>)</span>
assert b.matches("<em>(?s)</em>.+");                              <span class="cmt">// <span class="idf">(?<em>s</em>)</span> enables <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#DOTALL" class="javadoc"><em>DOTALL</em></a> mode (<a href="#" id="tl-d2528e979" class="dottedTooltip" onclick="return tlClick('tl-d2528e979','pp-d2528e1958');" onmouseover="return tlOver('tl-d2528e979','pp-d2528e1958');" onmouseout="return tlOut('tl-d2528e979','pp-d2528e1958');">more</a>)</span>
assert b.matches("<em>(?is)</em>[a-z].[a-z].[a-z]");              <span class="cmt">// <span class="idf">(?<em>is</em>)</span> <em>combines 'i' and 's'</em> (<a href="#" id="tl-d2528e996" class="dottedTooltip" onclick="return tlClick('tl-d2528e996','pp-d2528e996');" onmouseover="return tlOver('tl-d2528e996','pp-d2528e996');" onmouseout="return tlOut('tl-d2528e996','pp-d2528e996');">more</a>)</span>
assert !b.matches("<em>(?is)</em>[a-z].[a-z].<em>(?-i)</em>[a-z]");        <span class="cmt">// <span class="idf">(?<em>-i</em>)</span> <em>disables</em> the <span class="idf">i</span> flag (<a href="#" id="tl-d2528e1024" class="dottedTooltip" onclick="return tlClick('tl-d2528e1024','pp-d2528e1024');" onmouseover="return tlOver('tl-d2528e1024','pp-d2528e1024');" onmouseout="return tlOut('tl-d2528e1024','pp-d2528e1024');">more</a>)</span>
assert b.replaceAll("<em>(?m)</em>^\\w", "X").equals("X\nX\nX");  <span class="cmt">// (?<em>m</em>) enables <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#MULTILINE" class="javadoc"><em>MUTLILINE</em></a> mode (<a href="#" id="tl-d2528e1050" class="dottedTooltip" onclick="return tlClick('tl-d2528e1050','pp-d2528e1898');" onmouseover="return tlOver('tl-d2528e1050','pp-d2528e1898');" onmouseout="return tlOut('tl-d2528e1050','pp-d2528e1898');">more</a>)</span>
</code></pre></div></div><div class="subSecRow1" id="sec_backreferences"><div class="subSecHead" id="sechd_backreferences"><a class="multipageHeadLink" href="regularexpressions.xhtml#backreferences" name="backreferences">Back references</a><br/>(<a href="#" id="tl-d2528e1054" class="dottedTooltip" onclick="return tlClick('tl-d2528e1054','pp-d2528e1059');" onmouseover="return tlOver('tl-d2528e1054','pp-d2528e1059');" onmouseout="return tlOut('tl-d2528e1054','pp-d2528e1059');">more</a>)
		</div><div class="subSecContent" id="seccnt_backreferences"><pre class="subSecCode"><code>String a = "101 102 201 202";
assert a.replaceAll("<em>(</em>\\d<em>)</em>0<em>\\1</em>", "X").equals("X 102 201 X");  <span class="cmt">// "\1" is a <em>back reference</em> (<a href="#" id="tl-d2528e1083" class="dottedTooltip" onclick="return tlClick('tl-d2528e1083','pp-d2528e1083');" onmouseover="return tlOver('tl-d2528e1083','pp-d2528e1083');" onmouseout="return tlOut('tl-d2528e1083','pp-d2528e1083');">more</a>)</span>

String b = "acbba";
assert b.matches("([a-z])<em>(?:</em>b|c<em>)</em>([a-z])\\2\\1");              <span class="cmt">// <em>non-capturing group</em> (<a href="#" id="tl-d2528e1103" class="dottedTooltip" onclick="return tlClick('tl-d2528e1103','pp-d2528e1103');" onmouseover="return tlOver('tl-d2528e1103','pp-d2528e1103');" onmouseout="return tlOut('tl-d2528e1103','pp-d2528e1103');">more</a>)</span>
</code></pre></div></div><h2 id="sec_using" class="sectionHead"><a name="using">Using Regular Expressions</a></h2><div class="subSecRow2" id="sec_simplematching"><div class="subSecHead" id="sechd_simplematching"><a class="multipageHeadLink" href="using.xhtml#simplematching" name="simplematching">Simple Matching</a><br/>(<a href="#" id="tl-d2528e1117" class="dottedTooltip" onclick="return tlClick('tl-d2528e1117','pp-d2528e1122');" onmouseover="return tlOver('tl-d2528e1117','pp-d2528e1122');" onmouseout="return tlOut('tl-d2528e1117','pp-d2528e1122');">more</a>)
		</div><div class="subSecContent" id="seccnt_simplematching"><pre class="subSecCode"><code>String a = "I love Java";
assert a.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#matches(java.lang.String)" class="javadoc"><em>matches</em></a>("I love Java");  <span class="cmt">// match whole string</span>
assert a.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#matches(java.lang.String)" class="javadoc">matches</a>("<em>.*love.*</em>");     <span class="cmt">// contains 'love'? (<a href="#" id="tl-d2528e1155" class="dottedTooltip" onclick="return tlClick('tl-d2528e1155','pp-d2528e1155');" onmouseover="return tlOver('tl-d2528e1155','pp-d2528e1155');" onmouseout="return tlOut('tl-d2528e1155','pp-d2528e1155');">more</a>)</span>

<span class="cmt">// Escaping a search string (<a href="#" id="tl-d2528e1163" class="dottedTooltip" onclick="return tlClick('tl-d2528e1163','pp-d2528e1163');" onmouseover="return tlOver('tl-d2528e1163','pp-d2528e1163');" onmouseout="return tlOut('tl-d2528e1163','pp-d2528e1163');">more</a>)</span>
String anyString = <span class="abstract">...</span>;           <span class="cmt">// works with any string</span>
boolean containsString = a.matches(".*" + <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html" class="javadoc">Matcher</a>.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#quoteReplacement(java.lang.String)" class="javadoc"><em>quoteReplacement</em></a>(anyString) + ".*");
</code></pre></div></div><div class="subSecRow1" id="sec_finding"><div class="subSecHead" id="sechd_finding"><a class="multipageHeadLink" href="using.xhtml#finding" name="finding">Finding and Parsing</a><br/>(<a href="#" id="tl-d2528e1190" class="dottedTooltip" onclick="return tlClick('tl-d2528e1190','pp-d2528e1195');" onmouseover="return tlOver('tl-d2528e1190','pp-d2528e1195');" onmouseout="return tlOut('tl-d2528e1190','pp-d2528e1195');">more</a>)
		</div><div class="subSecContent" id="seccnt_finding"><pre class="subSecCode"><code><span class="cmt">// Find all numbers in a string:</span>
String a = "6 times 7 is 42";
<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc"><em>Pattern</em></a> pattern = <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a>.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#compile(java.lang.String)" class="javadoc"><em>compile</em></a>("[0-9]+");             <span class="cmt">// compile pattern (<a href="#" id="tl-d2528e1227" class="dottedTooltip" onclick="return tlClick('tl-d2528e1227','pp-d2528e1227');" onmouseover="return tlOver('tl-d2528e1227','pp-d2528e1227');" onmouseout="return tlOut('tl-d2528e1227','pp-d2528e1227');">more</a>)</span>
<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html" class="javadoc"><em>Matcher</em></a> m = pattern.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#matcher(java.lang.CharSequence)" class="javadoc"><em>matcher</em></a>(a);                          <span class="cmt">// create <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html" class="javadoc">Matcher</a> (<a href="#" id="tl-d2528e1249" class="dottedTooltip" onclick="return tlClick('tl-d2528e1249','pp-d2528e1249');" onmouseover="return tlOver('tl-d2528e1249','pp-d2528e1249');" onmouseout="return tlOut('tl-d2528e1249','pp-d2528e1249');">more</a>)</span>
while (m.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#find()" class="javadoc"><em>find</em></a>()) {                                       <span class="cmt">// loop through all matches (<a href="#" id="tl-d2528e1266" class="dottedTooltip" onclick="return tlClick('tl-d2528e1266','pp-d2528e1266');" onmouseover="return tlOver('tl-d2528e1266','pp-d2528e1266');" onmouseout="return tlOut('tl-d2528e1266','pp-d2528e1266');">more</a>)</span>
    System.out.println(m.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#group()" class="javadoc"><em>group</em></a>() +                       <span class="cmt">// print the match/number</span>
                 " at "+ m.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#start()" class="javadoc"><em>start</em></a>() + " - " + m.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#end()" class="javadoc"><em>end</em></a>())    <span class="cmt">// print position (<a href="#" id="tl-d2528e1303" class="dottedTooltip" onclick="return tlClick('tl-d2528e1303','pp-d2528e1303');" onmouseover="return tlOver('tl-d2528e1303','pp-d2528e1303');" onmouseout="return tlOut('tl-d2528e1303','pp-d2528e1303');">more</a>)</span>
}

<span class="cmt">// Parse an email address:</span>
String b = "tom@example.org";
<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a> emailPtrn = <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a>.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#compile(java.lang.String)" class="javadoc">compile</a>("<em>([^@]+)</em>@<em>([^@]+)</em>");  <span class="cmt">// Pattern with capturing groups (<a href="#" id="tl-d2528e1343" class="dottedTooltip" onclick="return tlClick('tl-d2528e1343','pp-d2528e1343');" onmouseover="return tlOver('tl-d2528e1343','pp-d2528e1343');" onmouseout="return tlOut('tl-d2528e1343','pp-d2528e1343');">more</a>)</span>
<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html" class="javadoc">Matcher</a> em = emailPtrn.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#matcher(java.lang.CharSequence)" class="javadoc">matcher</a>(b)
if (em.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#matches(java.lang.String)" class="javadoc"><em>matches</em></a>(b));                                      <span class="cmt">// match whole string (<a href="#" id="tl-d2528e1373" class="dottedTooltip" onclick="return tlClick('tl-d2528e1373','pp-d2528e1373');" onmouseover="return tlOver('tl-d2528e1373','pp-d2528e1373');" onmouseout="return tlOut('tl-d2528e1373','pp-d2528e1373');">more</a>)</span>
    System.out.println("Name=" + em.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#group(int)" class="javadoc"><em>group</em></a>(1) + " Host=" + em.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#group(int)" class="javadoc"><em>group</em></a>(2));
</code></pre></div></div><div class="subSecRow2" id="sec_replacing"><div class="subSecHead" id="sechd_replacing"><a class="multipageHeadLink" href="using.xhtml#replacing" name="replacing">Simple Replacing</a><br/>(<a href="#" id="tl-d2528e1401" class="dottedTooltip" onclick="return tlClick('tl-d2528e1401','pp-d2528e1406');" onmouseover="return tlOver('tl-d2528e1401','pp-d2528e1406');" onmouseout="return tlOut('tl-d2528e1401','pp-d2528e1406');">more</a>)
		</div><div class="subSecContent" id="seccnt_replacing"><pre class="subSecCode"><code>String a = "r2d2";
assert a.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#replaceAll(java.lang.String, java.lang.String)" class="javadoc"><em>replaceAll</em></a>("[a-z]", "00").equals("002002");
assert a.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#replaceFirst(java.lang.String, java.lang.String)" class="javadoc"><em>replaceFirst</em></a>("[a-z]", "00").equals("002<em>d</em>2");

<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc"><em>Pattern</em></a> p = <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a>.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#compile(java.lang.String)" class="javadoc"><em>compile</em></a>("[a-z]");  <span class="cmt">// with pre-compiled Pattern (<a href="#" id="tl-d2528e1459" class="dottedTooltip" onclick="return tlClick('tl-d2528e1459','pp-d2528e1459');" onmouseover="return tlOver('tl-d2528e1459','pp-d2528e1459');" onmouseout="return tlOut('tl-d2528e1459','pp-d2528e1459');">more</a>)</span>
<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html" class="javadoc">Matcher</a> m = p.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#matcher(java.lang.CharSequence)" class="javadoc"><em>matcher</em></a>(a);
assert m.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#replaceAll(java.lang.String)" class="javadoc"><em>replaceAll</em></a>("00").equals("002002");
assert m.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#replaceFirst(java.lang.String)" class="javadoc"><em>replaceFirst</em></a>("00").equals("002<em>d</em>2");
</code></pre></div></div><div class="subSecRow1" id="sec_complrexreplacing"><div class="subSecHead" id="sechd_complrexreplacing"><a class="multipageHeadLink" href="using.xhtml#complrexreplacing" name="complrexreplacing">Complex Replacements</a><br/>(<a href="#" id="tl-d2528e1506" class="dottedTooltip" onclick="return tlClick('tl-d2528e1506','pp-d2528e1511');" onmouseover="return tlOver('tl-d2528e1506','pp-d2528e1511');" onmouseout="return tlOut('tl-d2528e1506','pp-d2528e1511');">more</a>)
		</div><div class="subSecContent" id="seccnt_complrexreplacing"><pre class="subSecCode"><code><span class="cmt">// Replace all dates in format yyyy-mm-dd with ddmmyyyy in the string:</span>
String a = "2009/12/24, 2009/12/31, 2010/01/01";
<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a> p = <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a>.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#compile(java.lang.String)" class="javadoc">compile</a>("(\\d{4})-(\\d{2})-(\\d{2})");
<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html" class="javadoc">Matcher</a> m = p.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#matcher(java.lang.CharSequence)" class="javadoc">matcher</a>(a);
<a href="http://java.sun.com/javase/6/docs/api/java/util/StringBuffer.html" class="javadoc">StringBuffer</a> result = new <a href="http://java.sun.com/javase/6/docs/api/java/util/StringBuffer.html" class="javadoc">StringBuffer</a>();
while (m.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#find()" class="javadoc"><em>find</em></a>())                                                    <span class="cmt">// loop through all results</span>
    m.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#appendReplacement(java.lang.StringBuffer, java.lang.String)" class="javadoc"><em>appendReplacement</em></a>(result, m.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#group(int)" class="javadoc">group</a>(3)+m.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#group(int)" class="javadoc">group</a>(2)+m.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#group(int)" class="javadoc">group</a>(3));  <span class="cmt">// add replacement (<a href="#" id="tl-d2528e1589" class="dottedTooltip" onclick="return tlClick('tl-d2528e1589','pp-d2528e1589');" onmouseover="return tlOver('tl-d2528e1589','pp-d2528e1589');" onmouseout="return tlOut('tl-d2528e1589','pp-d2528e1589');">more</a>)</span>
m.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#appendTail(java.lang.StringBuffer)" class="javadoc"><em>appendTail</em></a>(result);                                               <span class="cmt">// important! (<a href="#" id="tl-d2528e1609" class="dottedTooltip" onclick="return tlClick('tl-d2528e1609','pp-d2528e1609');" onmouseover="return tlOver('tl-d2528e1609','pp-d2528e1609');" onmouseout="return tlOut('tl-d2528e1609','pp-d2528e1609');">more</a>)</span>
System.out.println(result.toString());
</code></pre></div></div><div class="subSecRow2" id="sec_splitting"><div class="subSecHead" id="sechd_splitting"><a class="multipageHeadLink" href="using.xhtml#splitting" name="splitting">Splitting</a><br/>(<a href="#" id="tl-d2528e1621" class="dottedTooltip" onclick="return tlClick('tl-d2528e1621','pp-d2528e1626');" onmouseover="return tlOver('tl-d2528e1621','pp-d2528e1626');" onmouseout="return tlOut('tl-d2528e1621','pp-d2528e1626');">more</a>)
		</div><div class="subSecContent" id="seccnt_splitting"><pre class="subSecCode"><code>String a = "42, 17, 24, 5, 175";
String[] r = a.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#split(java.lang.String)" class="javadoc"><em>split</em></a>("[ ,]+");                   <span class="cmt">// comma and space split (<a href="#" id="tl-d2528e1642" class="dottedTooltip" onclick="return tlClick('tl-d2528e1642','pp-d2528e1642');" onmouseover="return tlOver('tl-d2528e1642','pp-d2528e1642');" onmouseout="return tlOut('tl-d2528e1642','pp-d2528e1642');">more</a>)</span>
assert r.length == 5;                            <span class="cmt">// split into 5 substrings</span>
assert r[0].equals("42") &amp;&amp; r[1].equals("17");   <span class="cmt">// ...</span>

String b = "-3--2";
String[] r2 = b.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#split(java.lang.String)" class="javadoc"><em>split</em></a>("-");
assert r2.length == <em>4</em>;
assert <em>r2[0].equals("")</em> &amp;&amp; <em>r2[2].equals("")</em>;     <span class="cmt">// substrings may be empty</span>

String[] r3 = a.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#split(java.lang.String, int)" class="javadoc">split</a>("[ ,]+", <em>3</em>);               <span class="cmt">// limit to 3 (<a href="#" id="tl-d2528e1700" class="dottedTooltip" onclick="return tlClick('tl-d2528e1700','pp-d2528e1700');" onmouseover="return tlOver('tl-d2528e1700','pp-d2528e1700');" onmouseout="return tlOut('tl-d2528e1700','pp-d2528e1700');">more</a>)</span>
assert r3.length == <em>3</em>;                           <span class="cmt">// limited array size</span>
assert r3[2].equals(<em>"24, 5, 175"</em>);               <span class="cmt">// contains remaining text</span>

String c = "1, 2,, 3,,,";
String[] r4 = a.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#split(java.lang.String, int)" class="javadoc">split</a>("[ ,]+", <em>0</em>);               <span class="cmt">// remove empty strings at the end (<a href="#" id="tl-d2528e1735" class="dottedTooltip" onclick="return tlClick('tl-d2528e1735','pp-d2528e1735');" onmouseover="return tlOver('tl-d2528e1735','pp-d2528e1735');" onmouseout="return tlOut('tl-d2528e1735','pp-d2528e1735');">more</a>)</span>
assert r4.length == <em>4</em>;                           <span class="cmt">// empty strings at the end removed</span>
assert r4[2].equals(<em>""</em>);                         <span class="cmt">// other empty strings remain</span>

<span class="cmt">// <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a> has exact equivalents of <span class="idf">String</span>'s <span class="idf">split</span> methods:</span>
<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a> p = <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a>.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#compile(java.lang.String)" class="javadoc">compile</a>(("[ ,]+");
assert p.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#split(java.lang.CharSequence)" class="javadoc"><em>split</em></a>(a).length == 5;
assert p.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#split(java.lang.CharSequence, int)" class="javadoc"><em>split</em></a>(a, 3).length == 3;                <span class="cmt">// with limit</span>
</code></pre></div></div><div class="subSecRow1" id="sec_patternflags"><div class="subSecHead" id="sechd_patternflags"><a class="multipageHeadLink" href="using.xhtml#patternflags" name="patternflags">Pattern Flags</a><br/>(<a href="#" id="tl-d2528e1801" class="dottedTooltip" onclick="return tlClick('tl-d2528e1801','pp-d2528e1806');" onmouseover="return tlOver('tl-d2528e1801','pp-d2528e1806');" onmouseout="return tlOut('tl-d2528e1801','pp-d2528e1806');">more</a>)
		</div><div class="subSecContent" id="seccnt_patternflags"><pre class="subSecCode"><code><span class="cmt">// Case-insensitive matching:</span>
String a = "I lOvE jAvA";
<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a> p = <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a>.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#compile(java.lang.String, int)" class="javadoc">compile</a>(".*love.*", <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a>.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#CASE_INSENSITIVE" class="javadoc"><em>CASE_INSENSITIVE</em></a>);  <span class="cmt">// <strong class="warn">ASCII only!</strong> (<a href="#" id="tl-d2528e1851" class="dottedTooltip" onclick="return tlClick('tl-d2528e1851','pp-d2528e1851');" onmouseover="return tlOver('tl-d2528e1851','pp-d2528e1851');" onmouseout="return tlOut('tl-d2528e1851','pp-d2528e1851');">more</a>)</span>
assert p.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#matcher(java.lang.CharSequence)" class="javadoc">matcher</a>(a).<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#matches()" class="javadoc">matches</a>();

<span class="cmt">// </span>Find all lines containing numbers:
String b = "23\naSd\n5\nLOVE\n\NYE\n3\n";
<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a> p2 = <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a>.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#compile(java.lang.String, int)" class="javadoc">compile</a>("^\\d+$", <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a>.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#MULTILINE" class="javadoc"><em>MULTILINE</em></a>);          <span class="cmt">// multiline (<a href="#" id="tl-d2528e1898" class="dottedTooltip" onclick="return tlClick('tl-d2528e1898','pp-d2528e1898');" onmouseover="return tlOver('tl-d2528e1898','pp-d2528e1898');" onmouseout="return tlOut('tl-d2528e1898','pp-d2528e1898');">more</a>)</span>
<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html" class="javadoc">Matcher</a> m2 = p2.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#matcher(java.lang.CharSequence)" class="javadoc">matcher</a>(b);
while (m2.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#find()" class="javadoc">find</a>()) 
    System.out.println(m2.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#group()" class="javadoc">group</a>());                                 <span class="cmt">// print numbers 23, 5 and 3</span>

<span class="cmt">// Patterns that may span several lines:</span>
String c = "a\n\b\nc";
<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a> p3 = <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a>.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#compile(java.lang.String, int)" class="javadoc">compile</a>("a.*b.*c", <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a>.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#DOTALL" class="javadoc"><em>DOTALL</em></a>);            <span class="cmt">// "." matches newlines (<a href="#" id="tl-d2528e1958" class="dottedTooltip" onclick="return tlClick('tl-d2528e1958','pp-d2528e1958');" onmouseover="return tlOver('tl-d2528e1958','pp-d2528e1958');" onmouseout="return tlOut('tl-d2528e1958','pp-d2528e1958');">more</a>)</span>
assert p3.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#matcher(java.lang.CharSequence)" class="javadoc">matcher</a>(c).<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#matches()" class="javadoc">matches</a>();
assert <em>!</em>c.<a href="http://java.sun.com/javase/6/docs/api/java/lang/String.html#matches(java.lang.String)" class="javadoc">matches</a>("a.*b.*c");                                       <span class="cmt">// no match without <span class="idf">DOTALL</span></span>

<span class="cmt">// Multiple flags:</span>
<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a> p4 = <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a>.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#compile(java.lang.String, int)" class="javadoc">compile</a>(".*love.*", 
          <em><a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a>.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#CASE_INSENSITIVE" class="javadoc">CASE_INSENSITIVE</a> <em>|</em> <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#DOTALL" class="javadoc">DOTALL</a></em>);                       <span class="cmt">// combining flags (<a href="#" id="tl-d2528e2024" class="dottedTooltip" onclick="return tlClick('tl-d2528e2024','pp-d2528e2024');" onmouseover="return tlOver('tl-d2528e2024','pp-d2528e2024');" onmouseout="return tlOut('tl-d2528e2024','pp-d2528e2024');">more</a>)</span>
assert p4.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#matcher(java.lang.CharSequence)" class="javadoc">matcher</a>(b).<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#matches()" class="javadoc">matches</a>();
</code></pre></div></div><h2 id="sec_advanced" class="sectionHead"><a name="advanced">Advanced Regular Expressions</a></h2><div class="subSecRow2" id="sec_greedy"><div class="subSecHead" id="sechd_greedy"><a class="multipageHeadLink" href="advanced.xhtml#greedy" name="greedy">Greedy / Non-Greedy Quantifier</a></div><div class="subSecContent" id="seccnt_greedy"><p class="subSecExplanation">Regular expression <a href="#" id="tl-d2528e2051" class="dottedTooltip" onclick="return tlClick('tl-d2528e2051','pp-d2528e2054');" onmouseover="return tlOver('tl-d2528e2051','pp-d2528e2054');" onmouseout="return tlOut('tl-d2528e2051','pp-d2528e2054');">quantifiers</a> are <em>greedy by default</em>. This means that each quantifier tries to get as many repetitions as possible. As the regular expression is executed from left to right, this means that the first quantifiers may get more repetitions than the following ones. In some situations, this is not desirable, and that's what non-greedy quantifiers are for. They try to match <em>as few repetitions as possible</em> while still fulfilling the pattern as a whole.<br/> In order to get a non-greedy quantifier, just append a "?", e.g. write "*?" instead of just "*".</p><pre class="subSecCode"><code>String a = "a,b,c";
<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html" class="javadoc">Matcher</a> m1 = <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a>.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#compile(java.lang.String)" class="javadoc">compile</a>("(.<em>*</em>),(.<em>*</em>)").<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#matcher(java.lang.CharSequence)" class="javadoc">matcher</a>(a);     <span class="cmt">// greedy quantifiers</span>
if (m1.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#matches()" class="javadoc">matches</a>())
    System.out.println(m1.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#group(int)" class="javadoc">group</a>(1) + " " + m1.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#group(int)" class="javadoc">group</a>(2));  <span class="cmt">// prints "<em>a,b c</em>"</span>

<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html" class="javadoc">Matcher</a> m2 = <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html" class="javadoc">Pattern</a>.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#compile(java.lang.String)" class="javadoc">compile</a>("(.<em>*?</em>),(.<em>*?</em>)").<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#matcher(java.lang.CharSequence)" class="javadoc">matcher</a>(a);   <span class="cmt">// non-greedy quantifiers</span>
if (m2.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#matches()" class="javadoc">matches</a>())
    System.out.println(m2.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#group(int)" class="javadoc">group</a>(1) + " " + m2.<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Matcher.html#group(int)" class="javadoc">group</a>(2));  <span class="cmt">// prints "<em>a b,c</em>"</span>
</code></pre></div></div><div class="subSecRow1" id="sec_lookaround"><div class="subSecHead" id="sechd_lookaround"><a class="multipageHeadLink" href="advanced.xhtml#lookaround" name="lookaround">Lookaround</a></div><div class="subSecContent" id="seccnt_lookaround"><p class="subSecExplanation"><em>Lookahead assertions</em> allow you to state that a pattern only <em>matches if it is followed by another sub-pattern</em>. This sub-pattern itself is <em>not part of the actual match</em> though.</p><pre class="subSecCode"><code>String a = "ab ac ad";
String b = "pineapple";
assert a.replaceAll("a(?=c)", "X").equals("ab Xc ad");   <span class="cmt">// Match "a" <em>followed by "c"</em> (<a href="#" id="tl-d2528e2193" class="dottedTooltip" onclick="return tlClick('tl-d2528e2193','pp-d2528e2193');" onmouseover="return tlOver('tl-d2528e2193','pp-d2528e2193');" onmouseout="return tlOut('tl-d2528e2193','pp-d2528e2193');">more</a>)</span>
assert a.replaceAll("a(?!c)", "X").equals("Xb ac Xd");   <span class="cmt">// Match "a" <em>not followed by "c"</em> (<a href="#" id="tl-d2528e2205" class="dottedTooltip" onclick="return tlClick('tl-d2528e2205','pp-d2528e2205');" onmouseover="return tlOver('tl-d2528e2205','pp-d2528e2205');" onmouseout="return tlOut('tl-d2528e2205','pp-d2528e2205');">more</a>)</span>
assert b.replaceAll("[a-z](?=[eip])", "X").equals("XiXeXXpXe");
assert b.replaceAll("[a-z](?![eip])", "X").equals("pXnXapXlX");
assert "5".replaceFirst("^(?=\\d$)", "0").equals("05");  <span class="cmt">// prepend 0 to single-digit strings</span>

<span class="cmt">// Lookahead can be everywhere in the pattern (<a href="#" id="tl-d2528e2230" class="dottedTooltip" onclick="return tlClick('tl-d2528e2230','pp-d2528e2230');" onmouseover="return tlOver('tl-d2528e2230','pp-d2528e2230');" onmouseout="return tlOut('tl-d2528e2230','pp-d2528e2230');">more</a>):</span>
assert b.replaceAll("[a-z](?=[eip])[a-e]", "X").equals("piXappX""); 
</code></pre><p class="subSecExplanation">Similar to lookahead assertions, <em>lookbehind assertions</em> allow you to state a sub-pattern that must be in front of the main pattern. The sub-pattern itself is not part of the match.</p><pre class="subSecCode"><code>String a = "ba ca da";
assert a.replaceAll("(?&lt;=c)a", "X").equals("ba cX da");   <span class="cmt">// Match "a" <em>following "c"</em> (<a href="#" id="tl-d2528e2256" class="dottedTooltip" onclick="return tlClick('tl-d2528e2256','pp-d2528e2256');" onmouseover="return tlOver('tl-d2528e2256','pp-d2528e2256');" onmouseout="return tlOut('tl-d2528e2256','pp-d2528e2256');">more</a>)</span>
assert a.replaceAll("(?&lt;!c)a", "X").equals("bX ca dX");   <span class="cmt">// Match "a" <em>not following "c"</em> (<a href="#" id="tl-d2528e2268" class="dottedTooltip" onclick="return tlClick('tl-d2528e2268','pp-d2528e2268');" onmouseover="return tlOver('tl-d2528e2268','pp-d2528e2268');" onmouseout="return tlOut('tl-d2528e2268','pp-d2528e2268');">more</a>)</span>
</code></pre><p class="subSecExplanation">You can find more information on lookahead and lookbehind in the <a href="http://www.regular-expressions.info/lookaround.html">Regex Tutorial</a>.</p></div></div></div><div id="sidecolumn">
  	  	<div><h3>Useful Links</h3><div class="sidecolumnSubTitleLine"/>
  			<a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html#sum">Regular expression summary (Java Documentation)</a><br/>
  			<a href="http://en.wikipedia.org/wiki/Regular_expression">Regular expressions on Wikipedia</a><br/>
  		</div>
  </div></div></div><div id="footer"><div id="footer-content"><div id="footer-left"><div class="footerLine"><a href="/">Home</a> - <a href="/about">About Jarfiller</a> - <a href="/imprint.xhtml">Imprint</a></div><div class="footerLine">Please send feedback and corrections to <a href="mailto:tim@tjansen.de">tim@<span style="display: none">got you</span>tjansen.de</a>.</div><div class="footerLine"><a href="http://www.twitter.com/timjansen">Follow</a> me on Twitter.</div><div class="copyrightLine">© 2010 Tim Jansen; content licensed under <a href="http://creativecommons.org/licenses/by/3.0/us/">cc-by</a>; example source code is public domain
				</div></div><div id="footer-right"><a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/"><img alt="Creative Commons License" style="border-width:0" src="../../images/ext/cc-by-88x31.png"/></a></div></div></div><div id="navbar" onclick="return navToggle();" onmouseover="document.getElementById('navbar').className='mouseover';" onmouseout="document.getElementById('navbar').className='';"/><div id="navcontainer"><div id="navlinks"><div id="navclosebar"><a href="#" onclick="return navClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div><div id="navpositionbar" class="navpositionbar"/><h2 id="navtitle">Java Basics: Regular Expressions</h2><a id="nav_overview" class="navseclink" href="#overview" onclick="if (event.button == 0) return goTo('#overview', true); else return true;">Overview</a><a id="nav_intro" class="navsublink" href="#intro" onclick="if (event.button == 0) return goTo('#intro', true); else return true;">Intro</a><a id="nav_usecases" class="navsublink" href="#usecases" onclick="if (event.button == 0) return goTo('#usecases', true); else return true;">When to use regular expressions?</a><a id="nav_requirements" class="navsublink" href="#requirements" onclick="if (event.button == 0) return goTo('#requirements', true); else return true;">Requirements</a><a id="nav_assert" class="navsublink" href="#assert" onclick="if (event.button == 0) return goTo('#assert', true); else return true;">Assert</a><a id="nav_regularexpressions" class="navseclink" href="#regularexpressions" onclick="if (event.button == 0) return goTo('#regularexpressions', true); else return true;">Regular Expressions</a><a id="nav_plainstrings" class="navsublink" href="#plainstrings" onclick="if (event.button == 0) return goTo('#plainstrings', true); else return true;">Plain Strings</a><a id="nav_groupsandor" class="navsublink" href="#groupsandor" onclick="if (event.button == 0) return goTo('#groupsandor', true); else return true;">Groups and Or</a><a id="nav_characterclasses" class="navsublink" href="#characterclasses" onclick="if (event.button == 0) return goTo('#characterclasses', true); else return true;">Character Classes</a><a id="nav_quantifiers" class="navsublink" href="#quantifiers" onclick="if (event.button == 0) return goTo('#quantifiers', true); else return true;">Quantifiers</a><a id="nav_anchors" class="navsublink" href="#anchors" onclick="if (event.button == 0) return goTo('#anchors', true); else return true;">Anchors</a><a id="nav_flags" class="navsublink" href="#flags" onclick="if (event.button == 0) return goTo('#flags', true); else return true;">Flags</a><a id="nav_backreferences" class="navsublink" href="#backreferences" onclick="if (event.button == 0) return goTo('#backreferences', true); else return true;">Back references</a><a id="nav_using" class="navseclink" href="#using" onclick="if (event.button == 0) return goTo('#using', true); else return true;">Using Regular Expressions</a><a id="nav_simplematching" class="navsublink" href="#simplematching" onclick="if (event.button == 0) return goTo('#simplematching', true); else return true;">Simple Matching</a><a id="nav_finding" class="navsublink" href="#finding" onclick="if (event.button == 0) return goTo('#finding', true); else return true;">Finding and Parsing</a><a id="nav_replacing" class="navsublink" href="#replacing" onclick="if (event.button == 0) return goTo('#replacing', true); else return true;">Simple Replacing</a><a id="nav_complrexreplacing" class="navsublink" href="#complrexreplacing" onclick="if (event.button == 0) return goTo('#complrexreplacing', true); else return true;">Complex Replacements</a><a id="nav_splitting" class="navsublink" href="#splitting" onclick="if (event.button == 0) return goTo('#splitting', true); else return true;">Splitting</a><a id="nav_patternflags" class="navsublink" href="#patternflags" onclick="if (event.button == 0) return goTo('#patternflags', true); else return true;">Pattern Flags</a><a id="nav_advanced" class="navseclink" href="#advanced" onclick="if (event.button == 0) return goTo('#advanced', true); else return true;">Advanced Regular Expressions</a><a id="nav_greedy" class="navsublink" href="#greedy" onclick="if (event.button == 0) return goTo('#greedy', true); else return true;">Greedy / Non-Greedy Quantifier</a><a id="nav_lookaround" class="navsublink" href="#lookaround" onclick="if (event.button == 0) return goTo('#lookaround', true); else return true;">Lookaround</a></div></div><div id="popups"><div id="pp-d2528e164" class="tooltip">Almost any string is a valid regular expression. If it does not contain any control sequences, the regular expression pattern will only match those strings which are equal.</div><div id="pp-d2528e198" class="tooltip">"foo bar bar" is a regular expression, albeit a pretty boring one without control sequences. Thus it only matches this one exact string, "foo bar bar".</div><div id="pp-d2528e214" class="tooltip">"dog" does not match, as only those patterns that exactly match the regular expression will fulfill the test.</div><div id="pp-d2528e279" class="tooltip">Using or ("|") you can specify two or more patterns. Any of them can match the input string to make the test succeed.<br/> You can define groups in the regular expression by putting parts of the regular expression into parenthesis ("()"). They can be useful for the "|" operator and quantifiers, and are also used by back-references.</div><div id="pp-d2528e302" class="tooltip">With the or operator "|" you can specify two alternatives for the pattern. The pattern matches if at least one of the alternatives matches.</div><div id="pp-d2528e361" class="tooltip">If you put a part of your regular expression into parenthesis, this defines a capturing group. Capturing groups have no direct influence on the pattern, but other operators may refer to them.</div><div id="pp-d2528e416" class="tooltip">In order to match the actual characters "(", ")" or "|", instead of interpreting them in the regular expression, <em>prefix them with a backslash</em>. As Java itself interprets backslashes in string literals, you need to <em>use a double backslash</em> in the source code.</div><div id="pp-d2528e432" class="tooltip">A character class allows you to specify a set of characters which will fulfill the pattern at its place.</div><div id="pp-d2528e449" class="tooltip">A list of characters in square brackets ("[]") is called a <em>character class</em>. They match any of their characters in the pattern. Writing "[abc]" is the same as "(a|b|c)". In this example, "a[bgh]c" matches the strings "abc", "agc" and "ahc".</div><div id="pp-d2528e510" class="tooltip">By starting a character class with a caret ("^"), you specify that all characters match except those listed.</div><div id="pp-d2528e532" class="tooltip">The dot "." matches any character except newline. You can enable newline matching with the <span class="idf">(?s)</span> flag or <span class="idf">DOTALL</span> option.</div><div id="pp-d2528e563" class="tooltip">"\\w" is a predefined character class to match only alphanumeric characters and the underscore. It is the same as writing "[a-zA-Z_0-9]".</div><div id="pp-d2528e579" class="tooltip">"\\s" is a predefined character class to match only whitespace characters. It is the same as writing "[ \t\n\x0B\f\r]".</div><div id="pp-d2528e592" class="tooltip">"\\d" is a predefined character class to match only digits. It is the same as writing "[0-9]".</div><div id="pp-d2528e606" class="tooltip">Uppercase character classes like "\\W" are the opposite of the lower case characters: they match every character that is not a part of the lowercase pendant</div><div id="pp-d2528e628" class="tooltip">Quantifies allow you to specify that the preceding character or character class or group is either optional and/or is expected to occur more than one time.</div><div id="pp-d2528e646" class="tooltip">The quantifier "*" means that the preceding character or character class or group is optional and does not need to appear to match the pattern. But if it does, it can be there any number of times.</div><div id="pp-d2528e674" class="tooltip">This is a very complex pattern that will still match the input string "b ba baa baaa". Note the use of groups and "*" quantifiers. The first "*" means that "b" can be followed by any number of "a"'s. The second means that the "ba" part can be followed by any number of spaces. And the third part means that the preceding group ("ba* *") can be repeated any number of times.</div><div id="pp-d2528e689" class="tooltip">The quantifier "+" means that the preceding character or character class or group appears at least once (but possibly more often).</div><div id="pp-d2528e717" class="tooltip">This is a very complex pattern that will still match the input string "b ba baa baaa". Note the use of groups and quantifiers. The first "+" means that " b" is followed by at least one "a". And the second part means that the preceding group ("( ba+)") will be repeated at least once.</div><div id="pp-d2528e732" class="tooltip">The quantifier "?" means that the preceding character or character class or group is optional. Its presence is not required for a match.</div><div id="pp-d2528e761" class="tooltip">The quantifier "{n}", with "n" being a number, means that the preceding character or character class or group needs to be repeated exactly "n" times to match the pattern.</div><div id="pp-d2528e771" class="tooltip">The quantifier "{n,m}", with "n" and "m" being numbers, means that the preceding character or character class or group needs to be repeated at least "n" times and at most "m" times to match the pattern.</div><div id="pp-d2528e781" class="tooltip">The quantifier "{n,}", with "n" being a number, means that the preceding character or character class or group needs to be repeated at least "n" times to match the pattern.</div><div id="pp-d2528e792" class="tooltip">Anchors allow you to specify where a regular expression pattern needs to be positioned within the input string. For example, you can specify that it must start at the beginning of a line, or at the end of a word.</div><div id="pp-d2528e815" class="tooltip">The "^" must be placed at the beginning of a regular expression. Then the pattern will only match if the pattern can be found at the beginning of the regular expression. If specify the <span class="idf">(?m)</span> flag or <span class="idf">MULTILINE</span> option, it will also match if found at the beginning of a line.</div><div id="pp-d2528e852" class="tooltip">The "$" must be placed at the end of a regular expression. Then the pattern will only match if the pattern can be found at the end of the regular expression. If specify the <span class="idf">(?m)</span> flag or <span class="idf">MULTILINE</span> option, it will also match if found at the end of a line.</div><div id="pp-d2528e895" class="tooltip">With the "\b" anchor a pattern will only match if the "\b" is aligned to a word-boundary. A word-boundary is the beginning and end of a string or line, as well as any alphanumeric character next to whitespace.</div><div id="pp-d2528e908" class="tooltip">With the "\B" anchor a pattern will only match if the "\b" is not aligned to a word-boundary. A word-boundary is the beginning and end of a string or line, as well as any alphanumeric character next to whitespace.</div><div id="pp-d2528e918" class="tooltip">Using flags you can modify the regular expression's behaviour. The most important flag is 'i'. It makes your regular expression (or a part thereof) case-insentitive. Just add '<em>(?i)</em>' at the beginning, and the rest will be case-insensitive. You can also declare only parts of the pattern to be case-insensitive and turn case-sensitivity on again using '<em>(?-i)</em>'. You can find a list of all flags in the <span class="idf">Pattern</span> javadoc.</div><div id="pp-d2528e954" class="tooltip">By putting <span class="idf">(?i)</span> into a pattern, the rest of the pattern (but not the preceding part) is case-insensitive. <strong class="warn">Please note that this only works with ASCII characters.</strong> You need to add an 'u' flag in order to process unicode characters, thus write '(?iu)'.</div><div id="pp-d2528e996" class="tooltip">You can combine several flags in a single control sequence. In this case, the regular expression is case-insensitive and in <span class="idf">DOTALL</span> mode. Without both flags the pattern would not match.</div><div id="pp-d2528e1024" class="tooltip">By putting a '-'in front of one or more flags, you can disable them until the rest of the pattern (unless you enable them later). To disable both <span class="idf">i</span> and <span class="idf">s</span>, you could write <span class="idf">(?-is)</span>.</div><div id="pp-d2528e1059" class="tooltip">A back reference states you that the content of a previous capturing group needs to be repeated in order to match the pattern.</div><div id="pp-d2528e1083" class="tooltip">"\1" is a back reference to the first capturing group. The pattern matches only if the matcher finds the same content in both the capturing group and at the place of the back reference. Similarly, you can use "\2" for the second capturing group and so on.</div><div id="pp-d2528e1103" class="tooltip">If you put a group in "(?:" and ")" (instead of just "(" and ")"), it is a non-capturing group. The only difference between a capturing groupd and a non-capturing group is that the latter won't count for back-references and it won't be returned as group in <span class="idf">Matcher</span>.</div><div id="pp-d2528e1122" class="tooltip">The easiest way to check whether a string matches a regular expression pattern is the <span class="idf">matches</span> method in <span class="idf">String</span>. By using a pattern that ignores all characters at the beginning and at the end of a string, you can also use it to find out whether a string contains a pattern.</div><div id="pp-d2528e1155" class="tooltip">If you want to find a partial string, just start and end the pattern with ".*". Then any string containing the pattern between will match. The example's regular expression matches if the input string contains the word 'love'. </div><div id="pp-d2528e1163" class="tooltip">In order to include an arbitrary string into your regular expression pattern, without having to escape control sequences manually, use the <span class="idf">Matcher.quoteReplacement()</span> method. It escapes all characters that may otherwise be interpreted by the regular expression parser. </div><div id="pp-d2528e1195" class="tooltip">Using the <span class="idf">Pattern</span> and <span class="idf">Matcher</span> class, it is possible to locate instances of your regular expression pattern in your input string. You can also make it return the pattern's capturing groups, thus allow simple parsing of strings.</div><div id="pp-d2528e1227" class="tooltip">For complex operations on regular expression, you need to compile the regular expression into a <span class="idf">Pattern</span> object first. This pattern object can also be reused, if you need the regular expression more than once.<br/> By the way, instead of the regular expression "[0-9]+]" you could also write "\\d+", which would be a little bit shorter (but also a bit less readable).</div><div id="pp-d2528e1249" class="tooltip">A <span class="idf">Matcher</span> represents the results of matching a string against a regular expression. You need the <span class="idf">Matcher</span> for most complex operations on regular expressions.</div><div id="pp-d2528e1266" class="tooltip">The <span class="idf">find</span> method searches for the next match of the <span class="idf">Matcher</span>'s pattern in the input string. If it finds one, it returns <span class="idf">true</span>. If there are no more matches, it returns <span class="idf">false</span>.</div><div id="pp-d2528e1303" class="tooltip">The methods <span class="idf">start()</span> and <span class="idf">end()</span> return the start and end position of the match within the stream.</div><div id="pp-d2528e1343" class="tooltip">This regular expression uses capturing groups (parenthesis) to define those two regions that should be extracted. The first capturing group includes all characters before the "@", and the second group includes all following the "@".<br/> The content of the capturing groups can be retrieved only after executing the pattern with <span class="idf">find</span> or <span class="idf">matches</span>. Then <span class="idf">group(int)</span> returns the n'th capturing group, with n=1 for the first group.</div><div id="pp-d2528e1373" class="tooltip">Note the difference: <span class="idf">matches</span> compares the whole input string against the pattern, unlike <span class="idf">find</span>, which looks for matches within the input string. Thus you can have only one match or none at all with <span class="idf">matches</span>, but you can have several with <span class="idf">find</span>.</div><div id="pp-d2528e1406" class="tooltip">As long as you replace every match with the same string, replacing is very easy: just invoke the <span class="idf">replaceFirst</span> or <span class="idf">replaceAll</span> methods of either <span class="idf">String</span> or <span class="idf">Pattern</span>.</div><div id="pp-d2528e1459" class="tooltip">Using <span class="idf">replaceAll</span> and <span class="idf">replaceFirst</span> with <span class="idf">Pattern</span> and <span class="idf">Matcher</span> does the same as <span class="idf">String</span>'s equivalents, but may be faster if you can re-use the pattern. It also allows you to compile the pattern with additional flags, which will be shown below.</div><div id="pp-d2528e1511" class="tooltip">If you want to replace a pattern with a custom built string, you need to use <span class="idf">Matcher</span>'s <span class="idf">appendReplacement</span> and <span class="idf">appendTail</span> methods. They make it relatively easy to do such replacements in a <span class="idf">StringBuffer</span>.</div><div id="pp-d2528e1589" class="tooltip"><span class="idf">appendReplacement</span> is the most important method here, and the place where the magic is hidden. It does two things:<br/> First, it appends a part of the import string to the <span class="idf">StringBuffer</span>. If it is the first match, it appends the region from the input string start to the beginning of the match. Otherwise it appends the region from the last match to the current match.<br/> Second, it appends the string given as second argument. This is the string the old match region will be replaced with.</div><div id="pp-d2528e1609" class="tooltip">Invoking <span class="idf">appendTail</span> is important because it will append the part of the original string from the last match to the end (if there was no match, at appends the whole input string).</div><div id="pp-d2528e1626" class="tooltip">Beside matching, parsing and replacing, Java can also use regular expressions to split strings into an array of strings.</div><div id="pp-d2528e1642" class="tooltip">The <span class="idf">split</span> method takes a regular expression which defines the separator between the substrings that you want to get.</div><div id="pp-d2528e1700" class="tooltip">Using the limit argument, you can limit the number of substrings that you get. The last string will then always contain the remaining string.</div><div id="pp-d2528e1735" class="tooltip">The value 0 has a special meaning for <span class="idf">split</span>: when set, empty elements at the end of the array will be removed.</div><div id="pp-d2528e1806" class="tooltip">Compiling a <span class="idf">Pattern</span> allows you to specify additional flags, modifying the default behaviour of regular expressions. The most important flags are <span class="idf">CASE_INSENSITIVE</span>, <span class="idf">MULTILINE</span> ("^" and "$" refer to the beginning/end of the line) and <span class="idf">DOTALL</span> ("." matches newlines).</div><div id="pp-d2528e1851" class="tooltip">As you can see, the flag <span class="idf">CASE_INSENSITIVE</span> declares the pattern to be case-sensitive. However, this only works for pure ASCII texts. If you want to match all unicode text, you must additionally add the <span class="idf">UNICODE_CASE</span> flag, thus write "Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE".</div><div id="pp-d2528e1898" class="tooltip">The <span class="idf">MULTILINE</span> flag redefines the "^" and "$" anchors. Without the flag, they only match the beginning and end of the input string. With <span class="idf">MULTILINE</span>, they match the beginning and end of lines.</div><div id="pp-d2528e1958" class="tooltip">The <span class="idf">DOTALL</span> flag redefines the "." character group. Without the flag, it matches any character but newline. With <span class="idf">DOTALL</span>, it matches everything.</div><div id="pp-d2528e2024" class="tooltip">You can easily combine several flags by ORing them with the binary OR ("|").</div><div id="pp-d2528e2193" class="tooltip"><span class="idf">(?=c)</span> specifies that the pattern will only match if the preceding part of the pattern is followed by "c". Instead of "c" you could use any other regular expression. Note that the lookahead part is not part of the match, and thus it won't be replaced.</div><div id="pp-d2528e2205" class="tooltip"><span class="idf">(?!c)</span> is the opposite of <span class="idf">(?=c)</span>: it matches only if the sub-pattern is not following the main pattern "a". As with other lookaheads, the lookahead is not part of the match.</div><div id="pp-d2528e2230" class="tooltip">The lookahead can be everywhere in the pattern, not only at the end of the string. It usually does not make sense to do this though, as the lookahead part will then be part of the match. In this example, only the letter 'e' matches both the lookahead and the last character class of the pattern.</div><div id="pp-d2528e2256" class="tooltip"><span class="idf">(?&lt;=c)</span> specifies that the pattern will only match if the following part of the pattern is preceded by "c". Instead of "c" you could use any other regular expression. Note that the lookbehind part is not part of the match, and thus it won't be replaced.</div><div id="pp-d2528e2268" class="tooltip"><span class="idf">(?&lt;!c)</span> is the opposite of <span class="idf">(?&lt;=c)</span>: it matches only if the sub-pattern is not preceding the main pattern "a". As with other lookarounds, the lookbehind is not part of the match.</div><div id="pp-d2528e2054" class="tooltip">Quantifiers are operators such as "*", "+" and "?", which specify the number of repetition of the preceding character or group.</div><div id="ttCloseBar" class="closeBar"><a href="#" onclick="return tlClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div><div id="topicCloseBar" class="closeBar"><a href="#" onclick="return tpcClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div></div></body></html>