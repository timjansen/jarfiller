<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/1999/xhtml" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:page="http://tjansen.de/refPage" xmlns:i="http://tjansen.de/internal"><head><title>Java Basics: JAR Files</title><meta http-equiv="X-UA-Compatible" content="chrome=1"/><meta http-equiv="content-language" content="en"/><link rel="shortcut icon" href="../../images/favicon.png" type="image/png"/><link rel="stylesheet" type="text/css" href="../../style/style.css"/><script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-6791190-2']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
})();
</script><script type="text/javascript" src="../../js/all.js"/></head><body id="body"><div id="visibleContent"><div id="top"><a href="/"><img src="../../images/titlebar.png" alt="Jarfiller.com"/></a></div><div id="titleArea"><h1>Java Basics: JAR Files</h1><p id="titleIntro">Learn how to create and use JAR files</p></div><div id="main"><div id="bodycolumn"><div id="options">Options: <a href="#" onclick="return navToggle();">Table of Content</a>, <a href="overview.xhtml">Multi-Page Version</a></div><h2 id="sec_overview" class="sectionHead"><a name="overview">Overview</a></h2><div class="subSecRow1" id="sec_intro"><div class="subSecHead" id="sechd_intro"><a class="multipageHeadLink" href="overview.xhtml#intro" name="intro">Intro</a></div><div class="subSecContent" id="seccnt_intro"><p class="subSecExplanation"> JAR files are Java's way of <em>distributing libraries and executable programs</em>. JAR is short for <span class="idf">Java ARchive</span>. JARs are just <em><a href="http://en.wikipedia.org/wiki/ZIP_(file_format)">ZIP files</a> with a .jar extension</em> and a special directory structure. They can contain the programs or library's classes as well as any other files they may need. A special file called <em><span class="idf">/META-INF/MANIFEST.MF</span></em> is often required to be in the archive and <em>contains information about the JAR content</em>, such as the name of the <a href="#" id="tl-d2178e529" class="dottedTooltip" onclick="return tlClick('tl-d2178e529','pp-d2178e533');" onmouseover="return tlOver('tl-d2178e529','pp-d2178e533');" onmouseout="return tlOut('tl-d2178e529','pp-d2178e533');">main class</a> and its dependencies. </p></div></div><div id="colla_usecases" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="overview.xhtml#usecases" name="usecases">Use cases</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('usecases');">When to use JARs</a></div></div></div><div class="subSecRow2" id="sec_usecases" style="display: none"><div class="subSecHead" id="sechd_usecases"><a class="multipageHeadLink" href="overview.xhtml#usecases" name="usecases">Use cases</a></div><div class="subSecContent" id="seccnt_usecases"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('usecases');">When to use JARs</a></div><p class="subSecExplanation">Use <span class="idf">JARs</span> when..</p><ul class="subSecList"><li>you want to bundle a Java application's files for distribution, or</li><li>you need to deploy your code at a place where you need it as a JAR, or</li><li>you need to <a href="#" id="tl-d2178e567" class="dottedTooltip" onclick="return tlClick('tl-d2178e567','pp-d2178e570');" onmouseover="return tlOver('tl-d2178e567','pp-d2178e570');" onmouseout="return tlOut('tl-d2178e567','pp-d2178e570');">sign</a> your code, for example to execute it in a web browser or on a cell phone</li></ul></div></div><div class="subSecRow1" id="sec_requirements"><div class="subSecHead" id="sechd_requirements"><a class="multipageHeadLink" href="overview.xhtml#requirements" name="requirements">Requirements</a></div><div class="subSecContent" id="seccnt_requirements"><p class="subSecExplanation">Java supports JARs since version 1.1 (in other words, practically forever).</p></div></div><h2 id="sec_creatingjars" class="sectionHead"><a name="creatingjars">Creating JARs</a></h2><div class="subSecRow2" id="sec_structure"><div class="subSecHead" id="sechd_structure"><a class="multipageHeadLink" href="creatingjars.xhtml#structure" name="structure">Structure</a></div><div class="subSecContent" id="seccnt_structure"><p class="subSecExplanation"> JARs are just <em><a href="http://en.wikipedia.org/wiki/ZIP_(file_format)">ZIP files</a> with a .jar extension</em> and a special directory structure. Meta information is in a directory called <em><span class="idf">META-INF</span></em>, with the <em>manifest file <span class="idf">/META-INF/MANIFEST.MF</span></em> being the most important file. </p><p class="subSecExplanation"> Beside <span class="idf">META-INF</span>, you <em>add any file</em> you want to the JAR file. <em>Classes</em> must be put into the usual <a href="#" id="tl-d2178e624" class="dottedTooltip" onclick="return tlClick('tl-d2178e624','pp-d2178e629');" onmouseover="return tlOver('tl-d2178e624','pp-d2178e629');" onmouseout="return tlOut('tl-d2178e624','pp-d2178e629');"><em>Java directory structure</em></a>. <br/> This is an example layout for a JAR file, with a manifest file and two classes "com.jarfiller.example.MainClass" and "com.jarfiller.example.Helper":</p><pre class="subSecConsole">Content of jarfiller-example.jar
			
META-INF/                                  (directory)
META-INF/MANIFEST.MF                       (Manifest file)
com/                                       (directory)
com/jarfiller/                             (directory)
com/jarfiller/example/                     (directory)
com/jarfiller/example/MainClass.class      (Java class)
com/jarfiller/example/Helper.class         (Java class)
</pre></div></div><div class="subSecRow1" id="sec_manifest"><div class="subSecHead" id="sechd_manifest"><a class="multipageHeadLink" href="creatingjars.xhtml#manifest" name="manifest">Manifest</a></div><div class="subSecContent" id="seccnt_manifest"><p class="subSecExplanation">The manifest file (<span class="idf">/META-INF/MANIFEST.MF</span>) <em>describes the content</em> of the JAR file. It is <em>not required</em>, but often automatically added by JAR tools.<br/> The following manifest declares only a <a href="#" id="tl-d2178e657" class="dottedTooltip" onclick="return tlClick('tl-d2178e657','pp-d2178e533');" onmouseover="return tlOver('tl-d2178e657','pp-d2178e533');" onmouseout="return tlOut('tl-d2178e657','pp-d2178e533');">main class</a>: </p><pre class="subSecConfig"><a href="#" id="tl-d2178e661" class="tooltip" onclick="return tlClick('tl-d2178e661','pp-d2178e288');" onmouseover="return tlOver('tl-d2178e661','pp-d2178e288');" onmouseout="return tlOut('tl-d2178e661','pp-d2178e288');">Manifest-Version</a>: 1.0
<a href="#" id="tl-d2178e664" class="tooltip" onclick="return tlClick('tl-d2178e664','pp-d2178e297');" onmouseover="return tlOver('tl-d2178e664','pp-d2178e297');" onmouseout="return tlOut('tl-d2178e664','pp-d2178e297');">Main-Class</a>: com.jarfiller.example.MainClass
</pre><h4 class="subSecMiniHeadline">Rules for Manifest Files</h4><ul class="subSecList"><li>a manifest contains <em>key/value pairs</em> (<em>called <span class="idf">attributes</span></em>), one per line</li><li>attribute syntax: attribute <em>name</em>, directly followed by a <em>colon</em> (':'), a <a href="#" id="tl-d2178e692" class="dottedTooltip" onclick="return tlClick('tl-d2178e692','pp-d2178e696');" onmouseover="return tlOver('tl-d2178e692','pp-d2178e696');" onmouseout="return tlOut('tl-d2178e692','pp-d2178e696');"><em>single space</em></a> and the <em>value</em></li><li>values may span several lines. Each <em>additional line must start with one space</em>.</li><li><em>no additional whitespace</em> allowed (<a href="#" id="tl-d2178e715" class="dottedTooltip" onclick="return tlClick('tl-d2178e715','pp-d2178e715');" onmouseover="return tlOver('tl-d2178e715','pp-d2178e715');" onmouseout="return tlOut('tl-d2178e715','pp-d2178e715');">more</a>)</li><li><em>no empty lines</em> allowed in the main section (there can be <a href="#" id="tl-d2178e722" class="dottedTooltip" onclick="return tlClick('tl-d2178e722','pp-d2178e725');" onmouseover="return tlOver('tl-d2178e722','pp-d2178e725');" onmouseout="return tlOut('tl-d2178e722','pp-d2178e725');">additional sections</a>, separated by empty lines) </li></ul><h4 class="subSecMiniHeadline">Common Attributes</h4><div class="subSecTableDiv"><table><tr><th>Name</th><th>Description</th><th>Example</th></tr><tr><td>Manifest-Version</td><td>File format version of the manifest, always '1.0', required</td><td>1.0</td></tr><tr><td>Main-Class</td><td>Name of the class containing the <span class="idf">main</span> method in executable JARs</td><td>my.package.MainClass</td></tr><tr><td>Class-Path</td><td>Space-separated list of relative paths to JAR files and directories for the classpath</td><td>lib/util.jar lib/helper.jar drivers/</td></tr><tr><td>Sealed</td><td>if "true", then packages are <a href="#" id="tl-d2178e785" class="dottedTooltip" onclick="return tlClick('tl-d2178e785','pp-d2178e788');" onmouseover="return tlOver('tl-d2178e785','pp-d2178e788');" onmouseout="return tlOut('tl-d2178e785','pp-d2178e788');">sealed</a>. Otherwise "false".</td><td>true</td></tr><tr><td>Created-By</td><td>Creator of the JAR; automatically added by the <span class="idf">jar</span> tool; not important</td><td>1.6.0_12 (Sun Microsystems Inc.)</td></tr><tr><td>Implementation-Title</td><td>Name of the program/library contained in the JAR</td><td>My Super App</td></tr><tr><td>Implementation-Version</td><td>Version of the program/library contained in the JAR</td><td>1.0d</td></tr><tr><td>Implementation-Vendor</td><td>Vendor of the program/library contained in the JAR</td><td>Super Soft Inc.</td></tr><tr><td>Specification-Title</td><td>Name of the specification the library implements (<a href="#" id="tl-d2178e835" class="dottedTooltip" onclick="return tlClick('tl-d2178e835','pp-d2178e835');" onmouseover="return tlOver('tl-d2178e835','pp-d2178e835');" onmouseout="return tlOut('tl-d2178e835','pp-d2178e835');">more</a>)</td><td>Super API</td></tr><tr><td>Specification-Version</td><td>Version of the specification</td><td>1.0</td></tr><tr><td>Specification-Vendor</td><td>Vendor of the specification</td><td>Super Group</td></tr></table></div><p class="subSecExplanation">Beside those common attributes, there are many special purpose attributes. For example, if you package a Java Applet or a OSGi Bundle in a JAR, there are specific (and often required) attributes for them. For a simple library or executable JAR they are not needed though. </p><h4 class="subSecMiniHeadline">Example</h4><pre class="subSecConfig"><a href="#" id="tl-d2178e865" class="tooltip" onclick="return tlClick('tl-d2178e865','pp-d2178e288');" onmouseover="return tlOver('tl-d2178e865','pp-d2178e288');" onmouseout="return tlOut('tl-d2178e865','pp-d2178e288');">Manifest-Version</a>: 1.0
<a href="#" id="tl-d2178e868" class="tooltip" onclick="return tlClick('tl-d2178e868','pp-d2178e302');" onmouseover="return tlOver('tl-d2178e868','pp-d2178e302');" onmouseout="return tlOut('tl-d2178e868','pp-d2178e302');">Created-By</a>: 1.6.0_12 (Sun Microsystems Inc.)
<a href="#" id="tl-d2178e871" class="tooltip" onclick="return tlClick('tl-d2178e871','pp-d2178e329');" onmouseover="return tlOver('tl-d2178e871','pp-d2178e329');" onmouseout="return tlOut('tl-d2178e871','pp-d2178e329');">Class-Path</a>: lib/common.jar lib/helpers.jar lib/util-impl.jar stdlib/j2ee.jar stdlib/mail.jar
 drivers/mysql-jdbc.jar drivers/jag-ext.jar extensions/
<a href="#" id="tl-d2178e874" class="tooltip" onclick="return tlClick('tl-d2178e874','pp-d2178e338');" onmouseover="return tlOver('tl-d2178e874','pp-d2178e338');" onmouseout="return tlOut('tl-d2178e874','pp-d2178e338');">Implementation-Title</a>: Jarfiller Test App
<a href="#" id="tl-d2178e877" class="tooltip" onclick="return tlClick('tl-d2178e877','pp-d2178e348');" onmouseover="return tlOver('tl-d2178e877','pp-d2178e348');" onmouseout="return tlOut('tl-d2178e877','pp-d2178e348');">Implementation-Version</a>: 0.1
<a href="#" id="tl-d2178e880" class="tooltip" onclick="return tlClick('tl-d2178e880','pp-d2178e358');" onmouseover="return tlOver('tl-d2178e880','pp-d2178e358');" onmouseout="return tlOut('tl-d2178e880','pp-d2178e358');">Implementation-Vendor</a>: jarfiller.org
</pre><p class="subSecExplanation"/></div></div><div class="subSecRow2" id="sec_jartool"><div class="subSecHead" id="sechd_jartool"><a class="multipageHeadLink" href="creatingjars.xhtml#jartool" name="jartool">jar tool</a></div><div class="subSecContent" id="seccnt_jartool"><p class="subSecExplanation"> The JDK ships with a command line tool called <span class="idf">jar</span> to <em>create, view and unpack JAR files</em>. On Windows, use it like this:</p><pre class="subSecConsole">C:\Users\tim&gt;<a href="#" id="tl-d2178e903" class="dottedTooltip" onclick="return tlClick('tl-d2178e903','pp-d2178e907');" onmouseover="return tlOver('tl-d2178e903','pp-d2178e907');" onmouseout="return tlOut('tl-d2178e903','pp-d2178e907');">set PATH=c:\Program Files\Java\jdk1.6.0_13\bin;%PATH%</a>
			
C:\Users\tim&gt;jar
Usage: jar {ctxui}[vfm0Me] [jar-file] [manifest-file] [entry-point] [-C dir] files ...
...
			</pre><p class="subSecExplanation">To <em>create a JAR file</em> from your compiled classes, enter:</p><pre class="subSecConsole">C:\Users\tim&gt;jar <a href="#" id="tl-d2178e940" class="dottedTooltip" onclick="return tlClick('tl-d2178e940','pp-d2178e945');" onmouseover="return tlOver('tl-d2178e940','pp-d2178e945');" onmouseout="return tlOut('tl-d2178e940','pp-d2178e945');">cvf</a> <a href="#" id="tl-d2178e965" class="dottedTooltip" onclick="return tlClick('tl-d2178e965','pp-d2178e970');" onmouseover="return tlOver('tl-d2178e965','pp-d2178e970');" onmouseout="return tlOut('tl-d2178e965','pp-d2178e970');">tmp/jarfiller-example.jar</a> <a href="#" id="tl-d2178e974" class="dottedTooltip" onclick="return tlClick('tl-d2178e974','pp-d2178e979');" onmouseover="return tlOver('tl-d2178e974','pp-d2178e979');" onmouseout="return tlOut('tl-d2178e974','pp-d2178e979');">-C workspace/JarTest/bin .</a>
<a href="#" id="tl-d2178e997" class="dottedTooltip" onclick="return tlClick('tl-d2178e997','pp-d2178e1002');" onmouseover="return tlOver('tl-d2178e997','pp-d2178e1002');" onmouseout="return tlOut('tl-d2178e997','pp-d2178e1002');">added manifest</a>
adding: com/(in = 0) (out= 0)(stored 0%)
adding: com/jarfiller/(in = 0) (out= 0)(stored 0%)
adding: com/jarfiller/example/(in = 0) (out= 0)(stored 0%)
adding: com/jarfiller/example/Helper.class(in = 287) (out= 212)(deflated 26%)
adding: com/jarfiller/example/MainClass.class(in = 569) (out= 351)(deflated 38%)
</pre><p class="subSecExplanation">To <em>specify a manifest file</em>, either put it into the base directory (would be <span class="idf">workspace/JarTest/bin/META-INF/MANIFEST.MF</span>), or <em>use the 'm' parameter</em>:</p><pre class="subSecConsole">C:\Users\tim&gt;jar <a href="#" id="tl-d2178e1025" class="dottedTooltip" onclick="return tlClick('tl-d2178e1025','pp-d2178e1030');" onmouseover="return tlOver('tl-d2178e1025','pp-d2178e1030');" onmouseout="return tlOut('tl-d2178e1025','pp-d2178e1030');">cvfm</a> <a href="#" id="tl-d2178e1055" class="dottedTooltip" onclick="return tlClick('tl-d2178e1055','pp-d2178e1060');" onmouseover="return tlOver('tl-d2178e1055','pp-d2178e1060');" onmouseout="return tlOut('tl-d2178e1055','pp-d2178e1060');">tmp/jarfiller-example.jar</a> <a href="#" id="tl-d2178e1064" class="dottedTooltip" onclick="return tlClick('tl-d2178e1064','pp-d2178e1069');" onmouseover="return tlOver('tl-d2178e1064','pp-d2178e1069');" onmouseout="return tlOut('tl-d2178e1064','pp-d2178e1069');">workspace/JarTest/manifest/MANIFEST.MF</a> <a href="#" id="tl-d2178e1073" class="dottedTooltip" onclick="return tlClick('tl-d2178e1073','pp-d2178e1078');" onmouseover="return tlOver('tl-d2178e1073','pp-d2178e1078');" onmouseout="return tlOut('tl-d2178e1073','pp-d2178e1078');">^</a>
      <a href="#" id="tl-d2178e1082" class="dottedTooltip" onclick="return tlClick('tl-d2178e1082','pp-d2178e1087');" onmouseover="return tlOver('tl-d2178e1082','pp-d2178e1087');" onmouseout="return tlOut('tl-d2178e1082','pp-d2178e1087');">-C workspace/JarTest/bin .</a>
<a href="#" id="tl-d2178e1106" class="dottedTooltip" onclick="return tlClick('tl-d2178e1106','pp-d2178e1111');" onmouseover="return tlOver('tl-d2178e1106','pp-d2178e1111');" onmouseout="return tlOut('tl-d2178e1106','pp-d2178e1111');">added manifest</a>
adding: com/(in = 0) (out= 0)(stored 0%)
adding: com/jarfiller/(in = 0) (out= 0)(stored 0%)
adding: com/jarfiller/example/(in = 0) (out= 0)(stored 0%)
adding: com/jarfiller/example/Helper.class(in = 287) (out= 212)(deflated 26%)
adding: com/jarfiller/example/Helper.java(in = 56) (out= 58)(deflated -3%)
adding: com/jarfiller/example/MainClass.class(in = 569) (out= 351)(deflated 38%)
adding: com/jarfiller/example/MainClass.java(in = 147) (out= 127)(deflated 13%)
</pre></div></div><h2 id="sec_howto" class="sectionHead"><a name="howto">How to...</a></h2><div class="sectionExpandAll">
			(<a href="#" onclick="&#xA;return showAll([['colla_executables','sec_executables'],['colla_viewextract','sec_viewextract'],['colla_libraries','sec_libraries'],['colla_selfsigning','sec_selfsigning'],['colla_certification','sec_certification'],['colla_perentry','sec_perentry'],['colla_sealing','sec_sealing'],['colla_jarmetadata','sec_jarmetadata'],['colla_eclipse','sec_eclipse'],['colla_ant','sec_ant'], null]); &#xA;">expand everything</a>)
		</div><div id="colla_executables" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="executables.xhtml#executables" name="executables">Executable JARs</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('executables');">How to Start an Executable JAR</a></div></div></div><div class="subSecRow1" id="sec_executables" style="display: none"><div class="subSecHead" id="sechd_executables"><a class="multipageHeadLink" href="executables.xhtml#executables" name="executables">Executable JARs</a></div><div class="subSecContent" id="seccnt_executables"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('executables');">How to Start an Executable JAR</a></div><p class="subSecExplanation">Usually the <em>.jar file extension is associated with the Java runtime</em>. That means that just by double-clicking an executable JAR the application should start. Unfortunately executable JARs have the same extension as other JARs, such as libraries. So <em>you can't tell which JAR is executable</em>, unless you look at its <span class="idf">MANIFEST.MF</span> file.</p><p class="subSecExplanation">On the command line, you start an executable JAR by <em>running <span class="idf">java</span> with the <span class="idf">-jar</span> option</em>:</p><pre class="subSecConsole">C:\Users\tim\tmp&gt;java <a href="#" id="tl-d2178e1162" class="dottedTooltip" onclick="return tlClick('tl-d2178e1162','pp-d2178e1165');" onmouseover="return tlOver('tl-d2178e1162','pp-d2178e1165');" onmouseout="return tlOut('tl-d2178e1162','pp-d2178e1165');">-jar</a> <a href="#" id="tl-d2178e1171" class="dottedTooltip" onclick="return tlClick('tl-d2178e1171','pp-d2178e1174');" onmouseover="return tlOver('tl-d2178e1171','pp-d2178e1174');" onmouseout="return tlOut('tl-d2178e1171','pp-d2178e1174');">jarfiller-example.jar</a>
<br/></pre></div></div><div id="colla_viewextract" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="viewextract.xhtml#viewextract" name="viewextract">View/Extract JARs</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('viewextract');">How to View and Extract a JAR</a></div></div></div><div class="subSecRow2" id="sec_viewextract" style="display: none"><div class="subSecHead" id="sechd_viewextract"><a class="multipageHeadLink" href="viewextract.xhtml#viewextract" name="viewextract">View/Extract JARs</a></div><div class="subSecContent" id="seccnt_viewextract"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('viewextract');">How to View and Extract a JAR</a></div><p class="subSecExplanation">JARs are only ZIP files with a funny name, so you can <em>view and unpack them with any ZIP tool</em>. You may have to change its extension to '.zip' before, if the tool does not recognize the JAR otherwise.<br/> The <em><span class="idf">jar</span> tool</em> shipped with the JDK also allows you to view and extract them on the command line. Use <em>the 't' command to view the content</em>:</p><pre class="subSecConsole">C:\Users\tim&gt;jar <a href="#" id="tl-d2178e1209" class="dottedTooltip" onclick="return tlClick('tl-d2178e1209','pp-d2178e1214');" onmouseover="return tlOver('tl-d2178e1209','pp-d2178e1214');" onmouseout="return tlOut('tl-d2178e1209','pp-d2178e1214');">tvf</a> <a href="#" id="tl-d2178e1235" class="dottedTooltip" onclick="return tlClick('tl-d2178e1235','pp-d2178e1240');" onmouseover="return tlOver('tl-d2178e1235','pp-d2178e1240');" onmouseout="return tlOut('tl-d2178e1235','pp-d2178e1240');">tmp/jarfiller-example.jar</a>
     0 Wed Jan 20 21:34:06 CET 2010 META-INF/
   116 Wed Jan 20 21:34:06 CET 2010 META-INF/MANIFEST.MF
     0 Sat Jan 16 16:11:50 CET 2010 com/
     0 Sat Jan 16 16:11:50 CET 2010 com/jarfiller/
     0 Sun Jan 17 15:34:08 CET 2010 com/jarfiller/example/
   287 Sun Jan 17 15:46:18 CET 2010 com/jarfiller/example/Helper.class
    56 Sun Jan 17 15:46:18 CET 2010 com/jarfiller/example/Helper.java
   569 Sat Jan 16 16:14:00 CET 2010 com/jarfiller/example/MainClass.class
   147 Sat Jan 16 16:13:58 CET 2010 com/jarfiller/example/MainClass.java
</pre><p class="subSecExplanation"><em>Unpack</em> a JAR <em>with the 'x' command</em>:</p><pre class="subSecConsole">C:\Users\tim&gt;<a href="#" id="tl-d2178e1255" class="dottedTooltip" onclick="return tlClick('tl-d2178e1255','pp-d2178e1258');" onmouseover="return tlOver('tl-d2178e1255','pp-d2178e1258');" onmouseout="return tlOut('tl-d2178e1255','pp-d2178e1258');">cd tmp</a>

C:\Users\tim\tmp&gt;jar <a href="#" id="tl-d2178e1264" class="dottedTooltip" onclick="return tlClick('tl-d2178e1264','pp-d2178e1269');" onmouseover="return tlOver('tl-d2178e1264','pp-d2178e1269');" onmouseout="return tlOut('tl-d2178e1264','pp-d2178e1269');">xvf</a> <a href="#" id="tl-d2178e1290" class="dottedTooltip" onclick="return tlClick('tl-d2178e1290','pp-d2178e1295');" onmouseover="return tlOver('tl-d2178e1290','pp-d2178e1295');" onmouseout="return tlOut('tl-d2178e1290','pp-d2178e1295');">tmp/jarfiller-example.jar</a>
  created: META-INF/
 inflated: META-INF/MANIFEST.MF
  created: com/
  created: com/jarfiller/
  created: com/jarfiller/example/
 inflated: com/jarfiller/example/Helper.class
 inflated: com/jarfiller/example/Helper.java
 inflated: com/jarfiller/example/MainClass.class
 inflated: com/jarfiller/example/MainClass.java
</pre></div></div><div id="colla_libraries" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="libraries.xhtml#libraries" name="libraries">Libraries</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('libraries');">How to Add Libraries to a JAR</a></div></div></div><div class="subSecRow1" id="sec_libraries" style="display: none"><div class="subSecHead" id="sechd_libraries"><a class="multipageHeadLink" href="libraries.xhtml#libraries" name="libraries">Libraries</a></div><div class="subSecContent" id="seccnt_libraries"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('libraries');">How to Add Libraries to a JAR</a></div><p class="subSecExplanation">Most JARs, no matter whether they contain an executable program or a library, require other libraries to run. Those dependencies are usually contained in JARs as well. So how can you make sure that your JAR has all required JARs in its <a href="#" id="tl-d2178e1314" class="dottedTooltip" onclick="return tlClick('tl-d2178e1314','pp-d2178e1317');" onmouseover="return tlOver('tl-d2178e1314','pp-d2178e1317');" onmouseout="return tlOut('tl-d2178e1314','pp-d2178e1317');">CLASSPATH</a>? There are three common solutions for executable JARs. </p><h4 class="subSecMiniHeadline">Solution 1: Using the Class-Path Attribute</h4><p class="subSecExplanation"> The <span class="idf">Class-Path</span> attribute of the manifest file allows you to state a list of JARs that the Java runtime should put into its classpath. So basically <em>your program consists of several JARs</em>, one executable for the program itself and one JAR for each library.<br/> This example shows a manifest file with several dependencies: </p><pre class="subSecConfig"><a href="#" id="tl-d2178e1336" class="tooltip" onclick="return tlClick('tl-d2178e1336','pp-d2178e288');" onmouseover="return tlOver('tl-d2178e1336','pp-d2178e288');" onmouseout="return tlOut('tl-d2178e1336','pp-d2178e288');">Manifest-Version</a>: 1.0
<a href="#" id="tl-d2178e1339" class="tooltip" onclick="return tlClick('tl-d2178e1339','pp-d2178e297');" onmouseover="return tlOver('tl-d2178e1339','pp-d2178e297');" onmouseout="return tlOut('tl-d2178e1339','pp-d2178e297');">Main-Class</a>: com.jarfiller.example.MainClass
<a href="#" id="tl-d2178e1342" class="tooltip" onclick="return tlClick('tl-d2178e1342','pp-d2178e329');" onmouseover="return tlOver('tl-d2178e1342','pp-d2178e329');" onmouseout="return tlOut('tl-d2178e1342','pp-d2178e329');">Class-Path</a>: log4j.jar mail.jar
</pre><p class="subSecExplanation"> Note that your IDE may be able to create such a manifest and package your libraries automatically. For example, <a href="http://www.eclipse.org">Eclipse</a> can do this since version 3.5 (export your project as 'Runnable JAR file' and select the appropriate option). </p><h4 class="subSecMiniHeadline">Solution 2: Unpack Library JARs into a Single JAR</h4><p class="subSecExplanation">A nifty solution to the problem is to <em>unpack all JARs</em> you depend on <em>and put them all into a single JAR</em>. This <em>works most of the time</em>, but with some JARs, such as <a href="#" id="tl-d2178e1367" class="dottedTooltip" onclick="return tlClick('tl-d2178e1367','pp-d2178e1370');" onmouseover="return tlOver('tl-d2178e1367','pp-d2178e1370');" onmouseout="return tlOut('tl-d2178e1367','pp-d2178e1370');">Service Providers</a>, it won't (<a href="#" id="tl-d2178e1373" class="dottedTooltip" onclick="return tlClick('tl-d2178e1373','pp-d2178e1373');" onmouseover="return tlOver('tl-d2178e1373','pp-d2178e1373');" onmouseout="return tlOut('tl-d2178e1373','pp-d2178e1373');">more</a>). </p><p class="subSecExplanation">There are several tools that allow you to do this to various extends (e.g. they may not merge the manifests of the JARs correctly). Recent <a href="http://www.eclipse.org">Eclipse</a> versions can repack executable JARs. Just export the project into a 'Runnable JAR file' and select the right option.<br/> <a href="http://ant.apache.org">Ant</a> also allows you to unpack JARs into a single JAR using the <span class="idf">jar</span> task.</p><h4 class="subSecMiniHeadline">Solution 3: Call <span class="idf">java</span> with all JARs in the CLASSPATH</h4><p class="subSecExplanation">Another common solution is to write a script or batch file that puts all JARs into the classpath and then starts the application. This also allows you to add other arguments to the Java runtime (such as an increased heap) and state the main class (so you don't need a special manifest). Then you start the application like this:</p><pre class="subSecConsole">C:\Users\tim\tmp&gt;java <a href="#" id="tl-d2178e1402" class="dottedTooltip" onclick="return tlClick('tl-d2178e1402','pp-d2178e1406');" onmouseover="return tlOver('tl-d2178e1402','pp-d2178e1406');" onmouseout="return tlOut('tl-d2178e1402','pp-d2178e1406');">-cp jarfiller-example.jar;log4j.jar;mail.jar</a> <a href="#" id="tl-d2178e1412" class="dottedTooltip" onclick="return tlClick('tl-d2178e1412','pp-d2178e1416');" onmouseover="return tlOver('tl-d2178e1412','pp-d2178e1416');" onmouseout="return tlOut('tl-d2178e1412','pp-d2178e1416');">com.jarfiller.example.MainClass</a>
<br/></pre><h4 class="subSecMiniHeadline">Dependencies for Library</h4><p class="subSecExplanation">Most libraries also depend on other libraries. Theoretically you could apply Solution 1 or Solution 2 to a library. This would be rather unusual though. Common practice is to <em>state your dependencies somewhere in the documentation</em> (or just have a directory containing dependencies) and let the library's user take care of putting them into the classpath. <em>Do not apply the solutions above to libraries</em>.<br/> The main reason is that the you (or, rather, the library's user) needs to be sure to have every library only once in the classpath. With Solution 1, two JARs could depend on the same library, but use different names for it, and you end up with including the library twice. With Solution 2, several JARs could contain the same library. Both solutions get especially messy when different versions of the same library are involved. </p></div></div><div id="colla_selfsigning" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="selfsigning.xhtml#selfsigning" name="selfsigning">Self-Signing</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('selfsigning');">How to Create a (Self-)Signed Jar</a></div></div></div><div class="subSecRow2" id="sec_selfsigning" style="display: none"><div class="subSecHead" id="sechd_selfsigning"><a class="multipageHeadLink" href="selfsigning.xhtml#selfsigning" name="selfsigning">Self-Signing</a></div><div class="subSecContent" id="seccnt_selfsigning"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('selfsigning');">How to Create a (Self-)Signed Jar</a></div><p class="subSecExplanation">Some JARs need to be signed, for example a JAR containing a Java Applet that requires certain privileges. Signing means that a <a href="http://en.wikipedia.org/wiki/Digital_signature">digital signature</a> is used to <em>authenticate the author of the JAR</em>. How exactly digital signatures work is out of the scope of this document (read the <a href="http://en.wikipedia.org/wiki/Digital_signature">Wikipedia article</a> as starting point), but what it effectively does is <em>let somebody certify your identity</em>. Idealy, but not necessarily, this somebody is a trusted <a href="http://en.wikipedia.org/wiki/Certificate_authority">certificate authority</a>.</p><p class="subSecExplanation">A digital signature has two main components. The first one is your <em>private key</em> that represents you. And then you need a certificate by somebody who certifies that you are who you claim to be. In the simplest case, you can create the certificate yourself. This is called a <em>self-signed certificate</em>. Obviously it is not very trustworthy, because anybody can certificate himself to be anybody. But for testing this is usually the easiest solution. Beside the lack of security, the major disadvantage of self-signed certificates is that the user will see a lot of warnings when installing your software, and may even be unable to install it without having system administrator privileges.</p><p class="subSecExplanation">If you want to <em>publish your software for the public, you should get a real certificate</em> from a trusted certificate authority. The next how-to will help you get this, but for now, I show you how to create a self-signed certificate.</p><p class="subSecExplanation">To sign a JAR, the first thing you need is the private key. Only you should own this key, as anybody who gets hold of it can claim to be you. Java <em>stores keys in a file called keystore</em>. You must assign each key in the keystore a name, called "alias" by Java (<a href="#" id="tl-d2178e1486" class="dottedTooltip" onclick="return tlClick('tl-d2178e1486','pp-d2178e1486');" onmouseover="return tlOver('tl-d2178e1486','pp-d2178e1486');" onmouseout="return tlOut('tl-d2178e1486','pp-d2178e1486');">more</a>). The main tool to manage keystores is a command line tool called <a href="http://java.sun.com/javase/6/docs/technotes/tools/solaris/keytool.html"><span class="idf">keytool</span></a> which ships with the JDK.</p><p class="subSecExplanation">This is how to create a new key, either adding it to an existing keystore or creating a new one. The key will automatically be self-signed:</p><pre class="subSecConsole">C:\Users\tim\tmp&gt;keytool <a href="#" id="tl-d2178e1500" class="dottedTooltip" onclick="return tlClick('tl-d2178e1500','pp-d2178e1503');" onmouseover="return tlOver('tl-d2178e1500','pp-d2178e1503');" onmouseout="return tlOut('tl-d2178e1500','pp-d2178e1503');">-genkey</a> <a href="#" id="tl-d2178e1520" class="dottedTooltip" onclick="return tlClick('tl-d2178e1520','pp-d2178e1523');" onmouseover="return tlOver('tl-d2178e1520','pp-d2178e1523');" onmouseout="return tlOut('tl-d2178e1520','pp-d2178e1523');">-keyalg RSA</a> <a href="#" id="tl-d2178e1527" class="dottedTooltip" onclick="return tlClick('tl-d2178e1527','pp-d2178e1530');" onmouseover="return tlOver('tl-d2178e1527','pp-d2178e1530');" onmouseout="return tlOut('tl-d2178e1527','pp-d2178e1530');">-alias myFirstKey</a> <a href="#" id="tl-d2178e1534" class="dottedTooltip" onclick="return tlClick('tl-d2178e1534','pp-d2178e1537');" onmouseover="return tlOver('tl-d2178e1534','pp-d2178e1537');" onmouseout="return tlOut('tl-d2178e1534','pp-d2178e1537');">-keystore myKeystore</a> <a href="#" id="tl-d2178e1540" class="dottedTooltip" onclick="return tlClick('tl-d2178e1540','pp-d2178e1543');" onmouseover="return tlOver('tl-d2178e1540','pp-d2178e1543');" onmouseout="return tlOut('tl-d2178e1540','pp-d2178e1543');">-validity 360</a>
<br/></pre><p class="subSecExplanation">The command will ask you a couple of questions. First you can protect your keystore with a password, if you create a new one. You should do this if you plan to publish software with the keys in the keystore. Then it will ask you for your name, organization and location. This information is what will be shown to the user and possibly be certified by the certificate authority, so be careful to enter the right values. </p><p class="subSecExplanation"> Now that you have a (self-signed) key, you can easily sign your JAR with the <span class="idf">jarsigner</span> tool:</p><pre class="subSecConsole">C:\Users\tim\tmp&gt;jarsigner.exe <a href="#" id="tl-d2178e1560" class="dottedTooltip" onclick="return tlClick('tl-d2178e1560','pp-d2178e1563');" onmouseover="return tlOver('tl-d2178e1560','pp-d2178e1563');" onmouseout="return tlOut('tl-d2178e1560','pp-d2178e1563');">-keystore myKeystore</a> <a href="#" id="tl-d2178e1567" class="dottedTooltip" onclick="return tlClick('tl-d2178e1567','pp-d2178e1570');" onmouseover="return tlOver('tl-d2178e1567','pp-d2178e1570');" onmouseout="return tlOut('tl-d2178e1567','pp-d2178e1570');">-verbose</a> <a href="#" id="tl-d2178e1577" class="dottedTooltip" onclick="return tlClick('tl-d2178e1577','pp-d2178e1580');" onmouseover="return tlOver('tl-d2178e1577','pp-d2178e1580');" onmouseout="return tlOut('tl-d2178e1577','pp-d2178e1580');">jarfiller-example.jar</a> <a href="#" id="tl-d2178e1584" class="dottedTooltip" onclick="return tlClick('tl-d2178e1584','pp-d2178e1587');" onmouseover="return tlOver('tl-d2178e1584','pp-d2178e1587');" onmouseout="return tlOut('tl-d2178e1584','pp-d2178e1587');">myKey</a>
<br/></pre></div></div><div id="colla_certification" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="certification.xhtml#certification" name="certification">Certification</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('certification');">How to Sign a Jar with a Valid Certificate</a></div></div></div><div class="subSecRow1" id="sec_certification" style="display: none"><div class="subSecHead" id="sechd_certification"><a class="multipageHeadLink" href="certification.xhtml#certification" name="certification">Certification</a></div><div class="subSecContent" id="seccnt_certification"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('certification');">How to Sign a Jar with a Valid Certificate</a></div><p class="subSecExplanation"> If you want to publish your signed JARs, you probably need a 'real' certificate from a trusted <a href="http://en.wikipedia.org/wiki/Certificate_authority">certificate authority</a> (CA) such as <a href="http://www.verisign.com">VeriSign</a> or <a href="http://www.thawte.com">Thawte</a> (<a href="#" id="tl-d2178e1622" class="dottedTooltip" onclick="return tlClick('tl-d2178e1622','pp-d2178e1622');" onmouseover="return tlOver('tl-d2178e1622','pp-d2178e1622');" onmouseout="return tlOut('tl-d2178e1622','pp-d2178e1622');">more</a>). Otherwise the user will see warnings or may even be unable to install the JAR, depending on the JAR's purpose and the user's privileges. </p><p class="subSecExplanation"> The exact process of how to get the certificate depends on the certificate authority you decide for. So the first step is to find a CA on the web. A few suggested CAs are <a href="http://www.verisign.com">VeriSign</a>, <a href="http://www.thawte.com">Thawte</a> and <a href="http://www.certum.eu">Certum</a> (<a href="#" id="tl-d2178e1639" class="dottedTooltip" onclick="return tlClick('tl-d2178e1639','pp-d2178e1622');" onmouseover="return tlOver('tl-d2178e1639','pp-d2178e1622');" onmouseout="return tlOut('tl-d2178e1639','pp-d2178e1622');">more</a>). The product that you are looking for is called something like '<em>Code Signing Certificate for Java</em>'. Be aware that certificates cost roughly <em>between 100 USD/EUR and 500 USD/EUR per year</em>, depending on the CA. </p><p class="subSecExplanation"> Once you have decided for a CA, just follow their instructions. Usually, getting the certificate works like this:</p><ul class="subSecList"><li>You create a key (exactly as you would for a self-signed certificate, described in the previous how-to)</li><li>You use <span class="idf">keytool</span> to create a <a href="#" id="tl-d2178e1660" class="dottedTooltip" onclick="return tlClick('tl-d2178e1660','pp-d2178e1663');" onmouseover="return tlOver('tl-d2178e1660','pp-d2178e1663');" onmouseout="return tlOut('tl-d2178e1660','pp-d2178e1663');">CSR file</a> and send this file to the CA</li><li>The CA somehow identifies you. This step will either involve some paper work, or you may have to visit one of the CAs offices with an id card.</li><li>The CA sends you a certificate to import into your keystore (<a href="#" id="tl-d2178e1682" class="dottedTooltip" onclick="return tlClick('tl-d2178e1682','pp-d2178e1682');" onmouseover="return tlOver('tl-d2178e1682','pp-d2178e1682');" onmouseout="return tlOut('tl-d2178e1682','pp-d2178e1682');">more</a>).</li></ul><p class="subSecExplanation"> Once you're done, you can sign JARs with the certiciate as you would sign with a self-signed certificate (see previous How-To). </p></div></div><div id="colla_perentry" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="perentry.xhtml#perentry" name="perentry">Per-Entry Attributes</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('perentry');">How to Specify Attributes For Single Packages (Per-Entry Attributes)</a></div></div></div><div class="subSecRow2" id="sec_perentry" style="display: none"><div class="subSecHead" id="sechd_perentry"><a class="multipageHeadLink" href="perentry.xhtml#perentry" name="perentry">Per-Entry Attributes</a></div><div class="subSecContent" id="seccnt_perentry"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('perentry');">How to Specify Attributes For Single Packages (Per-Entry Attributes)</a></div><p class="subSecExplanation">Some attributes of the manifest can be set for individual files or packages using <em>using per-entry attributes</em>. They will then override the default set in the main attributes.<br/> Per-entry attributes are <em>separated by an empty line</em> from the main attributes. Each section must start with a <a href="#" id="tl-d2178e1719" class="tooltip" onclick="return tlClick('tl-d2178e1719','pp-d2178e368');" onmouseover="return tlOver('tl-d2178e1719','pp-d2178e368');" onmouseout="return tlOut('tl-d2178e1719','pp-d2178e368');">Name</a> attribute, followed by the section's attributes. The sections are separated by newlines from each other as well.</p><p class="subSecExplanation">These are the most common per-entry attributes:</p><div class="subSecTableDiv"><table><tr><th>Name</th><th>Description</th><th>Example</th></tr><tr><td>Name</td><td>Relative path of the file the section applies to</td><td>resources/image.png</td></tr><tr><td>Sealed</td><td>"true" to seal package, otherwise "false"</td><td>true</td></tr><tr><td>Implementation-Title</td><td>Implementation name of the package</td><td>My Super Lib</td></tr><tr><td>Implementation-Version</td><td>Version of the implementation</td><td>1.0d</td></tr><tr><td>Implementation-Vendor</td><td>Vendor of the implementation</td><td>Super Soft Inc.</td></tr><tr><td>Specification-Title</td><td>Name of the specification implemented</td><td>Super API</td></tr><tr><td>Specification-Version</td><td>Version of the specification</td><td>1.0</td></tr><tr><td>Specification-Vendor</td><td>Vendor of the specification</td><td>Super Group</td></tr><tr><td>Content-Type</td><td><a href="http://en.wikipedia.org/wiki/MIME">MIME type</a> of the file</td><td>image/png</td></tr></table></div><h4 class="subSecMiniHeadline">Example with Per-Entry Attributes</h4><pre class="subSecConfig"><a href="#" id="tl-d2178e1816" class="tooltip" onclick="return tlClick('tl-d2178e1816','pp-d2178e288');" onmouseover="return tlOver('tl-d2178e1816','pp-d2178e288');" onmouseout="return tlOut('tl-d2178e1816','pp-d2178e288');">Manifest-Version</a>: 1.0
<a href="#" id="tl-d2178e1819" class="tooltip" onclick="return tlClick('tl-d2178e1819','pp-d2178e358');" onmouseover="return tlOver('tl-d2178e1819','pp-d2178e358');" onmouseout="return tlOut('tl-d2178e1819','pp-d2178e358');">Implementation-Vendor</a>: jarfiller.org
<a href="#" id="tl-d2178e1822" class="tooltip" onclick="return tlClick('tl-d2178e1822','pp-d2178e310');" onmouseover="return tlOver('tl-d2178e1822','pp-d2178e310');" onmouseout="return tlOut('tl-d2178e1822','pp-d2178e310');">Sealed</a>: false

<a href="#" id="tl-d2178e1825" class="tooltip" onclick="return tlClick('tl-d2178e1825','pp-d2178e368');" onmouseover="return tlOver('tl-d2178e1825','pp-d2178e368');" onmouseout="return tlOut('tl-d2178e1825','pp-d2178e368');">Name</a>: com/jarfiller/xml/impl
<a href="#" id="tl-d2178e1828" class="tooltip" onclick="return tlClick('tl-d2178e1828','pp-d2178e310');" onmouseover="return tlOver('tl-d2178e1828','pp-d2178e310');" onmouseout="return tlOut('tl-d2178e1828','pp-d2178e310');">Sealed</a>: true
<a href="#" id="tl-d2178e1831" class="tooltip" onclick="return tlClick('tl-d2178e1831','pp-d2178e338');" onmouseover="return tlOver('tl-d2178e1831','pp-d2178e338');" onmouseout="return tlOut('tl-d2178e1831','pp-d2178e338');">Implementation-Title</a>: XML Api Implementation
<a href="#" id="tl-d2178e1835" class="tooltip" onclick="return tlClick('tl-d2178e1835','pp-d2178e348');" onmouseover="return tlOver('tl-d2178e1835','pp-d2178e348');" onmouseout="return tlOut('tl-d2178e1835','pp-d2178e348');">Implementation-Version</a>: 1.2
<a href="#" id="tl-d2178e1838" class="tooltip" onclick="return tlClick('tl-d2178e1838','pp-d2178e373');" onmouseover="return tlOver('tl-d2178e1838','pp-d2178e373');" onmouseout="return tlOut('tl-d2178e1838','pp-d2178e373');">Specification-Title</a>: Jarfiller XML API
<a href="#" id="tl-d2178e1841" class="tooltip" onclick="return tlClick('tl-d2178e1841','pp-d2178e383');" onmouseover="return tlOver('tl-d2178e1841','pp-d2178e383');" onmouseout="return tlOut('tl-d2178e1841','pp-d2178e383');">Specification-Version</a>: 1.0

<a href="#" id="tl-d2178e1844" class="tooltip" onclick="return tlClick('tl-d2178e1844','pp-d2178e368');" onmouseover="return tlOver('tl-d2178e1844','pp-d2178e368');" onmouseout="return tlOut('tl-d2178e1844','pp-d2178e368');">Name</a>: com/jarfiller/xml/backend
<a href="#" id="tl-d2178e1847" class="tooltip" onclick="return tlClick('tl-d2178e1847','pp-d2178e310');" onmouseover="return tlOver('tl-d2178e1847','pp-d2178e310');" onmouseout="return tlOut('tl-d2178e1847','pp-d2178e310');">Sealed</a>: true
<a href="#" id="tl-d2178e1850" class="tooltip" onclick="return tlClick('tl-d2178e1850','pp-d2178e338');" onmouseover="return tlOver('tl-d2178e1850','pp-d2178e338');" onmouseout="return tlOut('tl-d2178e1850','pp-d2178e338');">Implementation-Title</a>: XML Api Implementation Backend
<a href="#" id="tl-d2178e1854" class="tooltip" onclick="return tlClick('tl-d2178e1854','pp-d2178e348');" onmouseover="return tlOver('tl-d2178e1854','pp-d2178e348');" onmouseout="return tlOut('tl-d2178e1854','pp-d2178e348');">Implementation-Version</a>: 1.2

<a href="#" id="tl-d2178e1857" class="tooltip" onclick="return tlClick('tl-d2178e1857','pp-d2178e368');" onmouseover="return tlOver('tl-d2178e1857','pp-d2178e368');" onmouseout="return tlOut('tl-d2178e1857','pp-d2178e368');">Name</a>: com/jarfiller/helper
<a href="#" id="tl-d2178e1860" class="tooltip" onclick="return tlClick('tl-d2178e1860','pp-d2178e338');" onmouseover="return tlOver('tl-d2178e1860','pp-d2178e338');" onmouseout="return tlOut('tl-d2178e1860','pp-d2178e338');">Implementation-Title</a>: Common Jarfiller Helper
<a href="#" id="tl-d2178e1863" class="tooltip" onclick="return tlClick('tl-d2178e1863','pp-d2178e348');" onmouseover="return tlOver('tl-d2178e1863','pp-d2178e348');" onmouseout="return tlOut('tl-d2178e1863','pp-d2178e348');">Implementation-Version</a>: 2.2
				</pre></div></div><div id="colla_sealing" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="sealing.xhtml#sealing" name="sealing">Sealing</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('sealing');">How to Seal Packages in a JAR</a></div></div></div><div class="subSecRow1" id="sec_sealing" style="display: none"><div class="subSecHead" id="sechd_sealing"><a class="multipageHeadLink" href="sealing.xhtml#sealing" name="sealing">Sealing</a></div><div class="subSecContent" id="seccnt_sealing"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('sealing');">How to Seal Packages in a JAR</a></div><p class="subSecExplanation"><span class="idf">Sealing</span> a package means that <em>the JAR is the only source for classes of the package</em>. A <a href="http://java.sun.com/javase/6/docs/api/java/lang/SecurityException.html" class="javadoc">SecurityException</a> will be thrown if any other element of the classpath tries to add additional classes to the package. The main reason for sealing a package is Java's security system, which allows to require privileges for certain functions (such as file system access) in restricted environments (such as Java Applets). Sealing prevents untrusted code from circumventing these security measures.<br/> Another reason for sealing is preventing the user from accidentally loading two slightly different implementations for the same package, which can cause errors.</p><p class="subSecExplanation"> The simplest way to seal packages is two seal all packages contained in the JAR. Then you only need to add the <a href="#" id="tl-d2178e1894" class="tooltip" onclick="return tlClick('tl-d2178e1894','pp-d2178e310');" onmouseover="return tlOver('tl-d2178e1894','pp-d2178e310');" onmouseout="return tlOut('tl-d2178e1894','pp-d2178e310');">Sealed</a> attribute to the main section of the manifest: </p><pre class="subSecConfig"><a href="#" id="tl-d2178e1899" class="tooltip" onclick="return tlClick('tl-d2178e1899','pp-d2178e288');" onmouseover="return tlOver('tl-d2178e1899','pp-d2178e288');" onmouseout="return tlOut('tl-d2178e1899','pp-d2178e288');">Manifest-Version</a>: 1.0
<a href="#" id="tl-d2178e1902" class="tooltip" onclick="return tlClick('tl-d2178e1902','pp-d2178e310');" onmouseover="return tlOver('tl-d2178e1902','pp-d2178e310');" onmouseout="return tlOut('tl-d2178e1902','pp-d2178e310');">Sealed</a>: true
</pre><p class="subSecExplanation">Alternatively you can also seal parts of the content <em>using per-entry attributes</em>. You need a section for each package that you include, and can then turn sealing on or off for each section. The following example seals only two packages.</p><pre class="subSecConfig"><a href="#" id="tl-d2178e1913" class="tooltip" onclick="return tlClick('tl-d2178e1913','pp-d2178e288');" onmouseover="return tlOver('tl-d2178e1913','pp-d2178e288');" onmouseout="return tlOut('tl-d2178e1913','pp-d2178e288');">Manifest-Version</a>: 1.0
<a href="#" id="tl-d2178e1916" class="tooltip" onclick="return tlClick('tl-d2178e1916','pp-d2178e310');" onmouseover="return tlOver('tl-d2178e1916','pp-d2178e310');" onmouseout="return tlOut('tl-d2178e1916','pp-d2178e310');">Sealed</a>: false

<a href="#" id="tl-d2178e1919" class="tooltip" onclick="return tlClick('tl-d2178e1919','pp-d2178e368');" onmouseover="return tlOver('tl-d2178e1919','pp-d2178e368');" onmouseout="return tlOut('tl-d2178e1919','pp-d2178e368');">Name</a>: com/jarfiller/secure/main
<a href="#" id="tl-d2178e1922" class="tooltip" onclick="return tlClick('tl-d2178e1922','pp-d2178e310');" onmouseover="return tlOver('tl-d2178e1922','pp-d2178e310');" onmouseout="return tlOut('tl-d2178e1922','pp-d2178e310');">Sealed</a>: true

<a href="#" id="tl-d2178e1925" class="tooltip" onclick="return tlClick('tl-d2178e1925','pp-d2178e368');" onmouseover="return tlOver('tl-d2178e1925','pp-d2178e368');" onmouseout="return tlOut('tl-d2178e1925','pp-d2178e368');">Name</a>: com/jarfiller/secure/driver
<a href="#" id="tl-d2178e1928" class="tooltip" onclick="return tlClick('tl-d2178e1928','pp-d2178e310');" onmouseover="return tlOver('tl-d2178e1928','pp-d2178e310');" onmouseout="return tlOut('tl-d2178e1928','pp-d2178e310');">Sealed</a>: true
				</pre></div></div><div id="colla_jarmetadata" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="jarmetadata.xhtml#jarmetadata" name="jarmetadata">JAR Meta-Data</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('jarmetadata');">How to Get Package Versioning Information</a></div></div></div><div class="subSecRow2" id="sec_jarmetadata" style="display: none"><div class="subSecHead" id="sechd_jarmetadata"><a class="multipageHeadLink" href="jarmetadata.xhtml#jarmetadata" name="jarmetadata">JAR Meta-Data</a></div><div class="subSecContent" id="seccnt_jarmetadata"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('jarmetadata');">How to Get Package Versioning Information</a></div><p class="subSecExplanation">If a JAR has an implementation title, version or vendor set in its manifest, you can <em>retrieve this from the package</em>. </p><p class="subSecExplanation">For any <a href="http://java.sun.com/javase/6/docs/api/java/lang/Class.html" class="javadoc">Class</a>, you can get its implementation data like this: </p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/lang/Package.html" class="javadoc">Package</a> p = <a href="http://java.sun.com/javase/6/docs/api/java/lang/Object.html#getClass()" class="javadoc">getClass</a>().<a href="http://java.sun.com/javase/6/docs/api/java/lang/Class.html#getPackage()" class="javadoc">getPackage</a>();
System.out.println("Title: "+p.<a href="http://java.sun.com/javase/6/docs/api/java/lang/Package.html#getImplementationTitle()" class="javadoc">getImplementationTitle</a>());
System.out.println("Version: "+p.<a href="http://java.sun.com/javase/6/docs/api/java/lang/Package.html#getImplementationVendor()" class="javadoc">getImplementationVersion</a>());
System.out.println("Vendor: "+p.<a href="http://java.sun.com/javase/6/docs/api/java/lang/Package.html#getImplementationVersion()" class="javadoc">getImplementationVendor</a>());
</code></pre><p class="subSecExplanation"> If a class did not come out of a JAR with those values set, the methods will return null. </p><p class="subSecExplanation"> Analog to this you can also get the specification values from the <a href="http://java.sun.com/javase/6/docs/api/java/lang/Package.html" class="javadoc">Package</a>.<br/> </p></div></div><div id="colla_eclipse" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="eclipse.xhtml#eclipse" name="eclipse">Eclipse</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('eclipse');">How to Create JARs with Eclipse</a></div></div></div><div class="subSecRow1" id="sec_eclipse" style="display: none"><div class="subSecHead" id="sechd_eclipse"><a class="multipageHeadLink" href="eclipse.xhtml#eclipse" name="eclipse">Eclipse</a></div><div class="subSecContent" id="seccnt_eclipse"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('eclipse');">How to Create JARs with Eclipse</a></div><p class="subSecExplanation"><a href="http://www.eclipse.org">Eclipse</a> can create JARs using the '<em>Export</em>' function. As of version 3.5, it supports two export destinations.<br/> Plain JAR files can be created using the 'JAR file' export destination. It contains all the basic function provided by the <span class="idf">JAR</span> tool, and also allows you to create a simple manifest with <a href="#" id="tl-d2178e2023" class="tooltip" onclick="return tlClick('tl-d2178e2023','pp-d2178e297');" onmouseover="return tlOver('tl-d2178e2023','pp-d2178e297');" onmouseout="return tlOut('tl-d2178e2023','pp-d2178e297');">Main-Class</a> and <a href="#" id="tl-d2178e2026" class="tooltip" onclick="return tlClick('tl-d2178e2026','pp-d2178e310');" onmouseover="return tlOver('tl-d2178e2026','pp-d2178e310');" onmouseout="return tlOut('tl-d2178e2026','pp-d2178e310');">Sealed</a> attributes. </p><p class="subSecExplanation">The '<em>Runnable JAR file</em>' export destination is a great way to create executable JARs. Eclipse 3.5 offers three ways to handle library dependencies (see also 'How to Add Libraries to a JAR' above):</p><ul class="subSecList"><li><span class="idf">Extract required libraries</span> unpacks the library JARs and puts them into the JAR. This corresponds to solution 2 in the Libraries How-To. The result is a single JAR. Some libraries may not work when extracted with this method.</li><li><span class="idf">Package required libraries</span> puts the JARs unmodified into the executable, and adds some special startup code. It configures its own class as <a href="#" id="tl-d2178e2046" class="tooltip" onclick="return tlClick('tl-d2178e2046','pp-d2178e297');" onmouseover="return tlOver('tl-d2178e2046','pp-d2178e297');" onmouseout="return tlOut('tl-d2178e2046','pp-d2178e297');">Main-Class</a> in the manifest, which will then install a special classloader for the included JARs and start your own main class. This should work more reliable than the previous option (you still have to test it though).</li><li><span class="idf">Copy required libraries into a sub-folder</span> uses the <a href="#" id="tl-d2178e2054" class="tooltip" onclick="return tlClick('tl-d2178e2054','pp-d2178e329');" onmouseover="return tlOver('tl-d2178e2054','pp-d2178e329');" onmouseout="return tlOut('tl-d2178e2054','pp-d2178e329');">Class-Path</a> attribute as described in solution 1 of the Libraries How-To. This will work best, but results in more than one JAR.</li></ul><p class="subSecExplanation">If your program does not depend on any libraries, chose the first option.</p></div></div><div id="colla_ant" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="ant.xhtml#ant" name="ant">Ant</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('ant');">How to Create JARs with Ant</a></div></div></div><div class="subSecRow2" id="sec_ant" style="display: none"><div class="subSecHead" id="sechd_ant"><a class="multipageHeadLink" href="ant.xhtml#ant" name="ant">Ant</a></div><div class="subSecContent" id="seccnt_ant"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('ant');">How to Create JARs with Ant</a></div><p class="subSecExplanation"> <a href="http://ant.apache.org">Ant</a> provides the tasks <span class="idf">Jar</span>, <span class="idf">SignJar</span> and <span class="idf">Manifest</span> to help you create JAR files. Creating a JAR from the files in a directory is as easy as: </p><pre class="subSecConfig">&lt;jar <a href="#" id="tl-d2178e2090" class="tooltip" onclick="return tlClick('tl-d2178e2090','pp-d2178e394');" onmouseover="return tlOver('tl-d2178e2090','pp-d2178e394');" onmouseout="return tlOut('tl-d2178e2090','pp-d2178e394');">destfile</a>="${dist}/example.jar" <a href="#" id="tl-d2178e2093" class="tooltip" onclick="return tlClick('tl-d2178e2093','pp-d2178e399');" onmouseover="return tlOver('tl-d2178e2093','pp-d2178e399');" onmouseout="return tlOut('tl-d2178e2093','pp-d2178e399');">basedir</a>="${build}"/&gt;</pre><p class="subSecExplanation">For more complex archives, filesets can be used and a manifest can be specified: </p><pre class="subSecConfig">&lt;jar <a href="#" id="tl-d2178e2102" class="tooltip" onclick="return tlClick('tl-d2178e2102','pp-d2178e394');" onmouseover="return tlOver('tl-d2178e2102','pp-d2178e394');" onmouseout="return tlOut('tl-d2178e2102','pp-d2178e394');">destfile</a>="${dist}/example.jar" <a href="#" id="tl-d2178e2105" class="tooltip" onclick="return tlClick('tl-d2178e2105','pp-d2178e404');" onmouseover="return tlOver('tl-d2178e2105','pp-d2178e404');" onmouseout="return tlOut('tl-d2178e2105','pp-d2178e404');">manifest</a>="${src}/manifest/MANIFEST.MF"&gt;
  &lt;fileset dir="${build}" excludes="**/test/*.class"/&gt;
  &lt;fileset dir="${src}/images"/&gt;
&lt;/jar&gt;</pre><p class="subSecExplanation">Ant is also able of extracting and adding other JARs. The <a href="#" id="tl-d2178e2111" class="tooltip" onclick="return tlClick('tl-d2178e2111','pp-d2178e409');" onmouseover="return tlOver('tl-d2178e2111','pp-d2178e409');" onmouseout="return tlOut('tl-d2178e2111','pp-d2178e409');">filesetmanifest</a> attribute specifies what to do with their manifests (the default is to skip them):</p><pre class="subSecConfig">&lt;jar <a href="#" id="tl-d2178e2118" class="tooltip" onclick="return tlClick('tl-d2178e2118','pp-d2178e394');" onmouseover="return tlOver('tl-d2178e2118','pp-d2178e394');" onmouseout="return tlOut('tl-d2178e2118','pp-d2178e394');">destfile</a>="${dist}/example.jar" <a href="#" id="tl-d2178e2121" class="tooltip" onclick="return tlClick('tl-d2178e2121','pp-d2178e404');" onmouseover="return tlOver('tl-d2178e2121','pp-d2178e404');" onmouseout="return tlOut('tl-d2178e2121','pp-d2178e404');">manifest</a>="${src}/manifest/MANIFEST.MF"
    <a href="#" id="tl-d2178e2124" class="tooltip" onclick="return tlClick('tl-d2178e2124','pp-d2178e409');" onmouseover="return tlOver('tl-d2178e2124','pp-d2178e409');" onmouseout="return tlOut('tl-d2178e2124','pp-d2178e409');">filesetmanifest</a>="mergewithoutmain"&gt;
  &lt;fileset dir="${build}" excludes="**/test/*.class"/&gt;
  &lt;zipfileset src="${lib}/helper.jar"/&gt;
  &lt;zipfileset src="${lib}/util.jar"/&gt;
&lt;/jar&gt;</pre><p class="subSecExplanation">Instead of providing a manifest file, you can also use Ant to generate one. You can either create a file with the <span class="idf">Manifest</span> task, or embed a manifest into your <span class="idf">Jar</span> trask:</p><pre class="subSecConfig">&lt;jar <a href="#" id="tl-d2178e2139" class="tooltip" onclick="return tlClick('tl-d2178e2139','pp-d2178e394');" onmouseover="return tlOver('tl-d2178e2139','pp-d2178e394');" onmouseout="return tlOut('tl-d2178e2139','pp-d2178e394');">destfile</a>="${dist}/example.jar"&gt;
  &lt;manifest&gt;
    &lt;<a href="#" id="tl-d2178e2142" class="tooltip" onclick="return tlClick('tl-d2178e2142','pp-d2178e417');" onmouseover="return tlOver('tl-d2178e2142','pp-d2178e417');" onmouseout="return tlOut('tl-d2178e2142','pp-d2178e417');">attribute</a> name="Main-Class" value="com.jarfiller.example.MainClass"/&gt;
    &lt;<a href="#" id="tl-d2178e2145" class="tooltip" onclick="return tlClick('tl-d2178e2145','pp-d2178e417');" onmouseover="return tlOver('tl-d2178e2145','pp-d2178e417');" onmouseout="return tlOut('tl-d2178e2145','pp-d2178e417');">attribute</a> name="Implementation-Title" value="Jarfiller Example"/&gt;

    &lt;<a href="#" id="tl-d2178e2148" class="tooltip" onclick="return tlClick('tl-d2178e2148','pp-d2178e422');" onmouseover="return tlOver('tl-d2178e2148','pp-d2178e422');" onmouseout="return tlOut('tl-d2178e2148','pp-d2178e422');">section</a> name="com/jarfiller/example"&gt;
      &lt;<a href="#" id="tl-d2178e2151" class="tooltip" onclick="return tlClick('tl-d2178e2151','pp-d2178e417');" onmouseover="return tlOver('tl-d2178e2151','pp-d2178e417');" onmouseout="return tlOut('tl-d2178e2151','pp-d2178e417');">attribute</a> name="Sealed" value="true"/&gt;
    &lt;/section&gt;
    &lt;<a href="#" id="tl-d2178e2155" class="tooltip" onclick="return tlClick('tl-d2178e2155','pp-d2178e422');" onmouseover="return tlOver('tl-d2178e2155','pp-d2178e422');" onmouseout="return tlOut('tl-d2178e2155','pp-d2178e422');">section</a> name="com/jarfiller/helper"&gt;
      &lt;<a href="#" id="tl-d2178e2158" class="tooltip" onclick="return tlClick('tl-d2178e2158','pp-d2178e417');" onmouseover="return tlOver('tl-d2178e2158','pp-d2178e417');" onmouseout="return tlOut('tl-d2178e2158','pp-d2178e417');">attribute</a> name="Sealed" value="true"/&gt;
    &lt;/section&gt;
  &lt;/manifest&gt;
  &lt;fileset dir="${build}" excludes="**/test/*.class"/&gt;
  &lt;fileset dir="${src}/images"/&gt;
&lt;/jar&gt;</pre><p class="subSecExplanation">To sign JARs with Ant, use the <span class="idf">SignJar</span> task:</p><pre class="subSecConfig">&lt;signjar <a href="#" id="tl-d2178e2170" class="tooltip" onclick="return tlClick('tl-d2178e2170','pp-d2178e428');" onmouseover="return tlOver('tl-d2178e2170','pp-d2178e428');" onmouseout="return tlOut('tl-d2178e2170','pp-d2178e428');">jar</a>="${dist}/example.jar" <a href="#" id="tl-d2178e2173" class="tooltip" onclick="return tlClick('tl-d2178e2173','pp-d2178e433');" onmouseover="return tlOver('tl-d2178e2173','pp-d2178e433');" onmouseout="return tlOut('tl-d2178e2173','pp-d2178e433');">keystore</a>="myKeystore" <a href="#" id="tl-d2178e2176" class="tooltip" onclick="return tlClick('tl-d2178e2176','pp-d2178e443');" onmouseover="return tlOver('tl-d2178e2176','pp-d2178e443');" onmouseout="return tlOut('tl-d2178e2176','pp-d2178e443');">storepass</a>="password" <a href="#" id="tl-d2178e2179" class="tooltip" onclick="return tlClick('tl-d2178e2179','pp-d2178e438');" onmouseover="return tlOver('tl-d2178e2179','pp-d2178e438');" onmouseout="return tlOut('tl-d2178e2179','pp-d2178e438');">alias</a>="myKey"/&gt;</pre><p class="subSecExplanation">It is also possible to sign several JARs in a single task, and to create new JARs instead of modifying existing JARs:</p><pre class="subSecConfig">&lt;signjar <a href="#" id="tl-d2178e2189" class="tooltip" onclick="return tlClick('tl-d2178e2189','pp-d2178e448');" onmouseover="return tlOver('tl-d2178e2189','pp-d2178e448');" onmouseout="return tlOut('tl-d2178e2189','pp-d2178e448');">destDir</a>="signed" <a href="#" id="tl-d2178e2192" class="tooltip" onclick="return tlClick('tl-d2178e2192','pp-d2178e453');" onmouseover="return tlOver('tl-d2178e2192','pp-d2178e453');" onmouseout="return tlOut('tl-d2178e2192','pp-d2178e453');">lazy</a>="true" <a href="#" id="tl-d2178e2195" class="tooltip" onclick="return tlClick('tl-d2178e2195','pp-d2178e463');" onmouseover="return tlOver('tl-d2178e2195','pp-d2178e463');" onmouseout="return tlOut('tl-d2178e2195','pp-d2178e463');">preservelastmodified</a>="true"
      <a href="#" id="tl-d2178e2198" class="tooltip" onclick="return tlClick('tl-d2178e2198','pp-d2178e433');" onmouseover="return tlOver('tl-d2178e2198','pp-d2178e433');" onmouseout="return tlOut('tl-d2178e2198','pp-d2178e433');">keystore</a>="myKeystore" <a href="#" id="tl-d2178e2201" class="tooltip" onclick="return tlClick('tl-d2178e2201','pp-d2178e443');" onmouseover="return tlOver('tl-d2178e2201','pp-d2178e443');" onmouseout="return tlOut('tl-d2178e2201','pp-d2178e443');">storepass</a>="password" <a href="#" id="tl-d2178e2205" class="tooltip" onclick="return tlClick('tl-d2178e2205','pp-d2178e438');" onmouseover="return tlOver('tl-d2178e2205','pp-d2178e438');" onmouseout="return tlOut('tl-d2178e2205','pp-d2178e438');">alias</a>="myKey"&gt;
  &lt;path&gt;
    &lt;fileset dir="${dist}" includes="**/*.jar" /&gt;
  &lt;/path&gt;
&lt;/signjar&gt;</pre></div></div></div><div id="sidecolumn">
  	  	<div><h3>Useful Links</h3><div class="sidecolumnSubTitleLine"/>
  			<a href="http://java.sun.com/javase/6/docs/technotes/guides/jar/index.html">Java Documentation</a><br/>
  			<a href="http://java.sun.com/javase/6/docs/technotes/guides/jar/jar.html">JAR File Specification</a><br/>
  			<a href="http://en.wikipedia.org/wiki/JAR_(file_format)">JAR on Wikipedia</a><br/>
  		</div>
  </div></div></div><div id="footer"><div id="footer-content"><div id="footer-left"><div class="footerLine"><a href="/">Home</a> - <a href="/about">About Jarfiller</a> - <a href="/imprint.xhtml">Imprint</a></div><div class="footerLine">Please send feedback and corrections to <a href="mailto:tim@tjansen.de">tim@<span style="display: none">got you</span>tjansen.de</a>.</div><div class="footerLine"><a href="http://www.twitter.com/timjansen">Follow</a> me on Twitter.</div><div class="copyrightLine">© 2010 Tim Jansen; content licensed under <a href="http://creativecommons.org/licenses/by/3.0/us/">cc-by</a>; example source code is public domain
				</div></div><div id="footer-right"><a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/"><img alt="Creative Commons License" style="border-width:0" src="../../images/ext/cc-by-88x31.png"/></a></div></div></div><div id="navbar" onclick="return navToggle();" onmouseover="document.getElementById('navbar').className='mouseover';" onmouseout="document.getElementById('navbar').className='';"/><div id="navcontainer"><div id="navlinks"><div id="navclosebar"><a href="#" onclick="return navClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div><div id="navpositionbar" class="navpositionbar"/><h2 id="navtitle">Java Basics: JAR Files</h2><a id="nav_overview" class="navseclink" href="#overview" onclick="if (event.button == 0) return goTo('#overview', true); else return true;">Overview</a><a id="nav_intro" class="navsublink" href="#intro" onclick="if (event.button == 0) return goTo('#intro', true); else return true;">Intro</a><a id="nav_usecases" class="navsublink" href="#usecases" onclick="if (event.button == 0) return goTo('#usecases', true); else return true;">When to use JARs</a><a id="nav_requirements" class="navsublink" href="#requirements" onclick="if (event.button == 0) return goTo('#requirements', true); else return true;">Requirements</a><a id="nav_creatingjars" class="navseclink" href="#creatingjars" onclick="if (event.button == 0) return goTo('#creatingjars', true); else return true;">Creating JARs</a><a id="nav_structure" class="navsublink" href="#structure" onclick="if (event.button == 0) return goTo('#structure', true); else return true;">Structure</a><a id="nav_manifest" class="navsublink" href="#manifest" onclick="if (event.button == 0) return goTo('#manifest', true); else return true;">Manifest</a><a id="nav_jartool" class="navsublink" href="#jartool" onclick="if (event.button == 0) return goTo('#jartool', true); else return true;">jar tool</a><a id="nav_howto" class="navseclink" href="#howto" onclick="if (event.button == 0) return goTo('#howto', true); else return true;">How to...</a><a id="nav_executables" class="navsublink" href="#executables" onclick="if (event.button == 0) return goTo('#executables', true); else return true;">How to Start an Executable JAR</a><a id="nav_viewextract" class="navsublink" href="#viewextract" onclick="if (event.button == 0) return goTo('#viewextract', true); else return true;">How to View and Extract a JAR</a><a id="nav_libraries" class="navsublink" href="#libraries" onclick="if (event.button == 0) return goTo('#libraries', true); else return true;">How to Add Libraries to a JAR</a><a id="nav_selfsigning" class="navsublink" href="#selfsigning" onclick="if (event.button == 0) return goTo('#selfsigning', true); else return true;">How to Create a (Self-)Signed Jar</a><a id="nav_certification" class="navsublink" href="#certification" onclick="if (event.button == 0) return goTo('#certification', true); else return true;">How to Sign a Jar with a Valid Certificate</a><a id="nav_perentry" class="navsublink" href="#perentry" onclick="if (event.button == 0) return goTo('#perentry', true); else return true;">How to Specify Attributes For Single Packages (Per-Entry Attributes)</a><a id="nav_sealing" class="navsublink" href="#sealing" onclick="if (event.button == 0) return goTo('#sealing', true); else return true;">How to Seal Packages in a JAR</a><a id="nav_jarmetadata" class="navsublink" href="#jarmetadata" onclick="if (event.button == 0) return goTo('#jarmetadata', true); else return true;">How to Get Package Versioning Information</a><a id="nav_eclipse" class="navsublink" href="#eclipse" onclick="if (event.button == 0) return goTo('#eclipse', true); else return true;">How to Create JARs with Eclipse</a><a id="nav_ant" class="navsublink" href="#ant" onclick="if (event.button == 0) return goTo('#ant', true); else return true;">How to Create JARs with Ant</a></div></div><div id="popups"><div id="pp-d2178e715" class="tooltip">The manifest file's syntax is very rigid. Unlike most other text formats, it will not ignore additional whitespace, but rather handle it as part of the attribute name or value. This can cause errors which are hard to find (because you can't easily see your mistake in the text editor), so be careful.</div><div id="pp-d2178e835" class="tooltip">Some libraries don't have their own API, but implement a API defined by someone else. Then they can specify the API's title, version and vendor here.</div><div id="pp-d2178e1373" class="tooltip">In other words, you extract all your libraries' JARs into a single directory, then copy your program into that directory and create a new JAR with the directory's content. However, this will overwrite any manifest files your libraries may have. It may be possible to solve the problems by merging manifests manually, but it won't always work.</div><div id="pp-d2178e1486" class="tooltip">The alias of a key is just a mechanism of the keystore to allow you to manage your keys. An alias is not part of the key itself.</div><div id="pp-d2178e1622" class="tooltip">VeriSign and Thawte are probably the best-known CAs, and thus most trusted. Unfortunately they are also among the most expensive ones. You can get a list of all Java CAs by looking at Java's CA Keystore "jre\lib\security\cacerts" in the JDK directory. Use the command <span class="idf">keytool -list -v -keystore jre\lib\security\cacerts</span> and an empty password to print the full list.</div><div id="pp-d2178e1682" class="tooltip">The certificate is just a simple file. The <span class="idf">keytool</span> command to import it is:<br/> <span class="idf">keytool -import -trustcacerts -file theFile.crt -keystore myKeystore -alias myKey</span></div><div id="pp-d2178e533" class="tooltip">The main class is the class that will be executed when you execute a JAR. It is a class that contains a <span class="idf">main</span> method.</div><div id="pp-d2178e570" class="tooltip">A digital signature uses cryptography to prove that you are the creator of the JAR. Don't worry if you don't know how it works. All you need to know to sign a JAR will be shown later.</div><div id="pp-d2178e629" class="tooltip">For example, if you have a class in a package "com.jarfiller.example", you must create "com/jarfiller/example" and put the class in there, otherwise it won't be found. Classes without packages must be put at the JAR's root.</div><div id="pp-d2178e696" class="tooltip">There must be <em>exactly one</em> space between the colon and the value. No other spaces are allowed in the line, unless they are part of the value. Spaces in front of the colon are not allowed (or, rather, they would be part of the attribute name then).</div><div id="pp-d2178e725" class="tooltip">Shown here are the <span class="idf">main attributes</span> of the manifest. The main attributes can be followed by <span class="idf">per-entry attributes</span>, which would then be separated by empty lines from each other. Usually you don't need to worry about that. Per-entry attributes are practically only used for signed JARs, and their entries will be automatically generated by the <span class="idf">jarsigner</span> tool.</div><div id="pp-d2178e788" class="tooltip">"Sealed" means that a package contained in this JAR must not have any files in other parts of the classpath. This can be important for security-reasons, when untrusted code is loaded, or to guarantee the consistency of a package.</div><div id="pp-d2178e907" class="tooltip"> This statement puts all executables, including the <span class="idf">jar</span> tool, of the JDK into the <span class="idf">PATH</span>. This means that you can execute them from the command line without having to specify the full path, no matter what your current directory is. Alternatively you can also edit the <span class="idf">system environment variables</span> and put the directory in there. Then the PATH is permanently changed (you need to restart your command line though). <br/> The equivalent for Unix/Linux systems would be:<br/> <span class="plainCode">export PATH=/usr/java/bin:$PATH</span><br/> <strong class="warn">Don't forget to adjust the directory - it needs to point to your JDK installation!</strong> </div><div id="pp-d2178e945" class="tooltip"><span class="idf">cvf</span> stands for:<br/><span class="idf">create</span> - create a new JAR<br/><span class="idf">verbose</span> - prints more output<br/><span class="idf">file</span> - specify the JAR's file name<br/></div><div id="pp-d2178e970" class="tooltip">The name of the JAR to create. Required because of the 'f' in 'cvf'. Without the 'f', it would print the file to the standard output, which is rarely what you want.</div><div id="pp-d2178e979" class="tooltip">With <span class="idf">-C</span> you can specify the directory where your files reside (here: <span class="idf">workspace/JarTest/bin</span>). This is important if you don't add files from your current directory, because then <span class="idf">jar</span> would not get the directory structure right.<br/> Following <span class="idf">-c basedir</span> is usually a list of files and directories to add. Here, we add the whole directory, represented by the single dot (".").</div><div id="pp-d2178e1002" class="tooltip">As the <span class="idf">jar</span> tool did not find a manifest in the directory, it created one and added it.</div><div id="pp-d2178e1030" class="tooltip"><span class="idf">cvfm</span> stands for:<br/><span class="idf">create</span> - create a new JAR<br/><span class="idf">verbose</span> - prints more output<br/> <span class="idf">file</span> - specify the JAR's file name<br/><span class="idf">manifest</span> - specify the manifest<br/></div><div id="pp-d2178e1060" class="tooltip">The name of the JAR to create. Required because of the 'f' in 'cvfm'. Without the 'f', it would print the file to the standard output, which is rarely what you want.</div><div id="pp-d2178e1069" class="tooltip">The path of the manifest file (required because of the the 'm' in 'cvfm').</div><div id="pp-d2178e1078" class="tooltip">The caret ('^') character at the end of the line means that it is continued in the next line. It is similar to the backslash ('\') in Unix-like shells.</div><div id="pp-d2178e1087" class="tooltip">With <span class="idf">-C</span> you can specify the directory where your files reside (here: <span class="idf">workspace/JarTest/bin</span>). This is important if you don't add files from your current directory, because then <span class="idf">jar</span> would not get the directory structure right.<br/> Following <span class="idf">-c basedir</span> is usually a list of files and directories to add. Here, we add the whole directory, represented by the single dot (".").</div><div id="pp-d2178e1111" class="tooltip">This line means that <span class="idf">jar</span> added the manifest that you specified.</div><div id="pp-d2178e1165" class="tooltip">The <span class="idf">-jar</span> option starts an executable JAR. It requires the path to the JAR as argument.</div><div id="pp-d2178e1174" class="tooltip">The path to the JAR.</div><div id="pp-d2178e1214" class="tooltip"><span class="idf">tvf</span> stands for:<br/><span class="idf">table</span> - list JAR content<br/><span class="idf">verbose</span> - prints creation date and size<br/> <span class="idf">file</span> - specify the JAR's file name<br/></div><div id="pp-d2178e1240" class="tooltip">The name of the JAR to view. Required because of the 'f' in 'tvf'. Without the 'f', it would read the file from the standard input, which is rarely what you want.</div><div id="pp-d2178e1258" class="tooltip">Switch into the target directory: <span class="idf">jar</span> can only extract into the current directory.</div><div id="pp-d2178e1269" class="tooltip"><span class="idf">xvf</span> stands for:<br/><span class="idf">eXtract</span> - extract JAR content<br/><span class="idf">verbose</span> - prints more output<br/> <span class="idf">file</span> - specify the JAR's file name<br/></div><div id="pp-d2178e1295" class="tooltip">The name of the JAR to extract. Required because of the 'f' in 'xvf'. Without the 'f', it would read the file from the standard input, which is rarely what you want.</div><div id="pp-d2178e1317" class="tooltip">The classpath is a list of all JARs and directories containing code or other resources for the currently running program.</div><div id="pp-d2178e1370" class="tooltip">In Java, Service Providers are exchangeable implementations for APIs that ship in JARs. They are needed, for example, for alternative XML implementations or to connect to application servers via JNDI. This is a rather complicated topic and out of scope for this tutorial.</div><div id="pp-d2178e1406" class="tooltip">The <span class="idf">-cp</span> option allows you to specify the program's classpath as semi-colon separated paths to JARs or directories.</div><div id="pp-d2178e1416" class="tooltip">This argument is the main class to start, so you don't need to specify it in the JAR file.</div><div id="pp-d2178e1503" class="tooltip"><span class="idf">-genkey</span> generates a key. <br/>Note that Java SE 6 renamed the command to <span class="idf">-genkeypair</span> (<span class="idf">-genkey</span> still works though). The reason for the new name is that <span class="idf">-genkey</span> actually creates a key pair (one public key and one private key), but these are only the internals of asymetric cryptography and you don't need to worry about them. There is only one thing to work with in the keytool, and that's the key.</div><div id="pp-d2178e1523" class="tooltip">This specifies the key algorithm, called RSA. This is another cryptography detail which you shouldn't need to worry about. The reason why RSA is chosen here (and not DSA, the default) is that the big certificate authorities require RSA. For a self-signed key DSA would be fine.</div><div id="pp-d2178e1530" class="tooltip">This specifies the name (=alias) of the key in the keystore. You can chose any alias you want, as long as it does not exist yet.</div><div id="pp-d2178e1537" class="tooltip">This specifies the path to the keystore file. If there is no keystore file at this location, a new one will be created.</div><div id="pp-d2178e1543" class="tooltip">Specifies how long your key will be valid in days. For a development key you should use a rather high value, to avoid having to change your key every few months. The default is 90 days.</div><div id="pp-d2178e1563" class="tooltip">This specifies the path to the keystore file. </div><div id="pp-d2178e1570" class="tooltip">Turns on some extra-output, so you can see what <span class="idf">jarsigner</span> is doing.</div><div id="pp-d2178e1580" class="tooltip">The path to the JAR to sign. The existing JAR will be modified.</div><div id="pp-d2178e1587" class="tooltip">The alias of the key in the keystore. This must be the <span class="idf">-alias</span> you specified for the <span class="idf">-genkey</span> command.</div><div id="pp-d2178e1663" class="tooltip"><span class="idf">Certificate Signing Request</span> - a text file containing your public key and all other information needed to sign your key. Create it with <span class="idf">keytool</span> like that:<br/> <span class="idf">keytool –certreq –file yourRequest.csr –keystore myKeystore -alias myKey</span> </div><div id="pp-d2178e288" class="tooltip">Every <span class="idf">MANIFEST.MF</span> file is required to start with the <span class="idf">Manifest-Version</span>. It describes the file format version of the file. Currently it is always "1.0".</div><div id="pp-d2178e297" class="tooltip"><span class="idf">Main-Class</span> specifies the name of the main class. A JAR file is only executable if it has this attribute.</div><div id="pp-d2178e302" class="tooltip"><span class="idf">Created-By</span> identifies the tool that created the file. Usually added by the <span class="idf">jar</span> tool.</div><div id="pp-d2178e310" class="tooltip"><span class="idf">Sealed</span> means that only this JAR is the only source for packages. This can be important for security-reasons (to prevent untrusted code from modifying the code in this JAR). Use the value <span class="idf">true</span> to seal, and <span class="idf">false</span> for unsealed packages.<br/> <span class="idf">Sealed</span> can either be used as a main attribute, or as a per-entry attribute to seal specific packages. If you have a <span class="idf">Sealed</span> main attribute, this is the default for all packages, but can be overridden by per-entry attributes.</div><div id="pp-d2178e329" class="tooltip"><span class="idf">Class-Path</span> is a space-separated list of relative paths to additional JAR files and directories. They will be automatically put into the class path. Directories must end with a slash ('/'). A typical application is for executable JARs that need additional libraries to put them into the <span class="idf">Class-Path</span>.</div><div id="pp-d2178e338" class="tooltip"><span class="idf">Implementation-Title</span> can be used to specify the name of the program or library.<br/> <span class="idf">Implementation-Title</span> can either be used in the main section, as the default for the whole JAR, or as per-entry attribute.</div><div id="pp-d2178e348" class="tooltip"><span class="idf">Implementation-Version</span> can be used to specify the version of the program or library. No special format is needed, any string is allowed.<br/> <span class="idf">Implementation-Version</span> can either be used in the main section, as the default for the whole JAR, or as per-entry attribute.</div><div id="pp-d2178e358" class="tooltip"><span class="idf">Implementation-Vendor</span> can specify the vendor of the program or library.<br/> <span class="idf">Implementation-Vendor</span> can either be used in the main section, as the default for the whole JAR, or as per-entry attribute.</div><div id="pp-d2178e368" class="tooltip"><span class="idf">Name</span> specifies the relative path of the file the section applies to. It must be the first attribute of all sections except the main section.</div><div id="pp-d2178e373" class="tooltip"><span class="idf">Specification-Title</span> can be used to specify the name of the specification that is implemented by the code.<br/> <span class="idf">Specification-Title</span> can either be used in the main section, as the default for the whole JAR, or as per-entry attribute.</div><div id="pp-d2178e383" class="tooltip"><span class="idf">Specification-Version</span> can be used to specify the version of the specification implemented by the code. No special format is needed, any string is allowed.<br/> <span class="idf">Specification-Version</span> can either be used in the main section, as the default for the whole JAR, or as per-entry attribute.</div><div id="pp-d2178e394" class="tooltip"><span class="idf">destfile</span> specifies the path of the JAR to create.</div><div id="pp-d2178e399" class="tooltip"><span class="idf">basedir</span> specifies the root directory of the file to add to the JAR.</div><div id="pp-d2178e404" class="tooltip"><span class="idf">manifest</span> specifies the path of a manifest to include.</div><div id="pp-d2178e409" class="tooltip"><span class="idf">filesetmanifest</span> defines what to do with the manifests of extracted JARs. Valid options are "skip" (default), "merge" and "mergewithoutmain" (tries to merge manifests, but ignores <span class="idf">Main-Class</span> attributes).</div><div id="pp-d2178e417" class="tooltip"><span class="idf">attribute</span> specifies an attribute to appear in the manifest.</div><div id="pp-d2178e422" class="tooltip"><span class="idf">section</span> defines a section containing per-entry attributes.</div><div id="pp-d2178e428" class="tooltip"><span class="idf">jar</span> specifies the name of the JAR to sign.</div><div id="pp-d2178e433" class="tooltip"><span class="idf">keystore</span> specifies the path of the keystore to use.</div><div id="pp-d2178e438" class="tooltip"><span class="idf">alias</span> contains the name of the key to use from the keystore.</div><div id="pp-d2178e443" class="tooltip"><span class="idf">storepass</span> is the password to use for the keystore. Obviously you should be careful only to use development keys in your ant file, if any, but never any production passwords.</div><div id="pp-d2178e448" class="tooltip"><span class="idf">destDir</span> specifies the destination directory for signed JARs, if you don't want to modify the existing JARs. If you omit it, the exististing JARs will be signed.</div><div id="pp-d2178e453" class="tooltip">If <span class="idf">lazy</span> is <span class="idf">true</span>, only files that are not already signed will be signed.</div><div id="pp-d2178e463" class="tooltip">If <span class="idf">preservelastmodified</span> is <span class="idf">true</span>, the resulting signed JARs will have the same last-modified date as the unsigned JARs.</div><div id="ttCloseBar" class="closeBar"><a href="#" onclick="return tlClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div><div id="topicCloseBar" class="closeBar"><a href="#" onclick="return tpcClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div></div></body></html>