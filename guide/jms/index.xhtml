<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/1999/xhtml" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:page="http://tjansen.de/refPage" xmlns:i="http://tjansen.de/internal"><head><title>JMS Guide</title><meta http-equiv="X-UA-Compatible" content="chrome=1"/><meta http-equiv="content-language" content="en"/><link rel="shortcut icon" href="../../images/favicon.png" type="image/png"/><link rel="stylesheet" type="text/css" href="../../style/style.css"/><script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-6791190-2']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
})();
</script><script type="text/javascript" src="../../js/all.js"/></head><body id="body"><div id="visibleContent"><div id="top"><a href="/"><img src="../../images/titlebar.png" alt="Jarfiller.com"/></a></div><div id="titleArea"><h1>JMS Guide</h1><p id="titleIntro">Send and receive asynchronous messages in Java using the Java Messaging Service</p></div><div id="main"><div id="bodycolumn"><div id="options">Options: <a href="#" onclick="return navToggle();">Table of Content</a>, <a href="jmsoverview.xhtml">Multi-Page Version</a></div><h2 id="sec_jmsoverview" class="sectionHead"><a name="jmsoverview">Overview</a></h2><div class="sectionExpandAll">
			(<a href="#" onclick="&#xA;return showAll([['colla_usecases','sec_usecases'],['colla_requirements','sec_requirements'], null]); &#xA;">expand everything</a>)
		</div><div class="subSecRow1" id="sec_intro"><div class="subSecHead" id="sechd_intro"><a class="multipageHeadLink" href="jmsoverview.xhtml#intro" name="intro">Intro</a></div><div class="subSecContent" id="seccnt_intro"><p class="subSecExplanation"> The Java Message Service (JMS) allows Java applications to <em>send and receive messages asynchronously</em>. It can be used for <em>communication between server applications</em>, but also within an application to postpone tasks or to distribute them to components.<br/> In order to use JMS, you usually need some sort of messaging provider. This can be a stand-alone server, such as <a href="http://activemq.apache.org/">ActiveMQ</a> or <a href="http://www-01.ibm.com/software/integration/wmq/">Websphere MQ</a>, or a messaging implementation that is part of an application server like the <a href="http://www.jboss.org/jbossas/">JBoss Application Server</a>. The latter is often the easiest solution, as long as sender and receiver both run inside the same application server. </p></div></div><div id="colla_usecases" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="jmsoverview.xhtml#usecases" name="usecases">Use Cases</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('usecases');">When should JMS be used?</a></div></div></div><div class="subSecRow2" id="sec_usecases" style="display: none"><div class="subSecHead" id="sechd_usecases"><a class="multipageHeadLink" href="jmsoverview.xhtml#usecases" name="usecases">Use Cases</a></div><div class="subSecContent" id="seccnt_usecases"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('usecases');">When should JMS be used?</a></div><p class="subSecExplanation">Use JMS when..</p><ul class="subSecList"><li>you want to <em>exchange messages reliably</em> between servers in the same network (<a href="#" id="tl-d812e268" class="dottedTooltip" onclick="return tlClick('tl-d812e268','pp-d812e268');" onmouseover="return tlOver('tl-d812e268','pp-d812e268');" onmouseout="return tlOut('tl-d812e268','pp-d812e268');">more</a>)</li><li>or, inside an application server, you want to <em>split up work into smaller chunks</em> (<a href="#" id="tl-d812e276" class="dottedTooltip" onclick="return tlClick('tl-d812e276','pp-d812e276');" onmouseover="return tlOver('tl-d812e276','pp-d812e276');" onmouseout="return tlOut('tl-d812e276','pp-d812e276');">more</a>)</li><li>there is a direct connection between the message server and its clients (no firewalls etc)</li></ul><h4 class="subSecMiniHeadline">Alternatives</h4><p class="subSecExplanation"> The main alternative to JMS are <em><a href="http://en.wikipedia.org/wiki/Remote_procedure_call">RPC</a> systems</em> that allow you to invoke functions on remote systems. For <a href="http://en.wikipedia.org/wiki/Client-server">client/server</a> models they are almost always easier to use. On the other hand, making a message exchange reliable can be quite a challenge with RPCs. </p><ul class="subSecList"><li><a href="http://en.wikipedia.org/wiki/SOAP_(protocol)">SOAP</a> with <a href="http://en.wikipedia.org/wiki/JAX-WS">JAX-WS</a> is the right choice when you need to get through web proxies and firewalls, or when interoperability with non-Java systems is important.</li><li><a href="http://en.wikipedia.org/wiki/Java_remote_method_invocation">RMI</a>, Java's built-in RPC mechanism, will get you started quickly and requires little initial effort. It works with Java endpoints only though, and there are some serious problems you need to consider (<a href="#" id="tl-d812e311" class="dottedTooltip" onclick="return tlClick('tl-d812e311','pp-d812e311');" onmouseover="return tlOver('tl-d812e311','pp-d812e311');" onmouseout="return tlOut('tl-d812e311','pp-d812e311');">more</a>).</li><li><a href="http://en.wikipedia.org/wiki/Corba">CORBA</a>, either via Java's CORBA APIs or with RMI-IIOP, is old and complicated. Don't use unless you are required to.</li></ul></div></div><div id="colla_requirements" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="jmsoverview.xhtml#requirements" name="requirements">Requirements</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('requirements');">What do you need for JMS?</a></div></div></div><div class="subSecRow1" id="sec_requirements" style="display: none"><div class="subSecHead" id="sechd_requirements"><a class="multipageHeadLink" href="jmsoverview.xhtml#requirements" name="requirements">Requirements</a></div><div class="subSecContent" id="seccnt_requirements"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('requirements');">What do you need for JMS?</a></div><p class="subSecExplanation">For JMS you need...</p><ul class="subSecList"><li><em>a messaging server</em>, for example <a href="http://activemq.apache.org/">ActiveMQ</a> or <a href="http://www-01.ibm.com/software/integration/wmq/">Websphere MQ</a>. Or a messaging engine integrated into an application server such as <a href="http://www.jboss.org/jbossas/">JBoss</a>'. There are also some peer-to-peer JMS system, e.g. <a href="http://sourceforge.net/projects/mantaray/">Mantaray</a>.</li><li>a <em>JMS provider</em> for your server (basically a driver for your server)</li></ul></div></div><div class="subSecRow2" id="sec_destinations"><div class="subSecHead" id="sechd_destinations"><a class="multipageHeadLink" href="jmsoverview.xhtml#destinations" name="destinations">Destinations</a></div><div class="subSecContent" id="seccnt_destinations"><p class="subSecExplanation"><em>Destinations</em> are the things you send messages to and receive messages from. There are two kinds of destination defined in the JMS standard:</p><ul class="subSecList"><li><em>Queues</em> allow only one receiver per message. If the message is read and acknowledged, it will be removed from the queue.</li><li><em>Topics</em> allow several subscribers to receive messages. A message stays in the <span class="idf">Topic</span> until all subscribers read and acknowledged it (<a href="#" id="tl-d812e387" class="dottedTooltip" onclick="return tlClick('tl-d812e387','pp-d812e387');" onmouseover="return tlOver('tl-d812e387','pp-d812e387');" onmouseout="return tlOut('tl-d812e387','pp-d812e387');">more</a>).</li></ul><p class="subSecExplanation"> Both topics and queues have in common that there can be several senders, and that messages will always be received in the order they have been sent. </p></div></div><h2 id="sec_standaloneclient" class="sectionHead"><a name="standaloneclient">Sending and Receiving Messages (Standalone Client)</a></h2><div class="sectionExpandAll">
			(<a href="#" onclick="&#xA;return showAll([['colla_jndi','sec_jndi'],['colla_activemqsetup','sec_activemqsetup'],['colla_webspheremqsetup','sec_webspheremqsetup'], null]); &#xA;">expand everything</a>)
		</div><div class="subSecRow1" id="sec_sending"><div class="subSecHead" id="sechd_sending"><a class="multipageHeadLink" href="standaloneclient.xhtml#sending" name="sending">Sending a message</a><br/>(<a href="#" id="tl-d812e415" class="dottedTooltip" onclick="return tlClick('tl-d812e415','pp-d812e420');" onmouseover="return tlOver('tl-d812e415','pp-d812e420');" onmouseout="return tlOut('tl-d812e415','pp-d812e420');">more</a>)
		</div><div class="subSecContent" id="seccnt_sending"><pre class="subSecCode"><code><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/ConnectionFactory.html" class="javadoc">ConnectionFactory</a> factory = 
  new ActiveMQConnectionFactory("tcp://localhost:61616");  <span class="cmt">// <strong class="warn">ActiveMQ-specific</strong> (<a href="#" id="tl-d812e457" class="dottedTooltip" onclick="return tlClick('tl-d812e457','pp-d812e457');" onmouseover="return tlOver('tl-d812e457','pp-d812e457');" onmouseout="return tlOut('tl-d812e457','pp-d812e457');">more</a>)</span>

<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html" class="javadoc">Connection</a> con = factory.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/ConnectionFactory.html#createConnection()" class="javadoc">createConnection</a>();

try {
  <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html" class="javadoc">Session</a> session = 
      con.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html#createSession(boolean, int)" class="javadoc">createSession</a>(false, <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#AUTO_ACKNOWLEDGE" class="javadoc">Session.AUTO_ACKNOWLEDGE</a>);  <span class="cmt">// non-transacted session (<a href="#" id="tl-d812e510" class="dottedTooltip" onclick="return tlClick('tl-d812e510','pp-d812e510');" onmouseover="return tlOver('tl-d812e510','pp-d812e510');" onmouseout="return tlOut('tl-d812e510','pp-d812e510');">more</a>)</span>

  <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Queue.html" class="javadoc">Queue</a> queue = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createQueue(java.lang.String)" class="javadoc">createQueue</a>("test.queue");         <span class="cmt">// <strong class="warn">only specifies queue name</strong> (<a href="#" id="tl-d812e546" class="dottedTooltip" onclick="return tlClick('tl-d812e546','pp-d812e546');" onmouseover="return tlOver('tl-d812e546','pp-d812e546');" onmouseout="return tlOut('tl-d812e546','pp-d812e546');">more</a>)</span>

  <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageProducer.html" class="javadoc">MessageProducer</a> producer = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createProducer(javax.jms.Destination)" class="javadoc">createProducer</a>(queue);
  <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html" class="javadoc">Message</a> msg = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createTextMessage(java.lang.String)" class="javadoc">createTextMessage</a>("hello queue");  <span class="cmt">// text message (<a href="#" id="tl-d812e589" class="dottedTooltip" onclick="return tlClick('tl-d812e589','pp-d812e589');" onmouseover="return tlOver('tl-d812e589','pp-d812e589');" onmouseout="return tlOut('tl-d812e589','pp-d812e589');">more</a>)</span>
  producer.<em><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageProducer.html#send(javax.jms.Message)" class="javadoc">send</a></em>(msg);
}
finally {
  con.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html#close()" class="javadoc">close</a>();                                             <span class="cmt">// free all resources (<a href="#" id="tl-d812e615" class="dottedTooltip" onclick="return tlClick('tl-d812e615','pp-d812e615');" onmouseover="return tlOver('tl-d812e615','pp-d812e615');" onmouseout="return tlOut('tl-d812e615','pp-d812e615');">more</a>)</span>
}
</code></pre></div></div><div class="subSecRow2" id="sec_polling"><div class="subSecHead" id="sechd_polling"><a class="multipageHeadLink" href="standaloneclient.xhtml#polling" name="polling">Polling for messages</a><br/>(<a href="#" id="tl-d812e645" class="dottedTooltip" onclick="return tlClick('tl-d812e645','pp-d812e650');" onmouseover="return tlOver('tl-d812e645','pp-d812e650');" onmouseout="return tlOut('tl-d812e645','pp-d812e650');">more</a>)
		</div><div class="subSecContent" id="seccnt_polling"><pre class="subSecCode"><code><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/ConnectionFactory.html" class="javadoc">ConnectionFactory</a> factory = 
  new ActiveMQConnectionFactory("tcp://localhost:61616");  <span class="cmt">// <strong class="warn">ActiveMQ-specific</strong> (<a href="#" id="tl-d812e687" class="dottedTooltip" onclick="return tlClick('tl-d812e687','pp-d812e457');" onmouseover="return tlOver('tl-d812e687','pp-d812e457');" onmouseout="return tlOut('tl-d812e687','pp-d812e457');">more</a>)</span>

<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html" class="javadoc">Connection</a> con = factory.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/ConnectionFactory.html#createConnection()" class="javadoc">createConnection</a>();

try {
  <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html" class="javadoc">Session</a> session = 
      con.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html#createSession(boolean, int)" class="javadoc">createSession</a>(false, <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#AUTO_ACKNOWLEDGE" class="javadoc">Session.AUTO_ACKNOWLEDGE</a>);  <span class="cmt">// non-transacted session (<a href="#" id="tl-d812e721" class="dottedTooltip" onclick="return tlClick('tl-d812e721','pp-d812e721');" onmouseover="return tlOver('tl-d812e721','pp-d812e721');" onmouseout="return tlOut('tl-d812e721','pp-d812e721');">more</a>)</span>

  <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Queue.html" class="javadoc">Queue</a> queue = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createQueue(java.lang.String)" class="javadoc">createQueue</a>("test.queue");         <span class="cmt">// only specifies queue name (<a href="#" id="tl-d812e755" class="dottedTooltip" onclick="return tlClick('tl-d812e755','pp-d812e546');" onmouseover="return tlOver('tl-d812e755','pp-d812e546');" onmouseout="return tlOut('tl-d812e755','pp-d812e546');">more</a>)</span>

  <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageConsumer.html" class="javadoc">MessageConsumer</a> consumer = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createConsumer(javax.jms.Destination)" class="javadoc">createConsumer</a>(queue);

  con.<em><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html#start()" class="javadoc">start</a></em>();                                             <span class="cmt">// start the connection (<a href="#" id="tl-d812e779" class="dottedTooltip" onclick="return tlClick('tl-d812e779','pp-d812e779');" onmouseover="return tlOver('tl-d812e779','pp-d812e779');" onmouseout="return tlOut('tl-d812e779','pp-d812e779');">more</a>)</span>
  while (true) {                                           <span class="cmt">// run forever</span>
    <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html" class="javadoc">Message</a> msg = <em>consumer.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageConsumer.html#receive()" class="javadoc">receive</a></em>();                      <span class="cmt">// blocking! (<a href="#" id="tl-d812e808" class="dottedTooltip" onclick="return tlClick('tl-d812e808','pp-d812e808');" onmouseover="return tlOver('tl-d812e808','pp-d812e808');" onmouseout="return tlOut('tl-d812e808','pp-d812e808');">more</a>)</span>
    if (! (msg instanceof <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/TextMessage.html" class="javadoc">TextMessage</a>))
      throw new RuntimeException("Expected a TextMessage");
    <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/TextMessage.html" class="javadoc">TextMessage</a> tm = (<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/TextMessage.html" class="javadoc">TextMessage</a>) msg;
    System.out.println(tm.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/TextMessage.html#getText()" class="javadoc">getText</a>());                      <span class="cmt">// print message content</span>
  }
}
finally {
  con.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html#close()" class="javadoc">close</a>();                                             <span class="cmt">// free all resources (<a href="#" id="tl-d812e864" class="dottedTooltip" onclick="return tlClick('tl-d812e864','pp-d812e615');" onmouseover="return tlOver('tl-d812e864','pp-d812e615');" onmouseout="return tlOut('tl-d812e864','pp-d812e615');">more</a>)</span>
}
</code></pre></div></div><div class="subSecRow1" id="sec_messagelistener"><div class="subSecHead" id="sechd_messagelistener"><a class="multipageHeadLink" href="standaloneclient.xhtml#messagelistener" name="messagelistener">Using a MessageListener</a><br/>(<a href="#" id="tl-d812e871" class="dottedTooltip" onclick="return tlClick('tl-d812e871','pp-d812e876');" onmouseover="return tlOver('tl-d812e871','pp-d812e876');" onmouseout="return tlOut('tl-d812e871','pp-d812e876');">more</a>)
		</div><div class="subSecContent" id="seccnt_messagelistener"><pre class="subSecCode"><code><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/ConnectionFactory.html" class="javadoc">ConnectionFactory</a> factory = 
  new ActiveMQConnectionFactory("tcp://localhost:61616");  <span class="cmt">// <strong class="warn">ActiveMQ-specific</strong> (<a href="#" id="tl-d812e910" class="dottedTooltip" onclick="return tlClick('tl-d812e910','pp-d812e457');" onmouseover="return tlOver('tl-d812e910','pp-d812e457');" onmouseout="return tlOut('tl-d812e910','pp-d812e457');">more</a>)</span>

<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html" class="javadoc">Connection</a> con = factory.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/ConnectionFactory.html#createConnection()" class="javadoc">createConnection</a>();

try {
  <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html" class="javadoc">Session</a> session = 
      con.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html#createSession(boolean, int)" class="javadoc">createSession</a>(false, <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#AUTO_ACKNOWLEDGE" class="javadoc">Session.AUTO_ACKNOWLEDGE</a>);  <span class="cmt">// non-transacted session (<a href="#" id="tl-d812e944" class="dottedTooltip" onclick="return tlClick('tl-d812e944','pp-d812e721');" onmouseover="return tlOver('tl-d812e944','pp-d812e721');" onmouseout="return tlOut('tl-d812e944','pp-d812e721');">more</a>)</span>

  <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Queue.html" class="javadoc">Queue</a> queue = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createQueue(java.lang.String)" class="javadoc">createQueue</a>("test.queue");         <span class="cmt">// only specifies queue name (<a href="#" id="tl-d812e958" class="dottedTooltip" onclick="return tlClick('tl-d812e958','pp-d812e546');" onmouseover="return tlOver('tl-d812e958','pp-d812e546');" onmouseout="return tlOut('tl-d812e958','pp-d812e546');">more</a>)</span>

  <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageConsumer.html" class="javadoc">MessageConsumer</a> consumer = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createConsumer(javax.jms.Destination)" class="javadoc">createConsumer</a>(queue);

  consumer.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageConsumer.html#setMessageListener(javax.jms.MessageListener)" class="javadoc"><em>setMessageListener</em></a>(new <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageListener.html" class="javadoc">MessageListener</a>() {
    public void <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/onMessage.html" class="javadoc"><em>onMessage</em></a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html" class="javadoc">Message</a> msg) {
      try {
        if (! (msg instanceof <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/TextMessage.html" class="javadoc">TextMessage</a>))
          throw new RuntimeException("no text message");
        <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/TextMessage.html" class="javadoc">TextMessage</a> tm = (<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/TextMessage.html" class="javadoc">TextMessage</a>) msg;
        System.out.println(tm.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/TextMessage.html#getText()" class="javadoc">getText</a>());                  <span class="cmt">// print message</span>
      }
      catch (<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/JMSException.html" class="javadoc">JMSException</a> e) {
        System.err.println("Error reading message");
      }
    }
  });

  con.<em><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html#start()" class="javadoc">start</a></em>();                                             <span class="cmt">// start the connection (<a href="#" id="tl-d812e1056" class="dottedTooltip" onclick="return tlClick('tl-d812e1056','pp-d812e1056');" onmouseover="return tlOver('tl-d812e1056','pp-d812e1056');" onmouseout="return tlOut('tl-d812e1056','pp-d812e1056');">more</a>)</span>
  Thread.sleep(60 * 1000);                                 <span class="cmt">// receive messages for 60s (<a href="#" id="tl-d812e1069" class="dottedTooltip" onclick="return tlClick('tl-d812e1069','pp-d812e1069');" onmouseover="return tlOver('tl-d812e1069','pp-d812e1069');" onmouseout="return tlOut('tl-d812e1069','pp-d812e1069');">more</a>)</span>
finally {
  con.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html#close()" class="javadoc">close</a>();                                             <span class="cmt">// free all resources (<a href="#" id="tl-d812e1089" class="dottedTooltip" onclick="return tlClick('tl-d812e1089','pp-d812e615');" onmouseover="return tlOver('tl-d812e1089','pp-d812e615');" onmouseout="return tlOut('tl-d812e1089','pp-d812e615');">more</a>)</span>
}
</code></pre></div></div><div id="colla_jndi" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="standaloneclient.xhtml#jndi" name="jndi">JNDI</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('jndi');">Getting the ConnectionFactory via JNDI</a></div></div></div><div class="subSecRow2" id="sec_jndi" style="display: none"><div class="subSecHead" id="sechd_jndi"><a class="multipageHeadLink" href="standaloneclient.xhtml#jndi" name="jndi">JNDI</a></div><div class="subSecContent" id="seccnt_jndi"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('jndi');">Getting the ConnectionFactory via JNDI</a></div><p class="subSecExplanation">The only (relatively) non-implementation-specific way to obtain the JMS implementation's <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/ConnectionFactory.html" class="javadoc">ConnectionFactory</a> and <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Destination.html" class="javadoc">Destination</a>s is to <em>get them from a JNDI server</em>. This is usually only possibly if you write your program as client for an application server. The following example shows how to do this with JBoss: </p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/util/Hashtable.html" class="javadoc">Hashtable</a>&lt;String,String&gt; env = new <a href="http://java.sun.com/javase/6/docs/api/java/util/Hashtable.html" class="javadoc">Hashtable</a>&lt;String, String&gt;();
env.put("java.naming.factory.initial",                        <span class="cmt">// <strong class="warn">JBoss-specific</strong> (<a href="#" id="tl-d812e1134" class="dottedTooltip" onclick="return tlClick('tl-d812e1134','pp-d812e1134');" onmouseover="return tlOver('tl-d812e1134','pp-d812e1134');" onmouseout="return tlOut('tl-d812e1134','pp-d812e1134');">more</a>)</span>
        "org.jnp.interfaces.NamingContextFactory");
env.put("java.naming.provider.url", "jnp://localhost:1099");  <span class="cmt">// host address</span>
env.put("java.naming.factory.url.pkgs", 
        "org.jboss.naming:org.jnp.interfaces");
<a href="http://java.sun.com/javase/6/docs/api/javax/naming/Context.html" class="javadoc">Context</a> ctx = new <a href="http://java.sun.com/javase/6/docs/api/javax/naming/InitialContext.html" class="javadoc">InitialContext</a>(env);

<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/ConnectionFactory.html" class="javadoc">ConnectionFactory</a> factory = (<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/ConnectionFactory.html" class="javadoc">ConnectionFactory</a>)
           ctx.<a href="http://java.sun.com/javase/6/docs/api/javax/naming/Context.html#lookup(java.lang.String)" class="javadoc">lookup</a>("<em>/ConnectionFactory</em>");                  <span class="cmt">// obtain factory (<a href="#" id="tl-d812e1180" class="dottedTooltip" onclick="return tlClick('tl-d812e1180','pp-d812e1180');" onmouseover="return tlOver('tl-d812e1180','pp-d812e1180');" onmouseout="return tlOut('tl-d812e1180','pp-d812e1180');">more</a>)</span>
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Queue.html" class="javadoc">Queue</a> queue = (<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Queue.html" class="javadoc">Queue</a>) 
           ctx.<a href="http://java.sun.com/javase/6/docs/api/javax/naming/Context.html#lookup(java.lang.String)" class="javadoc">lookup</a>("<em>/queue/JarfillerQueue</em>");               <span class="cmt">// obtain queue (<a href="#" id="tl-d812e1205" class="dottedTooltip" onclick="return tlClick('tl-d812e1205','pp-d812e1205');" onmouseover="return tlOver('tl-d812e1205','pp-d812e1205');" onmouseout="return tlOut('tl-d812e1205','pp-d812e1205');">more</a>)</span>
<span class="abstract">...</span>
</code></pre></div></div><div id="colla_activemqsetup" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="standaloneclient.xhtml#activemqsetup" name="activemqsetup">ActiveMQ Setup</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('activemqsetup');">How to set up ActiveMQ</a></div></div></div><div class="subSecRow1" id="sec_activemqsetup" style="display: none"><div class="subSecHead" id="sechd_activemqsetup"><a class="multipageHeadLink" href="standaloneclient.xhtml#activemqsetup" name="activemqsetup">ActiveMQ Setup</a></div><div class="subSecContent" id="seccnt_activemqsetup"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('activemqsetup');">How to set up ActiveMQ</a></div><p class="subSecExplanation">Setting up a ActiveMQ server is fairly easy:</p><ul class="subSecList"><li>Download a ActiveMQ distribution from <a href="http://activemq.apache.org">activemq.apache.org</a> and unpack it somewhere</li><li>You can start the server immediately, running unsecured on localhost, using the script <span class="idf">bin/activemq</span></li><li>When it is running, you can access your local server's console on <a href="http://localhost:8161/admin/">http://localhost:8161/admin/</a></li><li>Configure it by modifying <span class="idf">conf/activemq.xml</span></li></ul><p class="subSecExplanation">In order to compile and run the client, just include the JAR files from the server's <span class="idf">lib</span> directory in your CLASSPATH.</p></div></div><div id="colla_webspheremqsetup" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="standaloneclient.xhtml#webspheremqsetup" name="webspheremqsetup">Websphere MQ Setup</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('webspheremqsetup');">How to set up Websphere MQ</a></div></div></div><div class="subSecRow2" id="sec_webspheremqsetup" style="display: none"><div class="subSecHead" id="sechd_webspheremqsetup"><a class="multipageHeadLink" href="standaloneclient.xhtml#webspheremqsetup" name="webspheremqsetup">Websphere MQ Setup</a></div><div class="subSecContent" id="seccnt_webspheremqsetup"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('webspheremqsetup');">How to set up Websphere MQ</a></div><p class="subSecExplanation">Setting up a client for a Websphere MQ server is similar to ActiveMQ. You only need to create a <a href="http://publib.boulder.ibm.com/infocenter/wmqv6/v6r0/topic/com.ibm.mq.csqzaw.doc/uj27600_.htm" class="javadoc">MQConnectionFactory</a> instance and configure it. The configuration of Websphere MQ is a bit more complicated that ActiveMQ's, because you need to create a queue manager and a channel in the server, and then specify it in the client. But once the client has obtained the <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/ConnectionFactory.html" class="javadoc">ConnectionFactory</a>, the usage is exactly like Active MQ's:</p><pre class="subSecCode"><code>import com.ibm.mq.jms.*;
<span class="abstract">...</span>
<a href="http://publib.boulder.ibm.com/infocenter/wmqv6/v6r0/topic/com.ibm.mq.csqzaw.doc/uj27600_.htm" class="javadoc">MQConnectionFactory</a> factory = <a href="http://publib.boulder.ibm.com/infocenter/wmqv6/v6r0/topic/com.ibm.mq.csqzaw.doc/uj27620_.htm" class="javadoc">new MQConnectionFactory</a>();
factory.<a href="http://publib.boulder.ibm.com/infocenter/wmqv6/v6r0/topic/com.ibm.mq.csqzaw.doc/uj28480_.htm" class="javadoc">setHostName</a>("localhost");                          <span class="cmt">// server IP address / name</span>
factory.<a href="http://publib.boulder.ibm.com/infocenter/wmqv6/v6r0/topic/com.ibm.mq.csqzaw.doc/uj28880_.htm" class="javadoc">setTransportType</a>(<a href="http://publib.boulder.ibm.com/infocenter/wmqv6/v6r0/topic/com.ibm.mq.csqzaw.doc/uj31870_.htm" class="javadoc">JMSC.MQJMS_TP_CLIENT_MQ_TCPIP</a>);   <span class="cmt">// for TCP/IP</span>
factory.<a href="http://publib.boulder.ibm.com/infocenter/wmqv6/v6r0/topic/com.ibm.mq.csqzaw.doc/uj28370_.htm" class="javadoc">setChannel</a>("my.channel");                          <span class="cmt">// server connection channel to use</span>
factory.<a href="http://publib.boulder.ibm.com/infocenter/wmqv6/v6r0/topic/com.ibm.mq.csqzaw.doc/uj28650_.htm" class="javadoc">setQueueManager</a>("my.queue.manager");               <span class="cmt">// queue manager to use</span>
</code></pre><p class="subSecExplanation">In order to compile and run the client, you only need two JAR files: <span class="idf">com.ibm.mq.jar</span> and <span class="idf">com.ibm.mq.jms.jar</span>. Both should ship with the Websphere MQ client distributions.</p></div></div><h2 id="sec_sendingreceivingejb3" class="sectionHead"><a name="sendingreceivingejb3">Sending and Receiving Messages in EJB 3 Applications</a></h2><div class="subSecRow1" id="sec_sendingejb3"><div class="subSecHead" id="sechd_sendingejb3"><a class="multipageHeadLink" href="sendingreceivingejb3.xhtml#sendingejb3" name="sendingejb3">Sending Messages</a><br/>(<a href="#" id="tl-d812e1354" class="dottedTooltip" onclick="return tlClick('tl-d812e1354','pp-d812e1359');" onmouseover="return tlOver('tl-d812e1354','pp-d812e1359');" onmouseout="return tlOut('tl-d812e1354','pp-d812e1359');">more</a>)
		</div><div class="subSecContent" id="seccnt_sendingejb3"><pre class="subSecCode"><code><span class="cmt">// MySenderLocal.java: the interface of the sending bean</span>
@Local
public interface MySenderLocal {
  void sendMessage(String txt) throws <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/JMSException.html" class="javadoc">JMSException</a>;
}

</code></pre><pre class="subSecCode"><code><span class="cmt">// MySenderLocal.java: implementation of MySenderLocal</span>
@Stateless
public class MySender implements MySenderLocal {

  <em><a href="http://java.sun.com/javaee/5/docs/api/javax/annotation/Resource.html" class="javadoc">@Resource</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/annotation/Resource.html#mappedName()" class="javadoc">mappedName</a>="/ConnectionFactory")</em>     <span class="cmt">// inject <span class="idf">ConnectionFactory</span> (<a href="#" id="tl-d812e1433" class="dottedTooltip" onclick="return tlClick('tl-d812e1433','pp-d812e1433');" onmouseover="return tlOver('tl-d812e1433','pp-d812e1433');" onmouseout="return tlOut('tl-d812e1433','pp-d812e1433');">more</a>)</span>
  private <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/ConnectionFactory.html" class="javadoc">ConnectionFactory</a> factory;

  <em><a href="http://java.sun.com/javaee/5/docs/api/javax/annotation/Resource.html" class="javadoc">@Resource</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/annotation/Resource.html#mappedName()" class="javadoc">mappedName</a>="/queue/JarfillerQueue")</em>  <span class="cmt">// inject <span class="idf">Queue</span> (<a href="#" id="tl-d812e1470" class="dottedTooltip" onclick="return tlClick('tl-d812e1470','pp-d812e1470');" onmouseover="return tlOver('tl-d812e1470','pp-d812e1470');" onmouseout="return tlOut('tl-d812e1470','pp-d812e1470');">more</a>)</span>
  private <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Queue.html" class="javadoc">Queue</a> target;

  <span class="cmt">// Sends the given string as text message:</span>
  public void <em>sendMessage(String txt)</em> throws <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/JMSException.html" class="javadoc">JMSException</a> {
    <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html" class="javadoc">Connection</a> con = factory.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/ConnectionFactory.html#createConnection()" class="javadoc">createConnection</a>();
    try {
      <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html" class="javadoc">Session</a> session = con.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html#createSession(boolean, int)" class="javadoc">createSession</a>(false, <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#AUTO_ACKNOWLEDGE" class="javadoc">Session.AUTO_ACKNOWLEDGE</a>);
      <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageProducer.html" class="javadoc">MessageProducer</a> producer = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createProducer(javax.jms.Destination)" class="javadoc">createProducer</a>(target);
      producer.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageProducer.html#send(javax.jms.Message)" class="javadoc">send</a>(session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createTextMessage(java.lang.String)" class="javadoc">createTextMessage</a>(txt));
    }
    finally {
      con.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html#close()" class="javadoc">close</a>();
    }
  }
}
</code></pre></div></div><div class="subSecRow2" id="sec_receivingejb3"><div class="subSecHead" id="sechd_receivingejb3"><a class="multipageHeadLink" href="sendingreceivingejb3.xhtml#receivingejb3" name="receivingejb3">Receiving messages</a><br/>(<a href="#" id="tl-d812e1573" class="dottedTooltip" onclick="return tlClick('tl-d812e1573','pp-d812e1578');" onmouseover="return tlOver('tl-d812e1573','pp-d812e1578');" onmouseout="return tlOut('tl-d812e1573','pp-d812e1578');">more</a>)
		</div><div class="subSecContent" id="seccnt_receivingejb3"><pre class="subSecCode"><code><a href="http://java.sun.com/javaee/5/docs/api/javax/ejb/MessageDriven.html" class="javadoc"><em>@MessageDriven</em></a>(                                     <span class="cmt">// <em>Message-driven bean</em> (MDB)</span>
  <a href="http://java.sun.com/javaee/5/docs/api/javax/ejb/MessageDriven.html#activationConfig()" class="javadoc">activationConfig</a> = { <a href="http://java.sun.com/javaee/5/docs/api/javax/ejb/ActivationConfigProperty.html" class="javadoc">@ActivationConfigProperty</a>(   <span class="cmt">// activation configuration (<a href="#" id="tl-d812e1609" class="dottedTooltip" onclick="return tlClick('tl-d812e1609','pp-d812e1609');" onmouseover="return tlOver('tl-d812e1609','pp-d812e1609');" onmouseout="return tlOut('tl-d812e1609','pp-d812e1609');">more</a>)</span>
    <a href="http://java.sun.com/javaee/5/docs/api/javax/ejb/ActivationConfigProperty.html#propertyName()" class="javadoc">propertyName</a> = "destinationType", 
    <a href="http://java.sun.com/javaee/5/docs/api/javax/ejb/ActivationConfigProperty.html#propertyValue()" class="javadoc">propertyValue</a> = "javax.jms.Queue"
    ),
    <a href="http://java.sun.com/javaee/5/docs/api/javax/ejb/ActivationConfigProperty.html" class="javadoc">@ActivationConfigProperty</a>(
    <a href="http://java.sun.com/javaee/5/docs/api/javax/ejb/ActivationConfigProperty.html#propertyName()" class="javadoc">propertyName</a> = "destination", 
    <a href="http://java.sun.com/javaee/5/docs/api/javax/ejb/ActivationConfigProperty.html#propertyValue()" class="javadoc">propertyValue</a> = "<em>/queue/JarfillerQueue</em>"         <span class="cmt">// destination's JNDI name</span>
  ) })
public class MyMDB implements <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageListener.html" class="javadoc"><em>MessageListener</em></a> {

  public void <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/onMessage.html" class="javadoc">onMessage</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html" class="javadoc">Message</a> message) {          <span class="cmt">// process message here</span>
    <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/TextMessage.html" class="javadoc">TextMessage</a> textMsg = (<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/TextMessage.html" class="javadoc">TextMessage</a>) message;
    try {
      System.out.println("Got message: " + textMsg.getText());
    }
    catch (<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/JMSException.html" class="javadoc">JMSException</a> e) {
      System.out.println("Error retrieving message content");
    }
  }
}
</code></pre></div></div><div id="colla_jbosssetup" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="sendingreceivingejb3.xhtml#jbosssetup" name="jbosssetup">JBoss 5.x Setup</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('jbosssetup');">How to set up JBoss 5.x</a></div></div></div><div class="subSecRow1" id="sec_jbosssetup" style="display: none"><div class="subSecHead" id="sechd_jbosssetup"><a class="multipageHeadLink" href="sendingreceivingejb3.xhtml#jbosssetup" name="jbosssetup">JBoss 5.x Setup</a></div><div class="subSecContent" id="seccnt_jbosssetup"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('jbosssetup');">How to set up JBoss 5.x</a></div><p class="subSecExplanation">Before you can deploy the message-driven bean and the sender bean from the previous examples in a <a href="http://www.jboss.org/jbossas/">JBoss Application Server</a>, you need to <em>configure JBoss Messaging</em>. In the default profile, the <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/ConnectionFactory.html" class="javadoc">ConnectionFactory</a> is already set up and available under the JNDI name "/ConnectionFactory". You can find this setting in the file "server/<span class="abstract">&lt;profile-name&gt;</span>/deploy/messaging/connection-factories-service.xml".<br/> You only need to declare your queue (or, generally speaking, your destinations). The usual place to do this is the file "server/<span class="abstract">&lt;profile-name&gt;</span>/deploy/messaging/jbossmq-destination-service.xml". If the file does not exist, just create it. If it does exist, just <em>add the following <span class="idf">&lt;mbean&gt;</span> element to <span class="idf">jbossmq-destination-service.xml</span></em>.<br/> In order to create a single queue with the JNDI name "/queue/JarfillerQueue", the file should look like this:</p><pre class="subSecCode"><code>&lt;server&gt;
  &lt;mbean code="org.jboss.mq.server.jmx.Queue"
         name="jboss.mq.destination:service=Queue,<em>name=JarfillerQueue</em>"&gt;
    &lt;depends optional-attribute-name="DestinationManager"&gt;
       jboss.mq:service=DestinationManager
    &lt;/depends&gt;
  &lt;/mbean&gt;
&lt;/server&gt;
</code></pre><p class="subSecExplanation"> The prefix "/queue/" of the JNDI name comes from the file "messaging-service.xml". </p></div></div><h2 id="sec_topics" class="sectionHead"><a name="topics">Using Topics</a></h2><div class="subSecRow2" id="sec_sendingtopics"><div class="subSecHead" id="sechd_sendingtopics"><a class="multipageHeadLink" href="topics.xhtml#sendingtopics" name="sendingtopics">Sending Topic Messages</a></div><div class="subSecContent" id="seccnt_sendingtopics"><p class="subSecExplanation"><em>Sending messages to a <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Topic.html" class="javadoc">Topic</a> is identical to sending them to a <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Queue.html" class="javadoc">Queue</a></em>. Just obtain a <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Topic.html" class="javadoc">Topic</a> instead of the <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Queue.html" class="javadoc">Queue</a>. If you are writing a stand-alone client, use <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createTopic(java.lang.String)" class="javadoc">createTopic</a> instead of <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createQueue(java.lang.String)" class="javadoc">createQueue</a> to get the <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Topic.html" class="javadoc">Topic</a> instance.</p></div></div><div class="subSecRow1" id="sec_receivingtopics"><div class="subSecHead" id="sechd_receivingtopics"><a class="multipageHeadLink" href="topics.xhtml#receivingtopics" name="receivingtopics">Receiving Topic Messages</a><br/>(<a href="#" id="tl-d812e1828" class="dottedTooltip" onclick="return tlClick('tl-d812e1828','pp-d812e1833');" onmouseover="return tlOver('tl-d812e1828','pp-d812e1833');" onmouseout="return tlOut('tl-d812e1828','pp-d812e1833');">more</a>)
		</div><div class="subSecContent" id="seccnt_receivingtopics"><pre class="subSecCode"><code><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html" class="javadoc">Connection</a> con = <span class="abstract">...</span>;
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html" class="javadoc">Session</a> session = <span class="abstract">...</span>;
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Topic.html" class="javadoc">Topic</a> topic = <span class="abstract">...</span>;

<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageConsumer.html" class="javadoc">MessageConsumer</a> consumer = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createConsumer(javax.jms.Destination)" class="javadoc"><em>createConsumer</em></a>(topic);  <span class="cmt">// <em>subscribe</em> (<a href="#" id="tl-d812e1888" class="dottedTooltip" onclick="return tlClick('tl-d812e1888','pp-d812e1888');" onmouseover="return tlOver('tl-d812e1888','pp-d812e1888');" onmouseout="return tlOut('tl-d812e1888','pp-d812e1888');">more</a>)</span>
con.<em><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html#start()" class="javadoc">start</a></em>();                                               <span class="cmt">// start the connection</span>
</code></pre><p class="subSecExplanation"> Now you have a <a href="#" id="tl-d812e1907" class="dottedTooltip" onclick="return tlClick('tl-d812e1907','pp-d812e1910');" onmouseover="return tlOver('tl-d812e1907','pp-d812e1910');" onmouseout="return tlOut('tl-d812e1907','pp-d812e1910');">non-durable subscription</a>. You can either poll for or listen to messages, as you would on a queue.<br/> In order to end the non-durable subscription, close either the <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageConsumer.html" class="javadoc">MessageConsumer</a> or the whole <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html" class="javadoc">Connection</a>: </p><pre class="subSecCode"><code>consumer.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageConsumer.html#close()" class="javadoc">close</a>();  <span class="cmt">// <em>unsubscribe</em> (nondurable only)</span>
</code></pre></div></div><div class="subSecRow2" id="sec_durablesubscription"><div class="subSecHead" id="sechd_durablesubscription"><a class="multipageHeadLink" href="topics.xhtml#durablesubscription" name="durablesubscription">Durable Subscription</a><br/>(<a href="#" id="tl-d812e1941" class="dottedTooltip" onclick="return tlClick('tl-d812e1941','pp-d812e1946');" onmouseover="return tlOver('tl-d812e1941','pp-d812e1946');" onmouseout="return tlOut('tl-d812e1941','pp-d812e1946');">more</a>)
		</div><div class="subSecContent" id="seccnt_durablesubscription"><pre class="subSecCode"><code><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html" class="javadoc">Connection</a> con = <span class="abstract">...</span>;
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html" class="javadoc">Session</a> session = <span class="abstract">...</span>;
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Topic.html" class="javadoc">Topic</a> topic = <span class="abstract">...</span>;
con.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html#setClientID(java.lang.String)" class="javadoc"><em>setClientID</em></a>("JmsTest");                                               <span class="cmt">// required! (<a href="#" id="tl-d812e2001" class="dottedTooltip" onclick="return tlClick('tl-d812e2001','pp-d812e2001');" onmouseover="return tlOver('tl-d812e2001','pp-d812e2001');" onmouseout="return tlOut('tl-d812e2001','pp-d812e2001');">more</a>)</span>

<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageConsumer.html" class="javadoc">MessageConsumer</a> consumer = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createDurableSubscriber(javax.jms.Topic, java.lang.String)" class="javadoc"><em>createDurableSubscriber</em></a>(queue, "<em>s1</em>");  <span class="cmt">// subscribe (<a href="#" id="tl-d812e2031" class="dottedTooltip" onclick="return tlClick('tl-d812e2031','pp-d812e2031');" onmouseover="return tlOver('tl-d812e2031','pp-d812e2031');" onmouseout="return tlOut('tl-d812e2031','pp-d812e2031');">more</a>)</span>
con.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html#start()" class="javadoc">start</a>();
</code></pre><p class="subSecExplanation"> Now you have a <a href="#" id="tl-d812e2043" class="dottedTooltip" onclick="return tlClick('tl-d812e2043','pp-d812e2046');" onmouseover="return tlOver('tl-d812e2043','pp-d812e2046');" onmouseout="return tlOut('tl-d812e2043','pp-d812e2046');">durable subscription</a>. If you used the <em>same client ID and subscription name</em> again, you connect to an existing subscription. Otherwise you create a new one.<br/> The subscription exists until you explicitly unsubscribe by calling the <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#unsubscribe(java.lang.String)" class="javadoc">unsubscribe</a> method. Closing the <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageConsumer.html" class="javadoc">MessageConsumer</a> does not end the durable subscription. </p></div></div><div class="subSecRow1" id="sec_endingsubscription"><div class="subSecHead" id="sechd_endingsubscription"><a class="multipageHeadLink" href="topics.xhtml#endingsubscription" name="endingsubscription">Cancelling a subscription</a></div><div class="subSecContent" id="seccnt_endingsubscription"><p class="subSecExplanation">A durable subscription must be explicitly unsubscribed (non-durable subscriptions end automatically after closing).</p><pre class="subSecCode"><code><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html" class="javadoc">Session</a> session = <span class="abstract">...</span>;
session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#unsubscribe(java.lang.String)" class="javadoc"><em>unsubscribe</em></a>("s1");  <span class="cmt">// no open <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageConsumer.html" class="javadoc">MessageConsumer</a> allowed here (<a href="#" id="tl-d812e2094" class="dottedTooltip" onclick="return tlClick('tl-d812e2094','pp-d812e2094');" onmouseover="return tlOver('tl-d812e2094','pp-d812e2094');" onmouseout="return tlOut('tl-d812e2094','pp-d812e2094');">more</a>)</span>
</code></pre></div></div><h2 id="sec_messagetypes" class="sectionHead"><a name="messagetypes">Message Types</a></h2><div class="subSecRow2" id="sec_textmessages"><div class="subSecHead" id="sechd_textmessages"><a class="multipageHeadLink" href="messagetypes.xhtml#textmessages" name="textmessages">TextMessage</a></div><div class="subSecContent" id="seccnt_textmessages"><p class="subSecExplanation">The <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/TextMessage.html" class="javadoc">TextMessage</a> contains <em>a string</em>. If you want to communicate with non-JMS systems, text messages are often the right choice (with XML in a <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/BytesMessage.html" class="javadoc">BytesMessage</a> being the main alternative), as they are supported almost everywhere and are not JMS- or Java-specific.</p><pre class="subSecCode"><code><span class="cmt">// Create message</span>
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html" class="javadoc">Session</a> session = <span class="abstract">...</span>;
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/TextMessage.html" class="javadoc">TextMessage</a> msg = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createTextMessage(java.lang.String)" class="javadoc"><em>createTextMessage</em></a>("some text here");

<span class="cmt">// Read message</span>
String text = msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/TextMessage.html#getText()" class="javadoc">getText</a>();
</code></pre></div></div><div class="subSecRow1" id="sec_mapmessages"><div class="subSecHead" id="sechd_mapmessages"><a class="multipageHeadLink" href="messagetypes.xhtml#mapmessages" name="mapmessages">MapMessage</a></div><div class="subSecContent" id="seccnt_mapmessages"><p class="subSecExplanation">The <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MapMessage.html" class="javadoc">MapMessage</a> allows you to store <em>name/value pairs</em>. The names are always strings, and the values can be either Java primitives, strings or byte arrays. The pairs do not have an order.</p><pre class="subSecCode"><code><span class="cmt">// Create message</span>
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html" class="javadoc">Session</a> session = <span class="abstract">...</span>;
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MapMessage.html" class="javadoc">MapMessage</a> msg = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createMapMessage()" class="javadoc"><em>createMapMessage</em></a>();
msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MapMessage.html#setString(java.lang.String, java.lang.String)" class="javadoc">setString</a>("title", "Thriller");
msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MapMessage.html#setInt(java.lang.String, int)" class="javadoc">setInt</a>("releaseYear", 1982);
msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MapMessage.html#setDouble(java.lang.String, double)" class="javadoc">setDouble</a>("millionsSold", 110.3);

<span class="cmt">// Read message</span>
int releaseYear = msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MapMessage.html#getInt(java.lang.String)" class="javadoc">getInt</a>("releaseYear");  <span class="cmt">// can be read in any order</span>
String title = msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MapMessage.html#getString(java.lang.String)" class="javadoc">getString</a>("title");
double millionsSold = msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MapMessage.html#getDouble(java.lang.String)" class="javadoc">getDouble</a>("millionsSold");
</code></pre></div></div><div class="subSecRow2" id="sec_streammessages"><div class="subSecHead" id="sechd_streammessages"><a class="multipageHeadLink" href="messagetypes.xhtml#streammessages" name="streammessages">StreamMessage</a></div><div class="subSecContent" id="seccnt_streammessages"><p class="subSecExplanation">The <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/StreamMessage.html" class="javadoc">StreamMessage</a> allows you to store a <em>stream of Java number and string values</em>. When received, the values must be read in exactly the same order as they have been written. </p><pre class="subSecCode"><code><span class="cmt">// Create message</span>
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html" class="javadoc">Session</a> session = <span class="abstract">...</span>;
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/StreamMessage.html" class="javadoc">StreamMessage</a> msg = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createStreamMessage()" class="javadoc"><em>createStreamMessage</em></a>();
msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/StreamMessage.html#setString(java.lang.String)" class="javadoc">writeString</a>("Thriller");
msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/StreamMessage.html#setInt(int)" class="javadoc">writeInt</a>(1982);
msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/StreamMessage.html#setDouble(double)" class="javadoc">writeDouble</a>(110.3);

<span class="cmt">// Read message</span>
String title = msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/StreamMessage.html#getString()" class="javadoc">readString</a>();  <span class="cmt">// must be read <em>in the same order as written</em></span>
int releaseYear = msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/StreamMessage.html#getInt()" class="javadoc">readInt</a>();
double millionsSold = msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/StreamMessage.html#getDouble()" class="javadoc">readDouble</a>();
</code></pre></div></div><div class="subSecRow1" id="sec_objectmessages"><div class="subSecHead" id="sechd_objectmessages"><a class="multipageHeadLink" href="messagetypes.xhtml#objectmessages" name="objectmessages">ObjectMessage</a></div><div class="subSecContent" id="seccnt_objectmessages"><p class="subSecExplanation">The <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/ObjectMessage.html" class="javadoc">ObjectMessage</a> allows you to store any <em><a href="#" id="tl-d812e2346" class="dottedTooltip" onclick="return tlClick('tl-d812e2346','pp-d812e2349');" onmouseover="return tlOver('tl-d812e2346','pp-d812e2349');" onmouseout="return tlOut('tl-d812e2346','pp-d812e2349');">serializable Java object</a></em>. </p><pre class="subSecCode"><code><span class="cmt">// Create message</span>
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html" class="javadoc">Session</a> session = <span class="abstract">...</span>;
<a href="http://java.sun.com/javase/6/docs/api/java/util/Date.html" class="javadoc">Date</a> obj = new <a href="http://java.sun.com/javase/6/docs/api/java/util/Date.html" class="javadoc">Date</a>();  <span class="cmt">// the object to send</span>
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/ObjectMessage.html" class="javadoc">ObjectMessage</a> msg = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createObjectMessage(java.io.Serializable)" class="javadoc"><em>createObjectMessage</em></a>(obj);

<span class="cmt">// Read message</span>
<a href="http://java.sun.com/javase/6/docs/api/java/util/Date.html" class="javadoc">Date</a> d = (<a href="http://java.sun.com/javase/6/docs/api/java/util/Date.html" class="javadoc">Date</a>) msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/ObjectMessage.html#getObject()" class="javadoc">getObject</a>();
</code></pre></div></div><div class="subSecRow2" id="sec_bytesmessages"><div class="subSecHead" id="sechd_bytesmessages"><a class="multipageHeadLink" href="messagetypes.xhtml#bytesmessages" name="bytesmessages">BytesMessage</a></div><div class="subSecContent" id="seccnt_bytesmessages"><p class="subSecExplanation">The <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/BytesMessage.html" class="javadoc">BytesMessage</a> is the raw equivalent of the <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/StreamMessage.html" class="javadoc">StreamMessage</a>. It allows you to write the bytes directly in a server-specific format. Its mostly useful for <em>transmitting byte arrays</em>. </p><pre class="subSecCode"><code><span class="cmt">// Create message</span>
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html" class="javadoc">Session</a> session = <span class="abstract">...</span>;
byte[] blob = <span class="abstract">...</span>;  <span class="cmt">// any binary data</span>
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/BytesMessage.html" class="javadoc">BytesMessage</a> msg = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createBytesMessage()" class="javadoc"><em>createBytesMessage</em></a>();
msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/BytesMessage.html#writeBytes(byte[])" class="javadoc">writeBytes</a>(blob);

<span class="cmt">// Read message</span>
byte[] newBlob = new byte[(int) msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/BytesMessage.html#getBodyLength()" class="javadoc">getBodyLength</a>()];
msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/BytesMessage.html#readBytes(byte[])" class="javadoc">readBytes</a>();
</code></pre></div></div><div class="subSecRow1" id="sec_emptymessages"><div class="subSecHead" id="sechd_emptymessages"><a class="multipageHeadLink" href="messagetypes.xhtml#emptymessages" name="emptymessages">Empty Messages</a></div><div class="subSecContent" id="seccnt_emptymessages"><p class="subSecExplanation">It is also possible to create untyped messages without content (they may still contain header data and properties). This may be useful, for example, if the message should only trigger an action and does not need any additional data. </p><pre class="subSecCode"><code><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html" class="javadoc">Session</a> session = <span class="abstract">...</span>;
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html" class="javadoc">Message</a> msg = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createMessage()" class="javadoc"><em>createMessage</em></a>();
</code></pre></div></div><h2 id="sec_howto" class="sectionHead"><a name="howto">How to...</a></h2><div class="sectionExpandAll">
			(<a href="#" onclick="&#xA;return showAll([['colla_messageheaders','sec_messageheaders'],['colla_messageproperties','sec_messageproperties'],['colla_selectors','sec_selectors'],['colla_xml','sec_xml'],['colla_achknowledgement','sec_achknowledgement'],['colla_browsing','sec_browsing'],['colla_authentication','sec_authentication'],['colla_temporaryqueues','sec_temporaryqueues'],['colla_requestresponse','sec_requestresponse'],['colla_deliveryoptions','sec_deliveryoptions'],['colla_activationproperties','sec_activationproperties'],['colla_concurrency','sec_concurrency'],['colla_classes10','sec_classes10'], null]); &#xA;">expand everything</a>)
		</div><div id="colla_messageheaders" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="messageheaders.xhtml#messageheaders" name="messageheaders">Message Headers</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('messageheaders');">How to use Message Headers</a></div></div></div><div class="subSecRow2" id="sec_messageheaders" style="display: none"><div class="subSecHead" id="sechd_messageheaders"><a class="multipageHeadLink" href="messageheaders.xhtml#messageheaders" name="messageheaders">Message Headers</a></div><div class="subSecContent" id="seccnt_messageheaders"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('messageheaders');">How to use Message Headers</a></div><p class="subSecExplanation">Beside their payload, JMS <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html" class="javadoc">Message</a>s also have a number of <em>header fields</em> for the message receiver. Some of them have be set by the message sender, while others are set by the JMS provider (they will be ignored if the sender sets those).</p><div class="subSecTableDiv"><table><tr><th>Field Name</th><th>Set by..</th><th>Always set?</th><th>Description</th></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html#getJMSDestination()" class="javadoc">JMSDestination</a></td><td>JMS</td><td>yes</td><td>Name of the <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Destination.html" class="javadoc">Destination</a> the message was sent to</td></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html#getJMSDeliveryMode()" class="javadoc">JMSDeliveryMode</a></td><td>JMS</td><td>yes</td><td>Defines <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/DeliveryMode.html" class="javadoc">DeliveryMode</a> (<a href="#" id="tl-d812e2593" class="dottedTooltip" onclick="return tlClick('tl-d812e2593','pp-d812e2593');" onmouseover="return tlOver('tl-d812e2593','pp-d812e2593');" onmouseout="return tlOut('tl-d812e2593','pp-d812e2593');">more</a>)</td></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html#getJMSMessageID()" class="javadoc">JMSMessageID</a></td><td>JMS</td><td>yes</td><td>Unique message id (<a href="#" id="tl-d812e2623" class="dottedTooltip" onclick="return tlClick('tl-d812e2623','pp-d812e2623');" onmouseover="return tlOver('tl-d812e2623','pp-d812e2623');" onmouseout="return tlOut('tl-d812e2623','pp-d812e2623');">more</a>)</td></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html#getJMSTimestamp()" class="javadoc">JMSTimestamp</a></td><td>JMS</td><td>yes</td><td>Time when message was sent by client</td></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html#getJMSCorrelationID()" class="javadoc">JMSCorrelationID</a></td><td>Sender</td><td>no</td><td>Link from response message to request (<a href="#" id="tl-d812e2658" class="dottedTooltip" onclick="return tlClick('tl-d812e2658','pp-d812e2658');" onmouseover="return tlOver('tl-d812e2658','pp-d812e2658');" onmouseout="return tlOut('tl-d812e2658','pp-d812e2658');">more</a>)</td></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html#getJMSReplyTo()" class="javadoc">JMSReplyTo</a></td><td>Sender</td><td>no</td><td><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Destination.html" class="javadoc">Destination</a> to reply to (<a href="#" id="tl-d812e2686" class="dottedTooltip" onclick="return tlClick('tl-d812e2686','pp-d812e2686');" onmouseover="return tlOver('tl-d812e2686','pp-d812e2686');" onmouseout="return tlOut('tl-d812e2686','pp-d812e2686');">more</a>)</td></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html#getJMSRedelivered()" class="javadoc">JMSRedelivered</a></td><td>JMS</td><td>yes</td><td>Signals that this message was already sent before (<a href="#" id="tl-d812e2707" class="dottedTooltip" onclick="return tlClick('tl-d812e2707','pp-d812e2707');" onmouseover="return tlOver('tl-d812e2707','pp-d812e2707');" onmouseout="return tlOut('tl-d812e2707','pp-d812e2707');">more</a>)</td></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html#getJMSType()" class="javadoc">JMSType</a></td><td>Sender</td><td>no</td><td>Describes the type of message (<a href="#" id="tl-d812e2728" class="dottedTooltip" onclick="return tlClick('tl-d812e2728','pp-d812e2728');" onmouseover="return tlOver('tl-d812e2728','pp-d812e2728');" onmouseout="return tlOut('tl-d812e2728','pp-d812e2728');">more</a>)</td></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html#getJMSExpiration()" class="javadoc">JMSExpiration</a></td><td>JMS</td><td>no</td><td>Time at which message expires (<a href="#" id="tl-d812e2746" class="dottedTooltip" onclick="return tlClick('tl-d812e2746','pp-d812e2746');" onmouseover="return tlOver('tl-d812e2746','pp-d812e2746');" onmouseout="return tlOut('tl-d812e2746','pp-d812e2746');">more</a>)</td></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html#getJMSPriority()" class="javadoc">JMSPriority</a></td><td>JMS</td><td>no</td><td>Priority 0 (lowest) - 9 (highest) (<a href="#" id="tl-d812e2770" class="dottedTooltip" onclick="return tlClick('tl-d812e2770','pp-d812e2770');" onmouseover="return tlOver('tl-d812e2770','pp-d812e2770');" onmouseout="return tlOut('tl-d812e2770','pp-d812e2770');">more</a>)</td></tr></table></div><p class="subSecExplanation">There are simple getters and setters for all header fields: </p><pre class="subSecCode"><code><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html" class="javadoc">Message</a> msg = <span class="abstract">...</span>

<span class="cmt">// Setting a header:</span>
msg.<a href="http://java.sun.com/javaee/5/docs/apijavax/jms/Message.html#setJMSPriority(int)" class="javadoc"><em>setJMSPriority</em></a>(9);

<span class="cmt">// Reading a header:</span>
String msgId = msg.<a href="http://java.sun.com/javaee/5/docs/apijavax/jms/Message.html#getJMSMessageID()" class="javadoc"><em>getJMSMessageID</em></a>();
</code></pre></div></div><div id="colla_messageproperties" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="messageproperties.xhtml#messageproperties" name="messageproperties">Message Properties</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('messageproperties');">How to read and set Message Properties</a></div></div></div><div class="subSecRow1" id="sec_messageproperties" style="display: none"><div class="subSecHead" id="sechd_messageproperties"><a class="multipageHeadLink" href="messageproperties.xhtml#messageproperties" name="messageproperties">Message Properties</a></div><div class="subSecContent" id="seccnt_messageproperties"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('messageproperties');">How to read and set Message Properties</a></div><p class="subSecExplanation">Message properties allow the sender to <em>add name/value pairs</em> to any <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html" class="javadoc">Message</a> (except <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/BytesMessage.html" class="javadoc">BytesMessage</a>). They work like a <span class="idf">Map</span>. The names are always strings, the values can be either strings or number primitives.<br/> Message properties are mostly useful for message selectors. Otherwise, if you want to send a message with name/value pairs, use a <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MapMessage.html" class="javadoc">MapMessage</a>.</p><pre class="subSecCode"><code><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html" class="javadoc">Message</a> msg = <span class="abstract">...</span>

<span class="cmt">// Setting message properties</span>
msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html#setStringProperty(java.lang.String, java.lang.String)" class="javadoc">setStringProperty</a>("title", "Thriller");
msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html#setIntProperty(java.lang.String, int)" class="javadoc">setIntProperty</a>("releaseYear", 1982);

<span class="cmt">// Reading message properties</span>
String title = msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html#getStringProperty(java.lang.String)" class="javadoc">getStringProperty</a>("title");
int releaseYear = msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html#getIntProperty(java.lang.String)" class="javadoc">getIntProperty</a>("releaseYear");
String yearAsString = msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html#getStringProperty(java.lang.String)" class="javadoc"><em>getStringProperty</em></a>("releaseYear");  <span class="cmt">// auto-conversion (<a href="#" id="tl-d812e2902" class="dottedTooltip" onclick="return tlClick('tl-d812e2902','pp-d812e2902');" onmouseover="return tlOver('tl-d812e2902','pp-d812e2902');" onmouseout="return tlOut('tl-d812e2902','pp-d812e2902');">more</a>)</span>

<span class="cmt">// List all properties</span>
<a href="http://java.sun.com/javase/6/docs/api/java/util/Enumeration.html" class="javadoc">Enumeration</a>&lt;String&gt; e = (<a href="http://java.sun.com/javase/6/docs/api/java/util/Enumeration.html" class="javadoc">Enumeration</a>&lt;String&gt;) msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html#getPropertyNames()" class="javadoc">getPropertyNames</a>();
while (e.<a href="http://java.sun.com/javase/6/docs/api/java/util/Enumeration.html#hasMoreElements()" class="javadoc">hasMoreElements</a>()) {
  String name = e.<a href="http://java.sun.com/javase/6/docs/api/java/util/Enumeration.html#nextElement()" class="javadoc">nextElement</a>();
  System.out.println(name + "=" + msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html#getStringProperty(java.lang.String)" class="javadoc">getStringProperty</a>(name));
}
</code></pre></div></div><div id="colla_selectors" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="selectors.xhtml#selectors" name="selectors">Message Selectors</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('selectors');">How to use Message Selectors to filter messages</a></div></div></div><div class="subSecRow2" id="sec_selectors" style="display: none"><div class="subSecHead" id="sechd_selectors"><a class="multipageHeadLink" href="selectors.xhtml#selectors" name="selectors">Message Selectors</a></div><div class="subSecContent" id="seccnt_selectors"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('selectors');">How to use Message Selectors to filter messages</a></div><p class="subSecExplanation"><span class="idf">Message Selectors</span> allow you to <em>filter the messages that a <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageConsumer.html" class="javadoc">MessageConsumer</a> will receive</em>. The filter is a relatively complex language that mimics the <em>syntax of an SQL WHERE clause</em>. The selector can use all message headers and properties for filtering, but can not use the message content.<br/> Selectors are mostly useful for <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Topic.html" class="javadoc">Topic</a>s that broadcast a very large number of messages to its subscribers.</p><p class="subSecExplanation">They way selectors work depends on the destination type:</p><ul class="subSecList"><li>On <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Queue.html" class="javadoc">Queue</a>s, only messages that match the selector will be returned. Others stay in the queue (and thus can be read by a <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageConsumer.html" class="javadoc">MessageConsumer</a> with different selector).</li><li>On <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Topic.html" class="javadoc">Topic</a>s, messages that do not match the selector will be ignored as if they have not been published.</li></ul><p class="subSecExplanation"> In order to create a selection, you need to pass it to the <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createConsumer(javax.jms.Destination, java.lang.String)" class="javadoc">createConsumer</a> or <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createDurableSubscriber(javax.jms.Topic, java.lang.String, java.lang.String, boolean)" class="javadoc">createDurableSubscriber</a> invocation: </p><pre class="subSecCode"><code><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html" class="javadoc">Session</a> session = <span class="abstract">...</span>
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageConsumer.html" class="javadoc">MessageConsumer</a> consumer = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createConsumer(javax.jms.Destination, java.lang.String)" class="javadoc">createConsumer</a>(queue, "<em>releaseYear &lt; 1980</em>");
</code></pre><p class="subSecExplanation">The following SQL elements are allowed in the filter:</p><div class="subSecTableDiv"><table><tr><th>Element</th><th>Description</th><th>Example Selector</th></tr><tr><td>Header Fields</td><td>Any headers except <span class="idf">JMSDestination</span>, <span class="idf">JMSExpiration</span> and <span class="idf">JMSReplyTo</span></td><td><em>JMSPriority</em> = 9</td></tr><tr><td>Properties</td><td>Message properties that follow Java identifier naming</td><td><em>releaseYear</em> = 1982</td></tr><tr><td>String Literals</td><td>String literals in single quotes, duplicate to escape </td><td>title = <em>'Sam''s'</em></td></tr><tr><td>Number Literals</td><td>Numbers in Java syntax (int and double)</td><td>releaseYear = <em>1982</em></td></tr><tr><td>Boolean Literals</td><td><span class="idf">TRUE</span> and <span class="idf">FALSE</span></td><td>isAvailable = <em>TRUE</em></td></tr><tr><td>( )</td><td>Brackets</td><td><em>(</em>releaseYear &lt; 1980<em>)</em> OR <em>(</em>releaseYear &gt; 1989<em>)</em></td></tr><tr><td><span class="idf">AND</span>, <span class="idf">OR</span>, <span class="idf">NOT</span></td><td>Logical operators</td><td>(releaseYear &lt; 1980) <em>AND NOT</em> (title = 'Thriller')</td></tr><tr><td>=, &lt;&gt;, &lt;, &lt;=, &gt;, &gt;=</td><td>Comparison operators</td><td>(releaseYear <em>&lt;</em> 1980) AND (title <em>&lt;&gt;</em> 'Thriller')</td></tr><tr><td><span class="idf">LIKE</span></td><td>String comparison with wildcards '_' and '%' (<a href="#" id="tl-d812e3211" class="dottedTooltip" onclick="return tlClick('tl-d812e3211','pp-d812e3211');" onmouseover="return tlOver('tl-d812e3211','pp-d812e3211');" onmouseout="return tlOut('tl-d812e3211','pp-d812e3211');">more</a>)</td><td>title <em>LIKE</em> 'Thrill<em>%</em>'</td></tr><tr><td><span class="idf">IN</span></td><td>Find value in set of strings (<a href="#" id="tl-d812e3232" class="dottedTooltip" onclick="return tlClick('tl-d812e3232','pp-d812e3232');" onmouseover="return tlOver('tl-d812e3232','pp-d812e3232');" onmouseout="return tlOut('tl-d812e3232','pp-d812e3232');">more</a>)</td><td>title <em>IN</em> ('Off the wall', 'Thriller', 'Bad')</td></tr><tr><td><span class="idf">BETWEEN</span></td><td>Check whether number is in range (both numbers inclusive) (<a href="#" id="tl-d812e3262" class="dottedTooltip" onclick="return tlClick('tl-d812e3262','pp-d812e3262');" onmouseover="return tlOver('tl-d812e3262','pp-d812e3262');" onmouseout="return tlOut('tl-d812e3262','pp-d812e3262');">more</a>)</td><td>releaseYear <em>BETWEEN</em> 1980 <em>AND</em> 1989</td></tr><tr><td><span class="idf">IS NULL</span>, <span class="idf">IS NOT NULL</span></td><td>Check whether value is null or not null.</td><td>releaseYear <em>IS NOT NULL</em></td></tr><tr><td>*, +, -, /</td><td>Arithmetic operators</td><td>releaseYear <em>*</em> 2 &gt; 2000 <em>-</em> 20</td></tr></table></div><p class="subSecExplanation"> Some more examples of message consumers with selectors: </p><pre class="subSecCode"><code><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html" class="javadoc">Session</a> session = <span class="abstract">...</span>
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageConsumer.html" class="javadoc">MessageConsumer</a> consumer1 = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createConsumer(javax.jms.Destination, java.lang.String)" class="javadoc">createConsumer</a>(queue, 
                       "(releaseYear &lt; 1980) OR (releaseYear &gt; 1989)");

<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageConsumer.html" class="javadoc">MessageConsumer</a> consumer2 = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createConsumer(javax.jms.Destination, java.lang.String)" class="javadoc">createConsumer</a>(queue, 
                       "(releaseYear BETWEEN 1980 AND 1989) AND title LIKE 'Michael%'");

<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageConsumer.html" class="javadoc">MessageConsumer</a> consumer3 = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createConsumer(javax.jms.Destination, java.lang.String)" class="javadoc">createConsumer</a>(queue, 
                       "(releaseYear = 1982) OR (title = 'Thriller')");

<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageConsumer.html" class="javadoc">MessageConsumer</a> consumer4 = session.<a href="http://java.sun.com/javaee/5/docs/api/api/javax/jms/Session.html#createDurableSubscriber(javax.jms.Topic, java.lang.String, java.lang.String, boolean)" class="javadoc">createDurableConsumer</a>(queue, 
                       "title IN ('Off the wall', 'Thriller', 'Bad')");
</code></pre></div></div><div id="colla_xml" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="xml.xhtml#xml" name="xml">XML in JMS</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('xml');">How to send and receive XML messages with DOM or JAXB</a></div></div></div><div class="subSecRow1" id="sec_xml" style="display: none"><div class="subSecHead" id="sechd_xml"><a class="multipageHeadLink" href="xml.xhtml#xml" name="xml">XML in JMS</a></div><div class="subSecContent" id="seccnt_xml"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('xml');">How to send and receive XML messages with DOM or JAXB</a></div><p class="subSecExplanation">It is very common to send XML in JMS messages. Unfortunately, JMS does not support this directly. The best way to do create XML messages is to <em>write the XML document into a <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/BytesMessage.html" class="javadoc">BytesMessage</a></em> or <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/StreamMessage.html" class="javadoc">StreamMessage</a>. Another common practice is to put the XML into a <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/TextMessage.html" class="javadoc">TextMessage</a>, but this can be tricky to get right (<a href="#" id="tl-d812e3411" class="dottedTooltip" onclick="return tlClick('tl-d812e3411','pp-d812e3411');" onmouseover="return tlOver('tl-d812e3411','pp-d812e3411');" onmouseout="return tlOut('tl-d812e3411','pp-d812e3411');">more</a>). </p><h4 class="subSecMiniHeadline">Sending and Receiving XML with DOM</h4><pre class="subSecCode"><code>Session session = <span class="abstract">...</span>;

<span class="cmt">// Write DOM document into message</span>
<em><a href="http://java.sun.com/javase/6/docs/api/org/w3c/dom/Document.html" class="javadoc">Document</a> doc</em> = <span class="abstract">...</span>;                                                  <span class="cmt">// input document</span>
<a href="http://java.sun.com/javase/6/docs/api/java/io/ByteArrayOutputStream.html" class="javadoc">ByteArrayOutputStream</a> baos = new <a href="http://java.sun.com/javase/6/docs/api/java/io/ByteArrayOutputStream.html" class="javadoc">ByteArrayOutputStream</a>();
<a href="http://java.sun.com/javaee/5/docs/api/javax/xml/transform/Transformer.html" class="javadoc">Transformer</a> transformer = <a href="http://java.sun.com/javaee/5/docs/api/javax/xml/transform/TransformerFactory.html" class="javadoc">TransformerFactory</a>.<a href="http://java.sun.com/javaee/5/docs/api/javax/xml/transform/TransformerFactory.html#newInstance()" class="javadoc">newInstance</a>().<a href="http://java.sun.com/javaee/5/docs/api/javax/xml/transform/TransformerFactory.html#newTransformer()" class="javadoc">newTransformer</a>();
transformer.<a href="http://java.sun.com/javaee/5/docs/api/javax/xml/transform/Transformer.html#transform(javax.xml.transform.Source, javax.xml.transform.Result)" class="javadoc">transform</a>(new <a href="http://java.sun.com/javaee/5/docs/api/javax/xml/transform/dom/DOMSource.html" class="javadoc">DOMSource</a>(doc), new <a href="http://java.sun.com/javaee/5/docs/api/javax/xml/transform/stream/StreamResult.html" class="javadoc">StreamResult</a>(baos));

<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/BytesMessage.html" class="javadoc">BytesMessage</a> msg = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createBytesMessage()" class="javadoc">createBytesMessage</a>();
msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/BytesMessage.html#writeBytes(byte[])" class="javadoc">writeBytes</a>(baos.toByteArray());

<span class="cmt">// Read DOM document from message</span>
byte[] content = new byte[(int) msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/BytesMessage.html#getBodyLength()" class="javadoc">getBodyLength</a>()];
msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/BytesMessage.html#readBytes(byte[])" class="javadoc">readBytes</a>(content);

<a href="http://java.sun.com/javase/6/docs/api/javax/xml/parsers/DocumentBuilder.html" class="javadoc">DocumentBuilder</a> builder =  <a href="http://java.sun.com/javase/6/docs/api/javax/xml/parsers/DocumentBuilderFactory.html" class="javadoc">DocumentBuilderFactory</a>.<a href="http://java.sun.com/javaee/5/docs/api/javax/xml/parsers/DocumentBuilderFactory.html#newInstance()" class="javadoc">newInstance</a>().<a href="http://java.sun.com/javaee/5/docs/api/javax/xml/parsers/DocumentBuilderFactory.html#newDocumentBuilder()" class="javadoc">newDocumentBuilder</a>();
<em><a href="http://java.sun.com/javase/6/docs/api/org/w3c/dom/Document.html" class="javadoc">Document</a> msgDoc</em> = builder.<a href="http://java.sun.com/javaee/5/docs/api/javax/xml/parsers/DocumentBuilder.html#parse(java.io.InputStream)" class="javadoc">parse</a>(new <a href="http://java.sun.com/javase/6/docs/api/java/io/ByteArrayInputStream.html" class="javadoc">ByteArrayInputStream</a>(content));  <span class="cmt">// result</span>
</code></pre><h4 class="subSecMiniHeadline">Sending and Receiving XML with JAXB</h4><pre class="subSecCode"><code>Session session = <span class="abstract">...</span>;
JAXBContext ctx = <span class="abstract">...</span>;

<span class="cmt">// Write JAXB document into message</span>
<em><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Object.html" class="javadoc">Object</a> doc</em> = <span class="abstract">...</span>;                                                           <span class="cmt">// input document</span>
<a href="http://java.sun.com/javase/6/docs/api/java/io/ByteArrayOutputStream.html" class="javadoc">ByteArrayOutputStream</a> baos = new <a href="http://java.sun.com/javase/6/docs/api/java/io/ByteArrayOutputStream.html" class="javadoc">ByteArrayOutputStream</a>();
<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html" class="javadoc">Marshaller</a> marshaller = ctx.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html#createMarshaller()" class="javadoc">createMarshaller</a>();
marshaller.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html#marshal(java.lang.Object, java.io.OutputStream)" class="javadoc">marshal</a>(doc, baos);

<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/BytesMessage.html" class="javadoc">BytesMessage</a> msg = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createBytesMessage()" class="javadoc">createBytesMessage</a>();
msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/BytesMessage.html#writeBytes(byte[])" class="javadoc">writeBytes</a>(baos.toByteArray());

<span class="cmt">// Read JAXB document from message</span>
byte[] content = new byte[(int) msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/BytesMessage.html#getBodyLength()" class="javadoc">getBodyLength</a>()];
msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/BytesMessage.html#readBytes(byte[])" class="javadoc">readBytes</a>(content);

<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Unmarshaller.html" class="javadoc">Unmarshaller</a> unmarshaller = ctx.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html#createUnmarshaller()" class="javadoc">createUnmarshaller</a>();
<em>Object msgDoc</em> = unmarshaller.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Unmarshaller.html#unmarshal(java.io.InputStream)" class="javadoc">unmarshal</a>(new <a href="http://java.sun.com/javase/6/docs/api/java/io/ByteArrayInputStream.html" class="javadoc">ByteArrayInputStream</a>(content));  <span class="cmt">// result</span>
</code></pre></div></div><div id="colla_achknowledgement" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="achknowledgement.xhtml#achknowledgement" name="achknowledgement">Acknowledgement</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('achknowledgement');">How to control acknowledgement</a></div></div></div><div class="subSecRow2" id="sec_achknowledgement" style="display: none"><div class="subSecHead" id="sechd_achknowledgement"><a class="multipageHeadLink" href="achknowledgement.xhtml#achknowledgement" name="achknowledgement">Acknowledgement</a></div><div class="subSecContent" id="seccnt_achknowledgement"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('achknowledgement');">How to control acknowledgement</a></div><p class="subSecExplanation"> So far, all examples created the <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html" class="javadoc">Session</a> in <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#AUTO_ACKNOWLEDGE" class="javadoc">AUTO_ACKNOWLEDGE</a> mode. This means that a message is automatically acknowledged when the client either polls it or the <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageListener.html" class="javadoc">MessageListener</a> is called with the message as argument. The effect of the acknowledgement is that the message is removed from the queue and you won't receive it again. However, this is not always desired. If processing the message fails, for whatever reason, you may want it to stay in the queue and process it later. Then you should switch to <em><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#CLIENT_ACKNOWLEDGE" class="javadoc">CLIENT_ACKNOWLEDGE</a>, which requires calling the method <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html#acknowledge()" class="javadoc">Message.acknowledge</a></em> for every received message. If you don't call it, you will receive the message again. </p><pre class="subSecCode"><code><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html" class="javadoc">Connection</a> con = <span class="abstract">...</span>;
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Queue.html" class="javadoc">Queue</a> queue = <span class="abstract">...</span>;
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html" class="javadoc">Session</a> session = con.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html#createSession(boolean, int)" class="javadoc">createSession</a>(false, <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#CLIENT_ACKNOWLEDGE" class="javadoc"><em>Session.CLIENT_ACKNOWLEDGE</em></a>);
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageConsumer.html" class="javadoc">MessageConsumer</a> consumer = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createConsumer(javax.jms.Destination)" class="javadoc">createConsumer</a>(queue);

con.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html#start()" class="javadoc">start</a>();
while (true) {
  <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html" class="javadoc">Message</a> msg = consumer.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageConsumer.html#receive()" class="javadoc">receive</a>();
  <span class="cmt">// do something with the message...</span>
  msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html#acknowledge()" class="javadoc"><em>acknowledge</em></a>();
}
</code></pre><p class="subSecExplanation">Beside <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#AUTO_ACKNOWLEDGE" class="javadoc">AUTO_ACKNOWLEDGE</a> and <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#CLIENT_ACKNOWLEDGE" class="javadoc">CLIENT_ACKNOWLEDGE</a> there is also a third mode called <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#DUPS_OK_ACKNOWLEDGE" class="javadoc">DUPS_OK_ACKNOWLEDGE</a>. It works like <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#CLIENT_ACKNOWLEDGE" class="javadoc">CLIENT_ACKNOWLEDGE</a>, requiring you to acknowledge explicitly, but in this mode it may sometimes happen that you receive an already acknowledged message again. The advantage of this mode is that it may be faster when you receive a large number of messages.</p><p class="subSecExplanation">Note: with <em>message-driven beans</em> you don't need to care about the acknowledgement mode. They run neither in <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#AUTO_ACKNOWLEDGE" class="javadoc">AUTO_ACKNOWLEDGE</a> nor in <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#CLIENT_ACKNOWLEDGE" class="javadoc">CLIENT_ACKNOWLEDGE</a> mode, but inside a <em>transaction</em> (enabled using <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html#createSession(boolean, int)" class="javadoc">createSession</a>'s first argument). The message is acknowledged when the EJB's transaction is committed.</p></div></div><div id="colla_browsing" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="browsing.xhtml#browsing" name="browsing">Browsing Queues</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('browsing');">How to browse the messages in a queue</a></div></div></div><div class="subSecRow1" id="sec_browsing" style="display: none"><div class="subSecHead" id="sechd_browsing"><a class="multipageHeadLink" href="browsing.xhtml#browsing" name="browsing">Browsing Queues</a></div><div class="subSecContent" id="seccnt_browsing"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('browsing');">How to browse the messages in a queue</a></div><p class="subSecExplanation">Browsing a queue's message is easy. Just <em>create a <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/QueueBrowser.html" class="javadoc">QueueBrowser</a></em> for it, then call <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/QueueBrowser.html#getEnumeration()" class="javadoc">getEnumeration</a> to get the messages. </p><pre class="subSecCode"><code><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html" class="javadoc">Connection</a> con = <span class="abstract">...</span>;
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Queue.html" class="javadoc">Queue</a> queue = <span class="abstract">...</span>;
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html" class="javadoc">Session</a> session = <span class="abstract">...</span>;

<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/QueueBrowser.html" class="javadoc">QueueBrowser</a> browser = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createBrowser(javax.jms.Queue)" class="javadoc"><em>createBrowser</em></a>(queue);
con.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html#start()" class="javadoc">start</a>();  <span class="cmt">// don't forget this!</span>

<a href="http://java.sun.com/javase/6/docs/api/java/util/Enumeration.html" class="javadoc">Enumeration</a>&lt;<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html" class="javadoc">Message</a>&gt; e = (<a href="http://java.sun.com/javase/6/docs/api/java/util/Enumeration.html" class="javadoc">Enumeration</a>&lt;<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html" class="javadoc">Message</a>&gt;) browser.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/QueueBrowser.html#getEnumeration()" class="javadoc"><em>getEnumeration</em></a>();
while (e.<a href="http://java.sun.com/javase/6/docs/api/java/util/Enumeration.html#hasMoreElements()" class="javadoc">hasMoreElements</a>()) {
  <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html" class="javadoc">Message</a> msg = e.<a href="http://java.sun.com/javase/6/docs/api/java/util/Enumeration.html#nextElement()" class="javadoc">nextElement</a>();
  System.out.println("Found " + msg.<a href="http://java.sun.com/javaee/5/docs/apijavax/jms/Message.html#getJMSMessageID()" class="javadoc">getJMSMessageID</a>());
}
</code></pre></div></div><div id="colla_authentication" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="authentication.xhtml#authentication" name="authentication">Authentication</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('authentication');">How to authenticate a connection</a></div></div></div><div class="subSecRow2" id="sec_authentication" style="display: none"><div class="subSecHead" id="sechd_authentication"><a class="multipageHeadLink" href="authentication.xhtml#authentication" name="authentication">Authentication</a></div><div class="subSecContent" id="seccnt_authentication"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('authentication');">How to authenticate a connection</a></div><p class="subSecExplanation">For whatever reason, it seems to be not very common to require authentication for messaging servers, but JMS supports authentication, of course. Just <em>pass username and password to <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/ConnectionFactory.html#createConnection(java.lang.String, java.lang.String)" class="javadoc">createConnection</a></em>: </p><pre class="subSecCode"><code><span class="cmt">// Example with ActiveMQ ConnectionFactory</span>
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/ConnectionFactory.html" class="javadoc">ConnectionFactory</a> factory = new ActiveMQConnectionFactory("tcp://localhost:61616");
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html" class="javadoc">Connection</a> con = factory.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/ConnectionFactory.html#createConnection(java.lang.String, java.lang.String)" class="javadoc">createConnection</a>("<em>username</em>", "<em>password</em>");
</code></pre><p class="subSecExplanation">When you use JMS in an application server, you will usually configure the authentication in the server.</p></div></div><div id="colla_temporaryqueues" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="temporaryqueues.xhtml#temporaryqueues" name="temporaryqueues">Temporary Queues</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('temporaryqueues');">How to Create Temporary Queues or Topics</a></div></div></div><div class="subSecRow1" id="sec_temporaryqueues" style="display: none"><div class="subSecHead" id="sechd_temporaryqueues"><a class="multipageHeadLink" href="temporaryqueues.xhtml#temporaryqueues" name="temporaryqueues">Temporary Queues</a></div><div class="subSecContent" id="seccnt_temporaryqueues"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('temporaryqueues');">How to Create Temporary Queues or Topics</a></div><p class="subSecExplanation">It is possible to create a temporary queue or topic that will exist <em>as long as the current connection is open or until you call <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/TemporaryQueue.html#delete()" class="javadoc">delete</a></em>. Only the connection that created the queue or topic can receive messages from it, but other connections may send messages. A common use of temporary queues is to use them for receiving responses to a request message. For this you pass the temporary queue in the <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html#getJMSReplyTo()" class="javadoc">JMSReplyTo</a> header field.</p><pre class="subSecCode"><code><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Queue.html" class="javadoc">Queue</a> queue = <span class="abstract">...</span>;
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html" class="javadoc">Session</a> session = <span class="abstract">...</span>;

<span class="cmt">// Create temporary queue for response</span>
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Queue.html" class="javadoc">Queue</a> tmpQueue = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createTemporaryQueue()" class="javadoc"><em>createTemporaryQueue</em></a>();
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageProducer.html" class="javadoc">MessageProducer</a> producer = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createProducer(javax.jms.Destination)" class="javadoc">createProducer</a>(queue);

<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html" class="javadoc">Message</a> msg = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createTextMessage(java.lang.String)" class="javadoc">createTextMessage</a>("how are you?");
msg.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html#setJMSReplyTo(javax.jms.Destination)" class="javadoc"><em>setJMSReplyTo</em></a>(tmpQueue);  <span class="cmt">// use temporary queue as response channel</span>

producer.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageProducer.html#send(javax.jms.Message)" class="javadoc">send</a>(msg);
</code></pre><p class="subSecExplanation">The message's receiver must take the destination from the <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html#getJMSReplyTo()" class="javadoc">JMSReplyTo</a> property and send the reply to this channel. Meanwhile sender of the original message needs to listen to the temporary queue, waiting for the response. When the temporary queue is not needed anymore, it should be deleted using <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/TemporaryQueue.html#delete()" class="javadoc">delete</a>, unless the connection is closed anyway.</p><p class="subSecExplanation"><em>Note</em>: temporary queues can <em>not be used with message-driven beans</em>, as they don't support configuring the queue after deployment.</p></div></div><div id="colla_requestresponse" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="requestresponse.xhtml#requestresponse" name="requestresponse">Request / Response</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('requestresponse');">How to send a response to a message (Request/Reply)</a></div></div></div><div class="subSecRow2" id="sec_requestresponse" style="display: none"><div class="subSecHead" id="sechd_requestresponse"><a class="multipageHeadLink" href="requestresponse.xhtml#requestresponse" name="requestresponse">Request / Response</a></div><div class="subSecContent" id="seccnt_requestresponse"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('requestresponse');">How to send a response to a message (Request/Reply)</a></div><p class="subSecExplanation">In messaging systems it is not that common that the receiver of a message sends a response, but it is possible and JMS supports this with the <em><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html#getJMSReplyTo()" class="javadoc">JMSReplyTo</a> and <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html#getJMSCorrelationID()" class="javadoc">JMSCorrelationID</a> header fields</em>. Often temporary queues are used to send the reply, but you can also use a regular queue. </p><p class="subSecExplanation">The following snippet sends a message, creates a temporary queue for the response and then waits for it:</p><pre class="subSecCode"><code><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html" class="javadoc">Session</a> session = <span class="abstract">...</span>;
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Queue.html" class="javadoc">Queue</a> queue = <span class="abstract">...</span>;

<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageProducer.html" class="javadoc">MessageProducer</a> producer = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createProducer(javax.jms.Destination)" class="javadoc">createProducer</a>(queue);
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Queue.html" class="javadoc">Queue</a> tmpQueue = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createTemporaryQueue()" class="javadoc"><em>createTemporaryQueue</em></a>();
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageConsumer.html" class="javadoc">MessageConsumer</a> consumer = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createConsumer(javax.jms.Destination)" class="javadoc">createConsumer</a>(<em>tmpQueue</em>);

<span class="cmt">// Send request</span>
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html" class="javadoc">Message</a> request = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createTextMessage(java.lang.String)" class="javadoc">createTextMessage</a>("how are you?");
request.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html#setJMSReplyTo(javax.jms.Destination)" class="javadoc"><em>setJMSReplyTo</em></a>(<em>tmpQueue</em>);
producer.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageProducer.html#send(javax.jms.Message)" class="javadoc">send</a>(request);

<span class="cmt">// Wait for response</span>
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html" class="javadoc">Message</a> reply = consumer.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageConsumer.html#receive()" class="javadoc">receive</a>();
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/TextMessage.html" class="javadoc">TextMessage</a> tm = (<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/TextMessage.html" class="javadoc">TextMessage</a>) reply;
System.out.println("Got reply: " + tm.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/TextMessage.html#getText()" class="javadoc">getText</a>());
</code></pre><p class="subSecExplanation">This snippet shows how to respond to messages:</p><pre class="subSecCode"><code><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html" class="javadoc">Connection</a> con = <span class="abstract">...</span>;
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html" class="javadoc">Session</a> session = <span class="abstract">...</span>;
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Queue.html" class="javadoc">Queue</a> queue = <span class="abstract">...</span>;

<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageConsumer.html" class="javadoc">MessageConsumer</a> consumer = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createConsumer(javax.jms.Destination)" class="javadoc">createConsumer</a>(queue);
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageProducer.html" class="javadoc">MessageProducer</a> producer = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createProducer(javax.jms.Destination)" class="javadoc">createProducer</a>(<em>null</em>);  <span class="cmt">// no default queue (<a href="#" id="tl-d812e4267" class="dottedTooltip" onclick="return tlClick('tl-d812e4267','pp-d812e4267');" onmouseover="return tlOver('tl-d812e4267','pp-d812e4267');" onmouseout="return tlOut('tl-d812e4267','pp-d812e4267');">more</a>)</span>
con.start();

while (true) {
  <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html" class="javadoc">Message</a> request = consumer.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageConsumer.html#receive()" class="javadoc">receive</a>();
  <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/TextMessage.html" class="javadoc">TextMessage</a> tm = (<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/TextMessage.html" class="javadoc">TextMessage</a>) request;
  System.out.println("Got request: " + tm.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/TextMessage.html#getText()" class="javadoc">getText</a>());

  <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/TextMessage.html" class="javadoc">TextMessage</a> reply = session.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html#createTextMessage(java.lang.String)" class="javadoc">createTextMessage</a>("great");
  reply.<a href="http://java.sun.com/javaee/5/docs/apijavax/jms/Message.html#setJMSCorrelationID(java.lang.String)" class="javadoc"><em>setJMSCorrelationID</em></a>(request.<a href="http://java.sun.com/javaee/5/docs/apijavax/jms/Message.html#getJMSMessageID()" class="javadoc">getJMSMessageID</a>());   <span class="cmt">// link messages (<a href="#" id="tl-d812e4334" class="dottedTooltip" onclick="return tlClick('tl-d812e4334','pp-d812e4334');" onmouseover="return tlOver('tl-d812e4334','pp-d812e4334');" onmouseout="return tlOut('tl-d812e4334','pp-d812e4334');">more</a>)</span>
  producer.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageProducer.html#send(javax.jms.Destination, javax.jms.Message)" class="javadoc"><em>send</em></a>(request.<a href="http://java.sun.com/javaee/5/docs/apijavax/jms/Message.html#getJMSReplyTo()" class="javadoc"><em>getJMSReplyTo</em></a>(), reply);          <span class="cmt">// send reply over temporary queue</span>
}
</code></pre></div></div><div id="colla_deliveryoptions" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="deliveryoptions.xhtml#deliveryoptions" name="deliveryoptions">Delivery Options</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('deliveryoptions');">How to Control Message Delivery (Delivery Mode, Time-to-live and Priority)</a></div></div></div><div class="subSecRow1" id="sec_deliveryoptions" style="display: none"><div class="subSecHead" id="sechd_deliveryoptions"><a class="multipageHeadLink" href="deliveryoptions.xhtml#deliveryoptions" name="deliveryoptions">Delivery Options</a></div><div class="subSecContent" id="seccnt_deliveryoptions"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('deliveryoptions');">How to Control Message Delivery (Delivery Mode, Time-to-live and Priority)</a></div><p class="subSecExplanation">JMS provides three ways of influencing the delivery of messages: <em>delivery mode, priority and time-to-live</em>.</p><ul class="subSecList"><li> The delivery mode can be either <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/DeliveryMode.html#NON_PERSISTENT" class="javadoc">PERSISTENT</a> or <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/DeliveryMode.html#NON_PERSISTENT" class="javadoc">NON_PERSISTENT</a>. A persistent message's delivery is guaranteed. A non-persistent message may not arrive in some cases, for example when the messaging server is being shut down before the delivery. The advantage of non-persistent messages is that they may be faster.</li><li>Messages with higher priority can arrive earlier than messages with lower priority.</li><li>Time-to-live timeouts can prevent the delivery of messages that are older than a configurable amount of time. </li></ul><p class="subSecExplanation">Delivery mode, priority and timeout are <em>best-effort services</em>. JMS providers should do their best to implement them, but it is not required that they always work as you may expect. For example, JMS allows the delivery of an expired message. </p><p class="subSecExplanation"> In order to set a message's delivery options, there are variants of the <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageProducer.html#send(javax.jms.Message)" class="javadoc">send</a> method that allow setting them for each message. Alternatively you could also set defaults in the <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageProducer.html" class="javadoc">MessageProducer</a>. If you don't do this either, implementation-specific defaults are taken (which can usually be configured somewhere). </p><pre class="subSecCode"><code><a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageProducer.html" class="javadoc">MessageProducer</a> producer = <span class="abstract">...</span>;
<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html" class="javadoc">Message</a> msg = <span class="abstract">...</span>;

producer.<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageProducer.html#send(javax.jms.Message, int, int, long)" class="javadoc">send</a>(msg, 
              <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/DeliveryMode.html#NON_PERSISTENT" class="javadoc"><em>DeliveryMode.NON_PERSISTENT</em></a>,  <span class="cmt">// delivery mode</span>
              <em>4</em>,                            <span class="cmt">// priority (0-9, 9 is highest)</span>
              <em>1000*60</em>);                     <span class="cmt">// time-to-live in milliseconds(here: 60 seconds)</span>
</code></pre><p class="subSecExplanation"> The receiver can find out with which options a message has been sent by looking at the <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html#getJMSDeliveryMode()" class="javadoc">JMSDeliveryMode</a>, <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html#getJMSExpiration()" class="javadoc">JMSExpiration</a> and <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Message.html#getJMSPriority()" class="javadoc">JMSPriority</a> header fields. </p></div></div><div id="colla_activationproperties" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="activationproperties.xhtml#activationproperties" name="activationproperties">MDB Activation</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('activationproperties');">How to Configure a Message-Driven Bean (Activation Properties, Durable Subscriptions)</a></div></div></div><div class="subSecRow2" id="sec_activationproperties" style="display: none"><div class="subSecHead" id="sechd_activationproperties"><a class="multipageHeadLink" href="activationproperties.xhtml#activationproperties" name="activationproperties">MDB Activation</a></div><div class="subSecContent" id="seccnt_activationproperties"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('activationproperties');">How to Configure a Message-Driven Bean (Activation Properties, Durable Subscriptions)</a></div><p class="subSecExplanation">The message-driven bean (MDB) example above shows only the two required properties, <span class="idf">destination</span> and <span class="idf">destinationType</span>. Here is a complete list of all properties that are specified by the <a href="http://java.sun.com/j2ee/connector/">JCA 1.5 specification</a> (some implementations support additional properties):</p><div class="subSecTableDiv"><table><tr><th>Name</th><th>Description</th><th>Default</th></tr><tr><td>destination</td><td>Destination to listen to (<em>required</em>)</td><td>-</td></tr><tr><td>destinationType</td><td>Destination type, "<em>javax.jms.Queue</em>" or "<em>javax.jms.Topic</em>" (<em>required</em>)</td><td>-</td></tr><tr><td>messageSelector</td><td>A message selector</td><td>-</td></tr><tr><td>acknowledgeMode</td><td>"<em>Auto-acknowledge</em>" for reliable messaging or "<em>Dups-ok-acknowledge</em>" for faster messaging with possible duplicates</td><td>"Auto-acknowledge"</td></tr><tr><td>subscriptionDurability</td><td>"<em>Durable</em>" for durable subscriptions, or "<em>NonDurable</em>" for non-durable; <em><span class="idf">Durable</span> requires the <span class="idf">clientId</span> and <span class="idf">subscriptionName</span> properties</em></td><td>"NonDurable"</td></tr><tr><td>clientId</td><td>The client id for durable subscriptions (required if durable)</td><td>-</td></tr><tr><td>subscriptionName</td><td>The name of the durable subscription (required if durable)</td><td>-</td></tr></table></div></div></div><div id="colla_concurrency" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="concurrency.xhtml#concurrency" name="concurrency">Concurrency</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('concurrency');">How to use JMS in multi-threaded applications</a></div></div></div><div class="subSecRow1" id="sec_concurrency" style="display: none"><div class="subSecHead" id="sechd_concurrency"><a class="multipageHeadLink" href="concurrency.xhtml#concurrency" name="concurrency">Concurrency</a></div><div class="subSecContent" id="seccnt_concurrency"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('concurrency');">How to use JMS in multi-threaded applications</a></div><p class="subSecExplanation">The JMS specification states that <em>only <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/ConnectionFactory.html" class="javadoc">ConnectionFactory</a>, <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html" class="javadoc">Connection</a> and <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Destination.html" class="javadoc">Destination</a>s (<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Queue.html" class="javadoc">Queue</a> and <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Topic.html" class="javadoc">Topic</a>) are thread-safe</em>. The other classes, especially <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html" class="javadoc">Session</a> and the objects created by <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html" class="javadoc">Session</a>, can not be shared by threads without synchronization or other precautions.<br/> Note that the <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageListener.html#onMessage(javax.jms.Message)" class="javadoc">onMessage</a> method of the <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageListener.html" class="javadoc"><em>MessageListener</em></a> interface will also run in its own thread. Thus it can use the <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html" class="javadoc">Connection</a> it has been created for, but it <em>needs its own <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html" class="javadoc">Session</a></em>. </p></div></div><div id="colla_classes10" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="classes10.xhtml#classes10" name="classes10">JMS 1.0 Classes</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('classes10');">How to Use QueueConnectionFactory, QueueConnection, QueueSession...</a></div></div></div><div class="subSecRow2" id="sec_classes10" style="display: none"><div class="subSecHead" id="sechd_classes10"><a class="multipageHeadLink" href="classes10.xhtml#classes10" name="classes10">JMS 1.0 Classes</a></div><div class="subSecContent" id="seccnt_classes10"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('classes10');">How to Use QueueConnectionFactory, QueueConnection, QueueSession...</a></div><p class="subSecExplanation">This tutorial describes the latest version of JMS, version 1.1 from April 2002. Version 1.1 simplified the API and offers replacements for most 1.0 classes. Earlier versions of JMS had separate classes for queues and topics. Thus there was no <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html" class="javadoc">Connection</a>, but instead only <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/QueueConnection.html" class="javadoc">QueueConnection</a> and <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/TopicConnection.html" class="javadoc">TopicConnection</a>. Similarly, there was a <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/QueueConnectionFactory.html" class="javadoc">QueueConnectionFactory</a>, <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/QueueSession.html" class="javadoc">QueueSession</a>, a <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/QueueReceiver.html" class="javadoc">QueueReceiver</a>, a <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/QueueSender.html" class="javadoc">QueueSender</a> and equivalents for topics.<br/> <em>In JMS 1.1 they are obsolete</em>, but still supported for backward compatibility. For some reason you can still see people using them frequently. Probably because it seems to be so tempting to use a <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/QueueConnectionFactory.html" class="javadoc">QueueConnectionFactory</a> instead of a <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/ConnectionFactory.html" class="javadoc">ConnectionFactory</a> when you only use queues.</p></div></div><h2 id="sec_andnow" class="sectionHead"><a name="andnow">And now...?</a></h2><div class="subSecRow1" id="sec_nextsteps"><div class="subSecHead" id="sechd_nextsteps"><a class="multipageHeadLink" href="andnow.xhtml#nextsteps" name="nextsteps">Next Steps</a></div><div class="subSecContent" id="seccnt_nextsteps"><p class="subSecExplanation">This tutorial intends to give you a quick start on using JMS, and maybe give answers for some questions that are hard to figure out. But now you are on you own. If you need to find out more, try to find it in the <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/package-summary.html">API Documents</a>. For a more thorough understanding of JMS you should take the time to read the <a href="http://java.sun.com/products/jms/docs.html">JMS Specification</a>. </p></div></div></div><div id="sidecolumn">
    	<div><h3>Useful Links</h3><div class="sidecolumnSubTitleLine"/>
  			<a href="http://java.sun.com/products/jms/">JMS Homepage</a><br/>
  			<a href="http://en.wikipedia.org/wiki/Java_Message_Service">JMS on Wikipedia</a><br/>
  			<a href="http://java.sun.com/javaee/5/docs/api/javax/jms/package-summary.html">javax.jms API Docs</a><br/>
  			<a href="http://java.sun.com/products/jms/docs.html">JMS Specification</a><br/>
  		</div>
  </div></div></div><div id="footer"><div id="footer-content"><div id="footer-left"><div class="footerLine"><a href="/">Home</a> - <a href="/about">About Jarfiller</a> - <a href="/imprint.xhtml">Imprint</a></div><div class="footerLine">Please send feedback and corrections to <a href="mailto:tim@tjansen.de">tim@<span style="display: none">got you</span>tjansen.de</a>.</div><div class="footerLine"><a href="http://www.twitter.com/timjansen">Follow</a> me on Twitter.</div><div class="copyrightLine">© 2010 Tim Jansen; content licensed under <a href="http://creativecommons.org/licenses/by/3.0/us/">cc-by</a>; example source code is public domain
				</div></div><div id="footer-right"><a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/"><img alt="Creative Commons License" style="border-width:0" src="../../images/ext/cc-by-88x31.png"/></a></div></div></div><div id="navbar" onclick="return navToggle();" onmouseover="document.getElementById('navbar').className='mouseover';" onmouseout="document.getElementById('navbar').className='';"/><div id="navcontainer"><div id="navlinks"><div id="navclosebar"><a href="#" onclick="return navClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div><div id="navpositionbar" class="navpositionbar"/><h2 id="navtitle">JMS Guide</h2><a id="nav_jmsoverview" class="navseclink" href="#jmsoverview" onclick="if (event.button == 0) return goTo('#jmsoverview', true); else return true;">Overview</a><a id="nav_intro" class="navsublink" href="#intro" onclick="if (event.button == 0) return goTo('#intro', true); else return true;">Intro</a><a id="nav_usecases" class="navsublink" href="#usecases" onclick="if (event.button == 0) return goTo('#usecases', true); else return true;">When should JMS be used?</a><a id="nav_requirements" class="navsublink" href="#requirements" onclick="if (event.button == 0) return goTo('#requirements', true); else return true;">What do you need for JMS?</a><a id="nav_destinations" class="navsublink" href="#destinations" onclick="if (event.button == 0) return goTo('#destinations', true); else return true;">Destinations</a><a id="nav_standaloneclient" class="navseclink" href="#standaloneclient" onclick="if (event.button == 0) return goTo('#standaloneclient', true); else return true;">Sending and Receiving Messages (Standalone Client)</a><a id="nav_sending" class="navsublink" href="#sending" onclick="if (event.button == 0) return goTo('#sending', true); else return true;">Sending a message</a><a id="nav_polling" class="navsublink" href="#polling" onclick="if (event.button == 0) return goTo('#polling', true); else return true;">Polling for messages</a><a id="nav_messagelistener" class="navsublink" href="#messagelistener" onclick="if (event.button == 0) return goTo('#messagelistener', true); else return true;">Using a MessageListener</a><a id="nav_jndi" class="navsublink" href="#jndi" onclick="if (event.button == 0) return goTo('#jndi', true); else return true;">Getting the ConnectionFactory via JNDI</a><a id="nav_activemqsetup" class="navsublink" href="#activemqsetup" onclick="if (event.button == 0) return goTo('#activemqsetup', true); else return true;">How to set up ActiveMQ</a><a id="nav_webspheremqsetup" class="navsublink" href="#webspheremqsetup" onclick="if (event.button == 0) return goTo('#webspheremqsetup', true); else return true;">How to set up Websphere MQ</a><a id="nav_sendingreceivingejb3" class="navseclink" href="#sendingreceivingejb3" onclick="if (event.button == 0) return goTo('#sendingreceivingejb3', true); else return true;">Sending and Receiving Messages in EJB 3 Applications</a><a id="nav_sendingejb3" class="navsublink" href="#sendingejb3" onclick="if (event.button == 0) return goTo('#sendingejb3', true); else return true;">Sending Messages</a><a id="nav_receivingejb3" class="navsublink" href="#receivingejb3" onclick="if (event.button == 0) return goTo('#receivingejb3', true); else return true;">Receiving messages</a><a id="nav_jbosssetup" class="navsublink" href="#jbosssetup" onclick="if (event.button == 0) return goTo('#jbosssetup', true); else return true;">How to set up JBoss 5.x</a><a id="nav_topics" class="navseclink" href="#topics" onclick="if (event.button == 0) return goTo('#topics', true); else return true;">Using Topics</a><a id="nav_sendingtopics" class="navsublink" href="#sendingtopics" onclick="if (event.button == 0) return goTo('#sendingtopics', true); else return true;">Sending Topic Messages</a><a id="nav_receivingtopics" class="navsublink" href="#receivingtopics" onclick="if (event.button == 0) return goTo('#receivingtopics', true); else return true;">Receiving Topic Messages</a><a id="nav_durablesubscription" class="navsublink" href="#durablesubscription" onclick="if (event.button == 0) return goTo('#durablesubscription', true); else return true;">Durable Subscription</a><a id="nav_endingsubscription" class="navsublink" href="#endingsubscription" onclick="if (event.button == 0) return goTo('#endingsubscription', true); else return true;">Cancelling a subscription</a><a id="nav_messagetypes" class="navseclink" href="#messagetypes" onclick="if (event.button == 0) return goTo('#messagetypes', true); else return true;">Message Types</a><a id="nav_textmessages" class="navsublink" href="#textmessages" onclick="if (event.button == 0) return goTo('#textmessages', true); else return true;">TextMessage</a><a id="nav_mapmessages" class="navsublink" href="#mapmessages" onclick="if (event.button == 0) return goTo('#mapmessages', true); else return true;">MapMessage</a><a id="nav_streammessages" class="navsublink" href="#streammessages" onclick="if (event.button == 0) return goTo('#streammessages', true); else return true;">StreamMessage</a><a id="nav_objectmessages" class="navsublink" href="#objectmessages" onclick="if (event.button == 0) return goTo('#objectmessages', true); else return true;">ObjectMessage</a><a id="nav_bytesmessages" class="navsublink" href="#bytesmessages" onclick="if (event.button == 0) return goTo('#bytesmessages', true); else return true;">BytesMessage</a><a id="nav_emptymessages" class="navsublink" href="#emptymessages" onclick="if (event.button == 0) return goTo('#emptymessages', true); else return true;">Empty Messages</a><a id="nav_howto" class="navseclink" href="#howto" onclick="if (event.button == 0) return goTo('#howto', true); else return true;">How to...</a><a id="nav_messageheaders" class="navsublink" href="#messageheaders" onclick="if (event.button == 0) return goTo('#messageheaders', true); else return true;">How to use Message Headers</a><a id="nav_messageproperties" class="navsublink" href="#messageproperties" onclick="if (event.button == 0) return goTo('#messageproperties', true); else return true;">How to read and set Message Properties</a><a id="nav_selectors" class="navsublink" href="#selectors" onclick="if (event.button == 0) return goTo('#selectors', true); else return true;">How to use Message Selectors to filter messages</a><a id="nav_xml" class="navsublink" href="#xml" onclick="if (event.button == 0) return goTo('#xml', true); else return true;">How to send and receive XML messages with DOM or JAXB</a><a id="nav_achknowledgement" class="navsublink" href="#achknowledgement" onclick="if (event.button == 0) return goTo('#achknowledgement', true); else return true;">How to control acknowledgement</a><a id="nav_browsing" class="navsublink" href="#browsing" onclick="if (event.button == 0) return goTo('#browsing', true); else return true;">How to browse the messages in a queue</a><a id="nav_authentication" class="navsublink" href="#authentication" onclick="if (event.button == 0) return goTo('#authentication', true); else return true;">How to authenticate a connection</a><a id="nav_temporaryqueues" class="navsublink" href="#temporaryqueues" onclick="if (event.button == 0) return goTo('#temporaryqueues', true); else return true;">How to Create Temporary Queues or Topics</a><a id="nav_requestresponse" class="navsublink" href="#requestresponse" onclick="if (event.button == 0) return goTo('#requestresponse', true); else return true;">How to send a response to a message (Request/Reply)</a><a id="nav_deliveryoptions" class="navsublink" href="#deliveryoptions" onclick="if (event.button == 0) return goTo('#deliveryoptions', true); else return true;">How to Control Message Delivery (Delivery Mode, Time-to-live and Priority)</a><a id="nav_activationproperties" class="navsublink" href="#activationproperties" onclick="if (event.button == 0) return goTo('#activationproperties', true); else return true;">How to Configure a Message-Driven Bean (Activation Properties, Durable Subscriptions)</a><a id="nav_concurrency" class="navsublink" href="#concurrency" onclick="if (event.button == 0) return goTo('#concurrency', true); else return true;">How to use JMS in multi-threaded applications</a><a id="nav_classes10" class="navsublink" href="#classes10" onclick="if (event.button == 0) return goTo('#classes10', true); else return true;">How to Use QueueConnectionFactory, QueueConnection, QueueSession...</a><a id="nav_andnow" class="navseclink" href="#andnow" onclick="if (event.button == 0) return goTo('#andnow', true); else return true;">And now...?</a><a id="nav_nextsteps" class="navsublink" href="#nextsteps" onclick="if (event.button == 0) return goTo('#nextsteps', true); else return true;">Next Steps</a></div></div><div id="popups"><div id="pp-d812e268" class="tooltip">The main advantage of JMS over technologies such as RMI, CORBA and Web Services is that JMS is designed for reliability and can be integrated into transactions. This makes it the technology of choice for many server applications. Using it in clients is not common though, as many JMS implementations don't work well through firewalls, and because complex client/server protocols are more difficult to implement using JMS. JMS works best when your messages are very simple.</div><div id="pp-d812e276" class="tooltip">Many EJB application servers ship with built-in JMS messaging support. In EJB application servers, a task can not run indefinitely. If an operation runs too long, the server assumes that it hangs and will try to abort it. You can avoid this problem by splitting your work into smaller pieces and send yourself a message for each piece of work. This will reduce the running time of the tasks, and possibly it also helps you to parallelize your workload, as several messages can then be processed simultaneously.</div><div id="pp-d812e311" class="tooltip">RMI's protocol is not very firewall-friendly, and if you can't be sure that client and server run the same version of your application, RMI can be quite complicated. Also, RMI is notoriously difficult to debug. Unlike SOAP, whose text-based messages can be easily viewed with a plethora of tools and whose HTTP transport can checked with every web browser, debugging RMI is mostly trial and error.</div><div id="pp-d812e387" class="tooltip">There are two kinds of subscribers for topics:<br/> <em>Nondurable subscribers</em> only get those messages that are published while the subscriber is keeping its connection open and stays subscribed.<br/><em>Durable subscribers</em> will also receive messages sent while they were offline.<br/><br/><strong class="warn">Note:</strong> if you send a message to a Topic without any subscribers, it will be discarded immediately.</div><div id="pp-d812e420" class="tooltip">Sending a message requires several steps. First you need to obtain a <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/ConnectionFactory.html" class="javadoc">ConnectionFactory</a>, which must be set up in a provider-specific way. Then you create the <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html" class="javadoc">Connection</a>, create a <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html" class="javadoc">Session</a> for the <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html" class="javadoc">Connection</a>, and finally a <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageProducer.html" class="javadoc">MessageProducer</a>. The <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageProducer.html" class="javadoc">MessageProducer</a> allows you to send the messages.<br/> This section's example shows you how to send a message to a ActiveMQ server.</div><div id="pp-d812e457" class="tooltip"> Creating a <span class="idf">ConnectionFactory</span> is always JMS-provider specific. The JMS Specification suggests that an administrator should configure a JMS <span class="idf">ConnectionFactory</span> and put it in a JNDI namespace where the application can obtain it. For small applications this usually too complicated, so most JMS providers offer a simple way to create ConnectionFactories as alternative.<br/> This example shows how to set up the <span class="idf">ConnectionFactory</span> for <em>ActiveMQ</em>, for a server running on <span class="idf">localhost</span> without authentication. </div><div id="pp-d812e510" class="tooltip">The first argument of the <span class="idf">createSession</span> method specifies whether the <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html" class="javadoc">Session</a> will be transacted or not. Transacted sessions send messages and acknowledge message reception only after a <span class="idf">commit</span>. The second argument specifies the way messages will be acknowledged if the <span class="idf">Session</span> is not transacted (for transacted sessions it will be ignored). <span class="idf">AUTO_ACKNOWLEDGE</span> means that the messages will be acknowledged automatically upon reception. <span class="idf">CLIENT_ACKNOWLEDGE</span> allows manual acknowledgement. This is important for receiving messages, as messages will only be removed from the queue after the reception has been acknowledged. For this example, which only sends a message, it does not matter.</div><div id="pp-d812e546" class="tooltip"> The <span class="idf">Queue</span> object only specifies the name of the queue to use, but <em>does not create it in the server</em>. The exact details of how <span class="idf">createQueue</span> works is JMS provider specific. In a complex setup, the <span class="idf">Queue</span> object should be taken from the JNDI context, just like the <span class="idf">ConnectionFactory</span>.<br/> Note that some messaging servers, like Websphere MQ, require you to create the queues in the server using their administrative tools before you can put any messages into them. Others, like ActiveMQ, create new queues dynamically as soon as they receive a message for a queue that does not exist yet.</div><div id="pp-d812e589" class="tooltip">While this <span class="idf">Message</span> is a simple text message, JMS provides other message types. They will be shown later.</div><div id="pp-d812e615" class="tooltip">In order to free any acquired resources you should always <span class="idf">close</span> any <span class="idf">Connection</span>s, <span class="idf">Session</span>s and <span class="idf">MessageProducer</span>s that you created.<br/> The <span class="idf">close</span> methods close constituent objects as well, so <em>closing the Connection is sufficient</em> in this example.</div><div id="pp-d812e650" class="tooltip">Polling a message requires several steps. First you need to obtain a <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/ConnectionFactory.html" class="javadoc">ConnectionFactory</a>, which must be set up in a provider-specific way. Then you create the <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html" class="javadoc">Connection</a>, create a <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html" class="javadoc">Session</a> for the <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Connection.html" class="javadoc">Connection</a>, and finally a <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageConsumer.html" class="javadoc">MessageConsumer</a>. The <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/MessageConsumer.html" class="javadoc">MessageConsumer</a> allows you to poll for messages.<br/> This section's example runs indefinitely to read messages from a ActiveMQ server and print them.</div><div id="pp-d812e721" class="tooltip">The first argument of the <span class="idf">createSession</span> method specifies whether the <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html" class="javadoc">Session</a> will be transacted or not. Transacted sessions send messages and acknowledge message reception only after a <span class="idf">commit</span>. The second argument specifies the way messages will be acknowledged if the <span class="idf">Session</span> is not transacted (for transacted sessions it will be ignored). <span class="idf">AUTO_ACKNOWLEDGE</span> means that the messages will be acknowledged automatically upon reception. <span class="idf">CLIENT_ACKNOWLEDGE</span> allows manual acknowledgement.</div><div id="pp-d812e779" class="tooltip">After you have set up your application, you must call <span class="idf">start</span> before you can receive any messages. You can also call <span class="idf">stop</span> on the connection if the application should not receive messages anymore. Note that this is mostly important when you use a <span class="idf">MessageListener</span>.</div><div id="pp-d812e808" class="tooltip"> <span class="idf">receive</span> waits until a message is in the queue and then returns it. Other methods in <span class="idf">MessageConsumer</span> allow you to wait for a specified amount of time for a message, return immediately if there is no message, or allow you to set a <span class="idf">MessageListener</span> that is notified asynchronously (in a separate thread).</div><div id="pp-d812e876" class="tooltip">Instead of polling, you can also implement the <span class="idf">MessageListener</span> interface. Once you registered an instance of <span class="idf">MessageListener</span> for the <a href="http://java.sun.com/javaee/5/docs/api/javax/jms/Session.html" class="javadoc">Session</a>, its <span class="idf">onMessage</span> method will be invoked every time you receive a message. This happens asynchronously, not in the thread that started the connections. Thus if you go this way without the help of an application server, you need to be sure that your application is <em>thread-safe</em>.<br/> This section's example runs indefinitely to read messages from a ActiveMQ server and print them.</div><div id="pp-d812e1056" class="tooltip">After you have set up your application, you must call <span class="idf">start</span> before you can receive any messages. You can also call <span class="idf">stop</span> on the connection if the application should not receive messages anymore.</div><div id="pp-d812e1069" class="tooltip">The <span class="idf">MessageListener</span> set above is working asynchronously. Thus, while this thread is sleeping, the JMS provider will invoke the <span class="idf">MessageListener</span> for every incoming message.</div><div id="pp-d812e1134" class="tooltip">Note that for other application servers you need different values in your environment. </div><div id="pp-d812e1180" class="tooltip">Retrieves the <span class="idf">ConnectionFactory</span> from the JNDI server. "/ConnectionFactory" is the JNDI name of the factory, as configured in the server.</div><div id="pp-d812e1205" class="tooltip">Retrieves the <span class="idf">Queue</span> from the JNDI server. "/queue/JarfillerQueue" is the JNDI name of the queue object, as configured in the server.</div><div id="pp-d812e1359" class="tooltip">The easiest way to send a message in a EJB 3 session bean is to <em>let the container inject references</em> for <span class="idf">ConnectionFactory</span> and <span class="idf">Destination</span> into your session bean. You can use them exactly like in stand-alone clients.<br/> Unfortunately the injection is a bit container-specific: most containers allow you to specify the global JNDI name of the <span class="idf">@Resource</span> in the <span class="idf">mappedName</span> property. Those that don't (like Websphere AS) require you to write a container-specific deployment descriptor and do the mapping there.</div><div id="pp-d812e1433" class="tooltip">This annotation let's the container inject the reference to the <span class="idf">ConnectionFactory</span> into the bean. "/ConnectionFactory" is the JNDI name configured in the server (in JBoss it is the default name for its own JMS implementation).<br/> <strong class="warn">Note:</strong> the <span class="idf">mappedName</span> property is not very portable. Some application servers (most notably Websphere AS) do not support it.</div><div id="pp-d812e1470" class="tooltip">This annotation let's the container inject the reference to the <span class="idf">Queue</span> into the bean. "/queue/JarfillerQueue" is the JNDI name configured in the server.<br/> <strong class="warn">Note:</strong> the <span class="idf">mappedName</span> property is not very portable. Some application servers (most notably Websphere AS) do not support it.</div><div id="pp-d812e1578" class="tooltip">In order to receive messages in an EJB container, create a <span class="idf">Message Driven Bean</span> (MDB). It implements the <span class="idf">MessageListener</span> interface which will be invoked every time a message is received.</div><div id="pp-d812e1609" class="tooltip">The activation configuration defines when the message-driven bean will be called. It contains properties as name/value pairs. The most important properties are "destinationType" which specifies whether the destination is a queue or a topic ("javax.jms.Topic"), and the "destination" with the destination's JNDI name.</div><div id="pp-d812e1833" class="tooltip">In order to receive messages from a <span class="idf">Topic</span>, you need to be to be subscribed to the <span class="idf">Topic</span>. This is simpler than it sounds - for a nondurable subscription you only create a <span class="idf">MessageConsumer</span> as you would for a queue. Note that with a nondurable subscription you only receive those messages sent ("published" in JMS speak) while you are subscribed to the <span class="idf">Topic</span>.</div><div id="pp-d812e1888" class="tooltip">Listening to a <span class="idf">Topic</span> is called 'subscribing' to it. Since JMS 1.1 topics and queues use the same methods, and thus this terminology does not appear in the API anymore.</div><div id="pp-d812e1946" class="tooltip">In order to receive a <span class="idf">Topic</span>s messages even if temporarily disconnected, you must create a durable subscription. This is easy to do: instead of <span class="idf">createConsumer</span> call <span class="idf">createDurableSubscriber</span>. It takes a string as additional argument, which must be a unique name for your subscription. In addition to that, you must also identify your client by setting your client ID.<br/> Now every time you connect with the same combination of strings, you will be connected to the same subscription. Any messages that have been sent to the topic while disconnected will be received when connecting again. To end the subscription <span class="idf">Session</span> provides an <span class="idf">unsubscribe</span> method.</div><div id="pp-d812e2001" class="tooltip">In order to use durable subscriptions, the client must identify itself in the <span class="idf">Connection</span>. In this case the client ID has been set explicitly.<br/> Alternatively, if you get the <span class="idf">ConnectionFactory</span> via JNDI, your JMS provider may also allow you to to pre-configure a client ID in the <span class="idf">ConnectionFactory</span>. This is often a better solution.</div><div id="pp-d812e2031" class="tooltip">In order to create a durable subscription you must also specify a name for your subscription (here "s1"). This allows you to re-connect to the same subscription by specifying the same name again.</div><div id="pp-d812e2094" class="tooltip">Unsubscribes from the durable subscription with the given name. <strong class="warn">You must close your <span class="idf">MessageConsumer</span> before you do this.</strong></div><div id="pp-d812e2593" class="tooltip">The delivery mode can be either <span class="idf">PERSISTENT</span> or <span class="idf">NON_PERSISTENT</span>. In the latter case, the JMS provider may not store the message and it may be lost e.g. if the provider crashed or is restarted. The delivery mode can be configured as parameter to <span class="idf">MessageProducer</span>'s <span class="idf">send</span> method. Some JMS implementations also allow setting a defaults.</div><div id="pp-d812e2623" class="tooltip">The message ID is a provider-generated string that allows you to identify the message. It will always start with "ID:".</div><div id="pp-d812e2658" class="tooltip">The JMSCorrelationID is a string set by the message sender which is typically used for responses to a request message. It should allow you to identify the request message that caused the response. By convention, it should contain the JMSMessageID of the request. However, the sender is allowed to put any other string here. <br/>Please note that the <span class="idf">Message</span> interface also provides a method <span class="idf">setJMSCorrelationIDAsBytes</span> which allows you to set a byte array instead of a string. </div><div id="pp-d812e2686" class="tooltip">The sender of a request message can use this header field to specify which <span class="idf">Destination</span> the recipient should sent its reply to. JMS only transmits this field, but does not do anything with it (thus the recipient is free to ignore it).</div><div id="pp-d812e2707" class="tooltip">If this header is set to <span class="idf">true</span>, JMS re-sends a message that may have been sent before, but for some reason the delivery has to be repeated. A likely reason for this is that the client did not acknowledge the message.</div><div id="pp-d812e2728" class="tooltip">This field allows the sender to specify a definition of the message format for the receiver and the JMS provider. For regular providers this is never needed, but some JMS implementations may use of this feature.</div><div id="pp-d812e2746" class="tooltip">If not 0, specifies the time at which the message expires. The expiration date can be indirectly set by specifying a time-to-live value in <span class="idf">MessageProducer</span>'s <span class="idf">send</span> method. Note that you actually may receive expired messages, JMS does not guarantee that they won't be delivered.</div><div id="pp-d812e2770" class="tooltip">When messages have different priorities, the JMS provider should try to deliver messages with higher priority first. However, the JMS standard does not require that all implementations actually do this.</div><div id="pp-d812e2902" class="tooltip">You can use <span class="idf">getStringProperty</span> to read any property, even numbers. Non-string properties will be automatically converted. Similarly, numbers will be automatically upconverted if the target number type is larger than the property's. For example, you can read a <span class="idf">byte</span> as <span class="idf">int</span>, but not an <span class="idf">int</span> as <span class="idf">byte</span>.</div><div id="pp-d812e3211" class="tooltip">'_' stands for a single character. '%' stands for any sequence of characters, including an empty sequence. Both wildcards can be anywhere in the string.</div><div id="pp-d812e3232" class="tooltip">The <span class="idf">IN</span> operator allows you to specify a set of strings. It returns true only if the first operand is in the set.<br/> <strong class="warn">Note!</strong> The <span class="idf">IN</span> operator works only on sets of strings, not on numbers.</div><div id="pp-d812e3262" class="tooltip">The <span class="idf">BETWEEN</span> operator allows you to check whether the first operand is between two numbers. "a BETWEEN n AND m" is equivalent to "a &gt;= n AND a &lt;= m". <strong class="warn">Note!</strong> The <span class="idf">BETWEEN</span> operator works on numbers, not strings.</div><div id="pp-d812e3411" class="tooltip">Reading an XML document into a string is easy if you know which character set it is using. But if you don't, you would need to parse the XML prolog to find out.<br/> Also, most XML APIs don't support serializing into a String.</div><div id="pp-d812e4267" class="tooltip">Actually the <span class="idf">Destination</span> that you pass to the producer is just a default destination. You can create a <span class="idf">MessageProducer</span> without default destination, and use the second <span class="idf">send</span> overload shown below to send to another destination.</div><div id="pp-d812e4334" class="tooltip">The JMSCorrelationID field allows you to specify that your message is related to the message whose ID you specify. It's up to the client to interpret the field though (in the snippet above the client ignores it).</div><div id="pp-d812e1910" class="tooltip"><span class="idf">Non-durable subscription</span> means that you only receive messages sent while you are connected, but not those published while you were offline. If you want them as well you need a <span class="idf">durable</span> subscription, shown later.</div><div id="pp-d812e2046" class="tooltip">With a <span class="idf">durable</span> subscription your client can receive messages published while the client was offline. It will get them the next time it connects with the same client ID and subscription name.</div><div id="pp-d812e2349" class="tooltip">'serializable' means that it implements Java's <span class="idf">Serializable</span> interface and follows the usual rules for serialization.</div><div id="ttCloseBar" class="closeBar"><a href="#" onclick="return tlClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div><div id="topicCloseBar" class="closeBar"><a href="#" onclick="return tpcClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div></div></body></html>