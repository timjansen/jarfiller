<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/1999/xhtml" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:page="http://tjansen.de/refPage" xmlns:i="http://tjansen.de/internal"><head><title>Servlets - Servlet 2.5 Guide</title><meta http-equiv="X-UA-Compatible" content="chrome=1"/><meta http-equiv="content-language" content="en"/><link rel="shortcut icon" href="../../images/favicon.png" type="image/png"/><link rel="stylesheet" type="text/css" href="../../style/style.css"/><script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-6791190-2']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
})();
</script><script type="text/javascript" src="../../js/all.js"/></head><body id="body"><div id="visibleContent"><div id="top"><a href="/"><img src="../../images/titlebar.png" alt="Jarfiller.com"/></a></div><div id="main"><div id="bodycolumn"><div class="yahbar"><div class="yahprev"><a href="overview.xhtml">Prev</a></div><h3 class="yahhere"><a href="#" onclick="return navToggle();">Servlet 2.5 Guide / Servlets</a></h3><div class="yahnext"><a href="responses.xhtml">Next</a></div></div><h1 id="sec_servlets" class="multipageTitle"><a name="servlets">Servlets</a></h1><div class="subSecRow2" id="sec_servletintro"><div class="subSecHead" id="sechd_servletintro"><a name="servletintro">Servlet Intro</a></div><div class="subSecContent" id="seccnt_servletintro"><p class="subSecExplanation">Servlets are <em>classes that handle HTTP requests</em> and generate a response for the client. To have a Servlet ready for deployment, you need to do four things:</p><ol class="subSecList"><li>Write the servlet class (must extend <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html" class="javadoc">HttpServlet</a>)</li><li>Declare the servlet in your <a href="#" id="tl-d22757e2009" class="dottedTooltip" onclick="return tlClick('tl-d22757e2009','pp-d22757e2012');" onmouseover="return tlOver('tl-d22757e2009','pp-d22757e2012');" onmouseout="return tlOut('tl-d22757e2009','pp-d22757e2012');">web.xml</a> deployment descriptor</li><li>Define one or more <a href="#" id="tl-d22757e2026" class="dottedTooltip" onclick="return tlClick('tl-d22757e2026','pp-d22757e2029');" onmouseover="return tlOver('tl-d22757e2026','pp-d22757e2029');" onmouseout="return tlOut('tl-d22757e2026','pp-d22757e2029');">url patterns</a> that the servlet responds to</li><li>Package your whole application in a <a href="#" id="tl-d22757e2035" class="dottedTooltip" onclick="return tlClick('tl-d22757e2035','pp-d22757e2039');" onmouseover="return tlOver('tl-d22757e2035','pp-d22757e2039');" onmouseout="return tlOut('tl-d22757e2035','pp-d22757e2039');">WAR</a> file.</li></ol></div></div><div class="subSecRow1" id="sec_classoverview"><div class="subSecHead" id="sechd_classoverview"><a name="classoverview">Class Overview</a></div><div class="subSecContent" id="seccnt_classoverview"><div class="subSecTableDiv"><table><tr><th>Base Interface</th><th>HTTP-specific Class</th><th>Purpose</th></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/Servlet.html" class="javadoc">Servlet</a></td><td><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html" class="javadoc">HttpServlet</a></td><td>Base interface to <em>implement for handling requests</em></td></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html" class="javadoc">ServletRequest</a></td><td><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a></td><td>Represents the request</td></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html" class="javadoc">ServletResponse</a></td><td><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a></td><td>Creates a response</td></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletConfig.html" class="javadoc">ServletConfig</a></td><td>-</td><td>Retrieving initialization parameters, servlet name</td></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletContext.html" class="javadoc">ServletContext</a></td><td>-</td><td>Access to web container features: resources, attributes, logging, dispatcher</td></tr><tr><td><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/Filter.html" class="javadoc">Filter</a></td><td>-</td><td>Modify a request before processing, or a response after processing</td></tr><tr><td>*Listener</td><td>Http*Listener</td><td>Notifications about various events in the application</td></tr><tr><td>-</td><td><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpSession.html" class="javadoc">HttpSession</a></td><td>Keeps state for a single client</td></tr></table></div></div></div><div class="subSecRow2" id="sec_servletclass"><div class="subSecHead" id="sechd_servletclass"><a name="servletclass">Servlet Class</a><br/>(<a href="#" id="tl-d22757e2146" class="dottedTooltip" onclick="return tlClick('tl-d22757e2146','pp-d22757e2151');" onmouseover="return tlOver('tl-d22757e2146','pp-d22757e2151');" onmouseout="return tlOut('tl-d22757e2146','pp-d22757e2151');">more</a>)
		</div><div class="subSecContent" id="seccnt_servletclass"><pre class="subSecCode"><code>package com.jarfiller.example;
import <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/package-summary.html" class="javadoc">javax.servlet.http.*</a>;
import <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/package-summary.html" class="javadoc">javax.servlet.*</a>;
import <a href="http://java.sun.com/javase/6/docs/api/java/io/package-summary.html" class="javadoc">java.io.*</a>;

<span class="cmt">// Simple dummy servlet with the most important methods</span>
public class SkeletonServlet extends <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html" class="javadoc">HttpServlet</a> {

    public SkeletonServlet() {               <span class="cmt">// <em>default constructor required</em> (<a href="#" id="tl-d22757e2230" class="dottedTooltip" onclick="return tlClick('tl-d22757e2230','pp-d22757e2230');" onmouseover="return tlOver('tl-d22757e2230','pp-d22757e2230');" onmouseout="return tlOut('tl-d22757e2230','pp-d22757e2230');">more</a>)</span>
    }

    @Override
    public void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#init(javax.servlet.ServletConfig)" class="javadoc">init</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletConfig.html" class="javadoc">ServletConfig</a> config)   <span class="cmt">// <em>invoked before first request</em> (<a href="#" id="tl-d22757e2277" class="dottedTooltip" onclick="return tlClick('tl-d22757e2277','pp-d22757e2277');" onmouseover="return tlOver('tl-d22757e2277','pp-d22757e2277');" onmouseout="return tlOut('tl-d22757e2277','pp-d22757e2277');">more</a>)</span>
        throws <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletException.html" class="javadoc">ServletException</a> {
        super.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#init(javax.servlet.ServletConfig)" class="javadoc">init</a>(config);                  <span class="cmt">// required when overriding <span class="idf">init</span>!</span>
        <span class="cmt">// do all initialization here</span>
    }

    @Override
    protected void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
        throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a>, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletException.html" class="javadoc">ServletException</a> {
        <span class="cmt">// handle HTTP GET requests here</span>
    }

    @Override
    protected void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doPost</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
        throws <a href="http://java.sun.com/javase/6/docs/api/java/io/IOException.html" class="javadoc">IOException</a>, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletException.html" class="javadoc">ServletException</a> {
        <span class="cmt">// handle HTTP POST requests here</span>
    }

    @Override
    public void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#destroy()" class="javadoc">destroy</a>() {                  <span class="cmt">// invoked before server discards the servlet (<a href="#" id="tl-d22757e2406" class="dottedTooltip" onclick="return tlClick('tl-d22757e2406','pp-d22757e2406');" onmouseover="return tlOver('tl-d22757e2406','pp-d22757e2406');" onmouseout="return tlOut('tl-d22757e2406','pp-d22757e2406');">more</a>)</span>
        <span class="cmt">// release resources here</span>
    }
}
</code></pre></div></div><div class="subSecRow1" id="sec_servicemethods"><div class="subSecHead" id="sechd_servicemethods"><a name="servicemethods">Service Method</a></div><div class="subSecContent" id="seccnt_servicemethods"><h2 class="subSecSummaryNoClick">Service Dispatching in the HttpServlet</h2><p class="subSecExplanation">The skeleton servlet above showed you methods like <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a> and <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doPost</a> to process requests. They are provided by the <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html" class="javadoc">HttpServlet</a> class, and overriding those methods is what you should do in 99% of all servlets.</p><p class="subSecExplanation">However, the actual <em><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/Servlet.html" class="javadoc">Servlet</a> interface is protocol agnostic</em> and thus does not know anything about the HTTP protocol and its commands, nor will it provide <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> and <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> objects, which are also HTTP-specific. Instead, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/Servlet.html" class="javadoc">Servlet</a> has a single method called <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/Servlet.html#service(javax.servlet.ServletRequest, javax.servlet.ServletResponse)" class="javadoc">service</a> which will be invoked for every request:</p><pre class="subSecCode"><code>void <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/Servlet.html#service(javax.servlet.ServletRequest, javax.servlet.ServletResponse)" class="javadoc">service</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletRequest.html" class="javadoc">ServletRequest</a> req, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/ServletResponse.html" class="javadoc">ServletResponse</a> res);
</code></pre><p class="subSecExplanation"><em><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html" class="javadoc">HttpServlet</a> overrides <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/Servlet.html#service(javax.servlet.ServletRequest, javax.servlet.ServletResponse)" class="javadoc">service</a> and will call one of the <span class="idf">doCommandName</span> methods</em> (<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>...), depending on the command of the request. It will also cast the generic request and response objects into HTTP-specific responses. </p></div></div><div class="subSecRow2" id="sec_lifecycle"><div class="subSecHead" id="sechd_lifecycle"><a name="lifecycle">Servlet Lifecyle</a></div><div class="subSecContent" id="seccnt_lifecycle"><h2 class="subSecSummaryNoClick">The Servlet Lifecycle</h2><p class="subSecExplanation">The lifecyle of a servlet:</p><ol class="subSecList"><li>Class instantiation with the empty default constructor</li><li><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#init(javax.servlet.ServletConfig)" class="javadoc">init</a> method invoked</li><li>processing with <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doPost</a> etc (<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#service(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">service</a> methods)</li><li><a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#destroy()" class="javadoc">destroy</a> method invoked</li></ol></div></div><div class="subSecRow1" id="sec_multithreading"><div class="subSecHead" id="sechd_multithreading"><a name="multithreading">Multithreading</a></div><div class="subSecContent" id="seccnt_multithreading"><p class="subSecExplanation"> Servlets are multi-threaded. This means that the web server will call the service methods (<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doPost</a>...) from several threads, and thus your <em>servlet implementation must be thread-safe</em>.<br/> The next section shows you <a href="#twothreadsafeways" onclick="if (event.button == 0) return goTo('#twothreadsafeways', true); else return true;">two easy ways to make your servlets multi-threaded</a>. </p></div></div><div class="subSecRow2" id="sec_twothreadsafeways"><div class="subSecHead" id="sechd_twothreadsafeways"><a name="twothreadsafeways"/></div><div class="subSecContent" id="seccnt_twothreadsafeways"><h2 class="subSecSummaryNoClick">Two Simple Ways to Write Thread-Safe Servlets</h2><p class="subSecExplanation"> Here are two <em>recipes that allow you to write thread-safe servlets</em> without knowing anything about multi-threading (<a href="#" id="tl-d22757e2593" class="dottedTooltip" onclick="return tlClick('tl-d22757e2593','pp-d22757e2593');" onmouseover="return tlOver('tl-d22757e2593','pp-d22757e2593');" onmouseout="return tlOut('tl-d22757e2593','pp-d22757e2593');">more</a>). </p><h4 class="subSecMiniHeadline">Recipe 1: Synchronize your Servlet</h4><p class="subSecExplanation">To make your servlet thread-safe, just <em>declare all overriden methods as <span class="idf">synchronized</span></em> (<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#init(javax.servlet.ServletConfig)" class="javadoc">init</a>, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#destroy()" class="javadoc">destroy</a>, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>...). This is the easiest way, but also means that you can <em>process only one request at a time</em>. Synchronizing the whole servlet is only feasible for low-volume sites. </p><p class="subSecExplanation"> The following example shows how to synchronize a Servlet so that only one thread runs in it at a time. Note that there is no constructor, but Java's default constructor will be taken. If you would provide an constructor, you'd need to put the code into a <span class="idf">synchronize</span> block with 'this' as synchronization object (<a href="#" id="tl-d22757e2624" class="dottedTooltip" onclick="return tlClick('tl-d22757e2624','pp-d22757e2624');" onmouseover="return tlOver('tl-d22757e2624','pp-d22757e2624');" onmouseout="return tlOut('tl-d22757e2624','pp-d22757e2624');">more</a>).</p><pre class="subSecCode"><code>public class SynchronizedSkeletonServlet extends <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html" class="javadoc">HttpServlet</a> {

    @Override
    public <em>synchronized</em> void init(ServletConfig config) {
        super.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#init(javax.servlet.ServletConfig)" class="javadoc">init</a>(config);
        <span class="cmt">// do all initialization here</span>
    }

    @Override
    protected <em>synchronized</em> void doGet(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
        throws IOException {
        <span class="cmt">// handle HTTP GET requests here</span>
    }
}
</code></pre><h4 class="subSecMiniHeadline">Recipe 2: Restrict Usage of Fields</h4><p class="subSecExplanation">Alternatively, restrict the use of fields and follow these simple five rules (<a href="#" id="tl-d22757e2703" class="dottedTooltip" onclick="return tlClick('tl-d22757e2703','pp-d22757e2703');" onmouseover="return tlOver('tl-d22757e2703','pp-d22757e2703');" onmouseout="return tlOut('tl-d22757e2703','pp-d22757e2703');">more</a>):</p><ol class="subSecList"><li>All fields in the <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/Servlet.html" class="javadoc">Servlet</a> class <em>must be <span class="idf">volatile</span></em>.</li><li><em>Only <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#init(javax.servlet.ServletConfig)" class="javadoc">init</a> can set and modify fields</em> (including objects reachable by those fields).</li><li>The <em>service methods</em> (<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doGet(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doGet</a>, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html#doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)" class="javadoc">doPost</a>...) can read the <span class="idf">volatile</span> fields, but <em>must not modify</em> any field.</li><li>Data in attributes, sessions etc must be treated like <span class="idf">volatile</span> members: write them in the <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#init(javax.servlet.ServletConfig)" class="javadoc">init</a> method, read-only access in the service methods.</li><li>Constant fields with <span class="idf">final</span> modifier are allowed, but can only be modified in the constructor.</li></ol><p class="subSecExplanation">Of course, the easiest way to achieve this is to <em>have no fields in your servlet class</em>, and to work only with local variables.</p><p class="subSecExplanation">This example shows a simple servlet that initializes a local field in <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#init(javax.servlet.ServletConfig)" class="javadoc">init</a>.</p><pre class="subSecCode"><code>public class RedirectServlet extends <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html" class="javadoc">HttpServlet</a> {

    private <em>volatile</em> String <em>newLocation</em>;

    @Override
    public void init(ServletConfig config) {
        super.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/GenericServlet.html#init(javax.servlet.ServletConfig)" class="javadoc">init</a>(config);

        <em>newLocation</em> = config.getInitParameter("redirectUrl");
    }

    @Override
    protected void doGet(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response)
        throws IOException {
        response.<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html#sendRedirect(java.lang.String)" class="javadoc">sendRedirect</a>(<em>newLocation</em>);  <span class="cmt">// sends client to the configured URL</span>
    }
}
</code></pre></div></div><div class="subSecRow1" id="sec_webapplications"><div class="subSecHead" id="sechd_webapplications"><a name="webapplications">Web Applications</a></div><div class="subSecContent" id="seccnt_webapplications"><p class="subSecExplanation"> To deploy your servlet in a web container, you need to package it as a web application and store it in a WAR file. WARs are <em><a href="#" id="tl-d22757e2865" class="dottedTooltip" onclick="return tpcClick('tl-d22757e2865','pp-d22757e184');" onmouseover="return tpcOver('tl-d22757e2865','pp-d22757e184');" onmouseout="return tpcOut('tl-d22757e2865','pp-d22757e184');">JARs</a> with a special file layout</em> and a ".war" extension. They also require a <em>deployment descriptor file called <span class="idf">web.xml</span></em> which must be located at <span class="idf">/WEB-INF/web.xml</span> in the WAR. </p><h4 class="subSecMiniHeadline">Web Application Layout</h4><div class="subSecTableDiv"><table><tr><th>Path Pattern</th><th>Description</th></tr><tr><td>/*</td><td>Static content (HTML, images, stylesheets..) and <a href="#" id="tl-d22757e2894" class="dottedTooltip" onclick="return tpcClick('tl-d22757e2894','pp-d22757e144');" onmouseover="return tpcOver('tl-d22757e2894','pp-d22757e144');" onmouseout="return tpcOut('tl-d22757e2894','pp-d22757e144');">JSPs</a> (<a href="#" id="tl-d22757e2897" class="dottedTooltip" onclick="return tlClick('tl-d22757e2897','pp-d22757e2897');" onmouseover="return tlOver('tl-d22757e2897','pp-d22757e2897');" onmouseout="return tlOut('tl-d22757e2897','pp-d22757e2897');">more</a>)</td></tr><tr><td>/WEB-INF/*</td><td>All data except static content</td></tr><tr><td>/WEB-INF/web.xml</td><td>Deployment descriptor (<a href="#webxml" onclick="if (event.button == 0) return goTo('#webxml', true); else return true;">shown below</a>)</td></tr><tr><td>/WEB-INF/classes/</td><td>The application's Java classes (e.g. your servlet class)</td></tr><tr><td>/WEB-INF/lib/*.jar</td><td>Libraries required by the application</td></tr><tr><td>/META-INF/*</td><td>optional <a href="#" id="tl-d22757e2935" class="dottedTooltip" onclick="return tpcClick('tl-d22757e2935','pp-d22757e184');" onmouseover="return tpcOver('tl-d22757e2935','pp-d22757e184');" onmouseout="return tpcOut('tl-d22757e2935','pp-d22757e184');">JAR</a> descriptors, vendor extensions (<a href="#" id="tl-d22757e2938" class="dottedTooltip" onclick="return tlClick('tl-d22757e2938','pp-d22757e2938');" onmouseover="return tlOver('tl-d22757e2938','pp-d22757e2938');" onmouseout="return tlOut('tl-d22757e2938','pp-d22757e2938');">more</a>)</td></tr></table></div><p class="subSecExplanation">There are <em>no required files</em> or directories for WARs. A WAR containing only static files does not need <span class="idf">WEB-INF</span> at all.</p><h4 class="subSecMiniHeadline">Creating the Web Application / WAR</h4><p class="subSecExplanation">To create a WAR, you need to</p><ul class="subSecList"><li>Copy your classes, libraries and static files into the directory structure shown above</li><li>Create a deployment descriptor at /WEB-INF/web.xml (<a href="#webxml" onclick="if (event.button == 0) return goTo('#webxml', true); else return true;">see below</a>)</li><li>Put the whole directory into a WAR archive (<a href="#" id="tl-d22757e2980" class="dottedTooltip" onclick="return tlClick('tl-d22757e2980','pp-d22757e2980');" onmouseover="return tlOver('tl-d22757e2980','pp-d22757e2980');" onmouseout="return tlOut('tl-d22757e2980','pp-d22757e2980');">more</a>)</li></ul><p class="subSecExplanation">If you use an IDE (such as Eclipse or Netbeans), <em>the IDE will help you assemble the WAR</em>, so you don't have to do this manually.<br/> Also, many application servers allow you to copy the directory directly instead of the deploying a WAR file. This makes deployment faster during development. </p></div></div><div class="subSecRow2" id="sec_webxml"><div class="subSecHead" id="sechd_webxml"><a name="webxml">web.xml</a></div><div class="subSecContent" id="seccnt_webxml"><p class="subSecExplanation">You need to <em>declare all servlets in the <span class="idf">web.xml</span> deployment descriptor</em>. </p><p class="subSecExplanation">Here is a very simple <span class="idf">web.xml</span>, declaring only one servlet and mapping it onto a path:</p><pre class="subSecConfig">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
<span class="tag">&lt;<a href="#" id="tl-d22757e3021" class="tooltip" onclick="return tlClick('tl-d22757e3021','pp-d22757e314');" onmouseover="return tlOver('tl-d22757e3021','pp-d22757e314');" onmouseout="return tlOut('tl-d22757e3021','pp-d22757e314');">web-app</a> <a href="#" id="tl-d22757e3023" class="tooltip" onclick="return tlClick('tl-d22757e3023','pp-d22757e321');" onmouseover="return tlOver('tl-d22757e3023','pp-d22757e321');" onmouseout="return tlOut('tl-d22757e3023','pp-d22757e321');">xmlns</a>="http://java.sun.com/xml/ns/j2ee"
         <a href="#" id="tl-d22757e3026" class="tooltip" onclick="return tlClick('tl-d22757e3026','pp-d22757e323');" onmouseover="return tlOver('tl-d22757e3026','pp-d22757e323');" onmouseout="return tlOut('tl-d22757e3026','pp-d22757e323');">xmlns:xsi</a>="http://www.w3.org/2001/XMLSchema-instance"
         <a href="#" id="tl-d22757e3029" class="tooltip" onclick="return tlClick('tl-d22757e3029','pp-d22757e328');" onmouseover="return tlOver('tl-d22757e3029','pp-d22757e328');" onmouseout="return tlOut('tl-d22757e3029','pp-d22757e328');">xsi:schemaLocation</a>="http://java.sun.com/xml/ns/j2ee
                             http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
         <a href="#" id="tl-d22757e3032" class="tooltip" onclick="return tlClick('tl-d22757e3032','pp-d22757e288');" onmouseover="return tlOver('tl-d22757e3032','pp-d22757e288');" onmouseout="return tlOut('tl-d22757e3032','pp-d22757e288');">version</a>="2.4"&gt;</span>
         
    <span class="cmt">&lt;!--  Declare the servlet class  --&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d22757e3039" class="tooltip" onclick="return tlClick('tl-d22757e3039','pp-d22757e420');" onmouseover="return tlOver('tl-d22757e3039','pp-d22757e420');" onmouseout="return tlOut('tl-d22757e3039','pp-d22757e420');">servlet</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d22757e3042" class="tooltip" onclick="return tlClick('tl-d22757e3042','pp-d22757e431');" onmouseover="return tlOver('tl-d22757e3042','pp-d22757e431');" onmouseout="return tlOut('tl-d22757e3042','pp-d22757e431');">servlet-name</a>&gt;</span>timeServlet1<span class="tag">&lt;/<a href="#" id="tl-d22757e3045" class="tooltip" onclick="return tlClick('tl-d22757e3045','pp-d22757e431');" onmouseover="return tlOver('tl-d22757e3045','pp-d22757e431');" onmouseout="return tlOut('tl-d22757e3045','pp-d22757e431');">servlet-name</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d22757e3048" class="tooltip" onclick="return tlClick('tl-d22757e3048','pp-d22757e436');" onmouseover="return tlOver('tl-d22757e3048','pp-d22757e436');" onmouseout="return tlOut('tl-d22757e3048','pp-d22757e436');">servlet-class</a>&gt;</span>com.jarfiller.example.TimeServlet<span class="tag">&lt;/<a href="#" id="tl-d22757e3051" class="tooltip" onclick="return tlClick('tl-d22757e3051','pp-d22757e436');" onmouseover="return tlOver('tl-d22757e3051','pp-d22757e436');" onmouseout="return tlOut('tl-d22757e3051','pp-d22757e436');">servlet-class</a>&gt;</span>
    <span class="tag">&lt;/<a href="#" id="tl-d22757e3053" class="tooltip" onclick="return tlClick('tl-d22757e3053','pp-d22757e420');" onmouseover="return tlOver('tl-d22757e3053','pp-d22757e420');" onmouseout="return tlOut('tl-d22757e3053','pp-d22757e420');">servlet</a>&gt;</span>
    
    <span class="cmt">&lt;!--  Declare the URL path handled by this servlet (<a href="#" id="tl-d22757e3057" class="dottedTooltip" onclick="return tlClick('tl-d22757e3057','pp-d22757e3057');" onmouseover="return tlOver('tl-d22757e3057','pp-d22757e3057');" onmouseout="return tlOut('tl-d22757e3057','pp-d22757e3057');">more</a>)  --&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d22757e3068" class="tooltip" onclick="return tlClick('tl-d22757e3068','pp-d22757e478');" onmouseover="return tlOver('tl-d22757e3068','pp-d22757e478');" onmouseout="return tlOut('tl-d22757e3068','pp-d22757e478');">servlet-mapping</a>&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d22757e3071" class="tooltip" onclick="return tlClick('tl-d22757e3071','pp-d22757e481');" onmouseover="return tlOver('tl-d22757e3071','pp-d22757e481');" onmouseout="return tlOut('tl-d22757e3071','pp-d22757e481');">servlet-name</a>&gt;</span>timeServlet1<span class="tag">&lt;/<a href="#" id="tl-d22757e3075" class="tooltip" onclick="return tlClick('tl-d22757e3075','pp-d22757e481');" onmouseover="return tlOver('tl-d22757e3075','pp-d22757e481');" onmouseout="return tlOut('tl-d22757e3075','pp-d22757e481');">servlet-name</a>&gt;</span> <span class="cmt">&lt;!-- <em>much match servlet-name</em> above! --&gt;</span>
        <span class="tag">&lt;<a href="#" id="tl-d22757e3082" class="tooltip" onclick="return tlClick('tl-d22757e3082','pp-d22757e312');" onmouseover="return tlOver('tl-d22757e3082','pp-d22757e312');" onmouseout="return tlOut('tl-d22757e3082','pp-d22757e312');">url-pattern</a>&gt;</span>/now<span class="tag">&lt;/<a href="#" id="tl-d22757e3085" class="tooltip" onclick="return tlClick('tl-d22757e3085','pp-d22757e312');" onmouseover="return tlOver('tl-d22757e3085','pp-d22757e312');" onmouseout="return tlOut('tl-d22757e3085','pp-d22757e312');">url-pattern</a>&gt;</span>
    <span class="tag">&lt;/<a href="#" id="tl-d22757e3087" class="tooltip" onclick="return tlClick('tl-d22757e3087','pp-d22757e478');" onmouseover="return tlOver('tl-d22757e3087','pp-d22757e478');" onmouseout="return tlOut('tl-d22757e3087','pp-d22757e478');">servlet-mapping</a>&gt;</span>
<span class="tag">&lt;/<a href="#" id="tl-d22757e3089" class="tooltip" onclick="return tlClick('tl-d22757e3089','pp-d22757e314');" onmouseover="return tlOver('tl-d22757e3089','pp-d22757e314');" onmouseout="return tlOut('tl-d22757e3089','pp-d22757e314');">web-app</a>&gt;</span>
		</pre><p class="subSecExplanation">For details on <span class="idf">web.xml</span>, visit Jarfiller's <a href="../../reference/webxml2x/">Web.xml Reference</a>.</p></div></div><div class="subSecRow1" id="sec_applayout"><div class="subSecHead" id="sechd_applayout"><a name="applayout">Example Layout</a></div><div class="subSecContent" id="seccnt_applayout"><h2 class="subSecSummaryNoClick">Example Application Layout</h2><p class="subSecExplanation"> As example, here all files of a web application called <span class="idf">timeapp.war</span>:</p><div class="subSecTableDiv"><table><tr><th>File</th><th>Description</th></tr><tr><td>/index.html</td><td>Default page</td></tr><tr><td>/images/clock.png</td><td>An Image (clock)</td></tr><tr><td>/images/logo.png</td><td>An Image (clock)</td></tr><tr><td>/WEB-INF/web.xml</td><td>Deployment descriptor</td></tr><tr><td>/WEB-INF/classes/com/jarfiller/example/TimeServlet.class</td><td>The servlet class</td></tr><tr><td>/WEB-INF/classes/com/jarfiller/example/Helper.class</td><td>Some other class</td></tr><tr><td>/WEB-INF/lib/joda-time.jar</td><td>A library for the servlet</td></tr></table></div></div></div><div class="subSecRow2" id="sec_contextroot"><div class="subSecHead" id="sechd_contextroot"><a name="contextroot">Context Root</a></div><div class="subSecContent" id="seccnt_contextroot"><p class="subSecExplanation">The <em>context root is the web application's path on the web server</em>. All paths that you configure in <span class="idf">web.xml</span> are <em>relative to the context root</em>. The context root needs to be <em>set in the web container</em> (<a href="#" id="tl-d22757e3192" class="dottedTooltip" onclick="return tlClick('tl-d22757e3192','pp-d22757e3192');" onmouseover="return tlOver('tl-d22757e3192','pp-d22757e3192');" onmouseout="return tlOut('tl-d22757e3192','pp-d22757e3192');">more</a>). </p><p class="subSecExplanation"> Let's assume you have a web container running on <a href="http://en.wikipedia.org/wiki/Localhost">localhost</a> port 8080, and you set the context root to 'myapp'. Then all static files and all url patterns are relative to the URL "http://localhost:8080/myapp/".<br/> If you don't want your application to reside in a directory, you <em>must set your context root to '/'</em>. </p></div></div><div class="subSecRow1" id="sec_staticcontent"><div class="subSecHead" id="sechd_staticcontent"><a name="staticcontent">Static Content</a></div><div class="subSecContent" id="seccnt_staticcontent"><p class="subSecExplanation">All files in a WAR file (except <span class="idf">/WEB-INF/*</span> and <span class="idf">/META-INF/*</span>) will automatically be <em>served by the web server as static files</em>, located at the application's base URL (<a href="#" id="tl-d22757e3230" class="dottedTooltip" onclick="return tlClick('tl-d22757e3230','pp-d22757e3230');" onmouseover="return tlOver('tl-d22757e3230','pp-d22757e3230');" onmouseout="return tlOut('tl-d22757e3230','pp-d22757e3230');">more</a>).</p><h4 class="subSecMiniHeadline">Content Type / MIME Type Mapping</h4><p class="subSecExplanation">The server determines the content type (MIME type) of static files from their extension. The specification does not require the container to know any extensions, unless you define <em>content type mappings in your <span class="idf">web.xml</span> deployment descriptor</em>:</p><pre class="subSecConfig"><span class="tag">&lt;<a href="#" id="tl-d22757e3247" class="tooltip" onclick="return tlClick('tl-d22757e3247','pp-d22757e493');" onmouseover="return tlOver('tl-d22757e3247','pp-d22757e493');" onmouseout="return tlOut('tl-d22757e3247','pp-d22757e493');">mime-mapping</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d22757e3250" class="tooltip" onclick="return tlClick('tl-d22757e3250','pp-d22757e495');" onmouseover="return tlOver('tl-d22757e3250','pp-d22757e495');" onmouseout="return tlOut('tl-d22757e3250','pp-d22757e495');">extension</a>&gt;</span>html<span class="tag">&lt;/<a href="#" id="tl-d22757e3253" class="tooltip" onclick="return tlClick('tl-d22757e3253','pp-d22757e495');" onmouseover="return tlOver('tl-d22757e3253','pp-d22757e495');" onmouseout="return tlOut('tl-d22757e3253','pp-d22757e495');">extension</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d22757e3255" class="tooltip" onclick="return tlClick('tl-d22757e3255','pp-d22757e497');" onmouseover="return tlOver('tl-d22757e3255','pp-d22757e497');" onmouseout="return tlOut('tl-d22757e3255','pp-d22757e497');">mime-type</a>&gt;</span>text/html<span class="tag">&lt;/<a href="#" id="tl-d22757e3258" class="tooltip" onclick="return tlClick('tl-d22757e3258','pp-d22757e497');" onmouseover="return tlOver('tl-d22757e3258','pp-d22757e497');" onmouseout="return tlOut('tl-d22757e3258','pp-d22757e497');">mime-type</a>&gt;</span>
<span class="tag">&lt;/<a href="#" id="tl-d22757e3260" class="tooltip" onclick="return tlClick('tl-d22757e3260','pp-d22757e493');" onmouseover="return tlOver('tl-d22757e3260','pp-d22757e493');" onmouseout="return tlOut('tl-d22757e3260','pp-d22757e493');">mime-mapping</a>&gt;</span>
<span class="tag">&lt;<a href="#" id="tl-d22757e3263" class="tooltip" onclick="return tlClick('tl-d22757e3263','pp-d22757e493');" onmouseover="return tlOver('tl-d22757e3263','pp-d22757e493');" onmouseout="return tlOut('tl-d22757e3263','pp-d22757e493');">mime-mapping</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d22757e3266" class="tooltip" onclick="return tlClick('tl-d22757e3266','pp-d22757e495');" onmouseover="return tlOver('tl-d22757e3266','pp-d22757e495');" onmouseout="return tlOut('tl-d22757e3266','pp-d22757e495');">extension</a>&gt;</span>xhtml<span class="tag">&lt;/<a href="#" id="tl-d22757e3269" class="tooltip" onclick="return tlClick('tl-d22757e3269','pp-d22757e495');" onmouseover="return tlOver('tl-d22757e3269','pp-d22757e495');" onmouseout="return tlOut('tl-d22757e3269','pp-d22757e495');">extension</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d22757e3271" class="tooltip" onclick="return tlClick('tl-d22757e3271','pp-d22757e497');" onmouseover="return tlOver('tl-d22757e3271','pp-d22757e497');" onmouseout="return tlOut('tl-d22757e3271','pp-d22757e497');">mime-type</a>&gt;</span>application/xhtml+xml<span class="tag">&lt;/<a href="#" id="tl-d22757e3274" class="tooltip" onclick="return tlClick('tl-d22757e3274','pp-d22757e497');" onmouseover="return tlOver('tl-d22757e3274','pp-d22757e497');" onmouseout="return tlOut('tl-d22757e3274','pp-d22757e497');">mime-type</a>&gt;</span>
<span class="tag">&lt;/<a href="#" id="tl-d22757e3276" class="tooltip" onclick="return tlClick('tl-d22757e3276','pp-d22757e493');" onmouseover="return tlOver('tl-d22757e3276','pp-d22757e493');" onmouseout="return tlOut('tl-d22757e3276','pp-d22757e493');">mime-mapping</a>&gt;</span>
				</pre><p class="subSecExplanation">In practice, common file types such as HTML and PNG are known to containers though, and you don't have to define them (hardly anyone does).</p><h4 class="subSecMiniHeadline">Welcome Files</h4><p class="subSecExplanation">You can <em>define welcome files</em>, which are the names of files which will be shown when a user requests a directory (<a href="#" id="tl-d22757e3291" class="dottedTooltip" onclick="return tlClick('tl-d22757e3291','pp-d22757e3291');" onmouseover="return tlOver('tl-d22757e3291','pp-d22757e3291');" onmouseout="return tlOut('tl-d22757e3291','pp-d22757e3291');">more</a>). Without them, the server shows a <span class="idf">404 Not Found</span> error. This is a welcome file definition for <span class="idf">web.xml</span>: </p><pre class="subSecConfig"><span class="tag">&lt;<a href="#" id="tl-d22757e3302" class="tooltip" onclick="return tlClick('tl-d22757e3302','pp-d22757e499');" onmouseover="return tlOver('tl-d22757e3302','pp-d22757e499');" onmouseout="return tlOut('tl-d22757e3302','pp-d22757e499');">welcome-file-list</a>&gt;</span>  <span class="cmt">&lt;!-- ordered by preference --&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d22757e3308" class="tooltip" onclick="return tlClick('tl-d22757e3308','pp-d22757e501');" onmouseover="return tlOver('tl-d22757e3308','pp-d22757e501');" onmouseout="return tlOut('tl-d22757e3308','pp-d22757e501');">welcome-file</a>&gt;</span>index.jsp<span class="tag">&lt;/<a href="#" id="tl-d22757e3311" class="tooltip" onclick="return tlClick('tl-d22757e3311','pp-d22757e501');" onmouseover="return tlOver('tl-d22757e3311','pp-d22757e501');" onmouseout="return tlOut('tl-d22757e3311','pp-d22757e501');">welcome-file</a>&gt;</span>    
    <span class="tag">&lt;<a href="#" id="tl-d22757e3313" class="tooltip" onclick="return tlClick('tl-d22757e3313','pp-d22757e501');" onmouseover="return tlOver('tl-d22757e3313','pp-d22757e501');" onmouseout="return tlOut('tl-d22757e3313','pp-d22757e501');">welcome-file</a>&gt;</span>index.xhtml<span class="tag">&lt;/<a href="#" id="tl-d22757e3316" class="tooltip" onclick="return tlClick('tl-d22757e3316','pp-d22757e501');" onmouseover="return tlOver('tl-d22757e3316','pp-d22757e501');" onmouseout="return tlOut('tl-d22757e3316','pp-d22757e501');">welcome-file</a>&gt;</span>
    <span class="tag">&lt;<a href="#" id="tl-d22757e3319" class="tooltip" onclick="return tlClick('tl-d22757e3319','pp-d22757e501');" onmouseover="return tlOver('tl-d22757e3319','pp-d22757e501');" onmouseout="return tlOut('tl-d22757e3319','pp-d22757e501');">welcome-file</a>&gt;</span>index.html<span class="tag">&lt;/<a href="#" id="tl-d22757e3322" class="tooltip" onclick="return tlClick('tl-d22757e3322','pp-d22757e501');" onmouseover="return tlOver('tl-d22757e3322','pp-d22757e501');" onmouseout="return tlOut('tl-d22757e3322','pp-d22757e501');">welcome-file</a>&gt;</span>
<span class="tag">&lt;/<a href="#" id="tl-d22757e3324" class="tooltip" onclick="return tlClick('tl-d22757e3324','pp-d22757e499');" onmouseover="return tlOver('tl-d22757e3324','pp-d22757e499');" onmouseout="return tlOut('tl-d22757e3324','pp-d22757e499');">welcome-file-list</a>&gt;</span></pre><p class="subSecExplanation"/></div></div><div class="subSecRow2" id="sec_eclipse"><div class="subSecHead" id="sechd_eclipse"><a name="eclipse">Eclipse</a></div><div class="subSecContent" id="seccnt_eclipse"><h2 class="subSecSummaryNoClick">How to Create a Web Application with Eclipse</h2><p class="subSecExplanation"> Eclipse offers great support for web applications:</p><ul class="subSecList"><li>Create a '<em>Dynamic Web Project</em>' for web applications.</li><li>The <em>'Dynamic Web Module Version' is the Servlet API version</em>. Select "2.5".</li><li>All <em>files in <span class="idf">/WebContent</span> will be copied into the WAR</em>, in addition to all compiled classes. Use it for static files.</li><li>Eclipse can <em>run and debug your web application directly in a local Tomcat</em> server and most other containers (<a href="#" id="tl-d22757e3370" class="dottedTooltip" onclick="return tlClick('tl-d22757e3370','pp-d22757e3370');" onmouseover="return tlOver('tl-d22757e3370','pp-d22757e3370');" onmouseout="return tlOut('tl-d22757e3370','pp-d22757e3370');">more</a>).</li><li>Use 'Export..' with a 'Web/WAR file' destination to create a WAR.</li></ul></div></div><div class="subSecRow1" id="sec_ant"><div class="subSecHead" id="sechd_ant"><a name="ant">Ant Packaging</a></div><div class="subSecContent" id="seccnt_ant"><h2 class="subSecSummaryNoClick">How to Create a Web Application (WAR) with Ant</h2><p class="subSecExplanation"> Use <a href="http://ant.apache.org/">Ant</a>'s <a href="http://ant.apache.org/manual/CoreTasks/war.html">war</a> task to create WAR files. You only need to specify the location of the WAR, the web.xml and your files: </p><pre class="subSecConfig">&lt;war destfile="build/timeapp.war" webxml="WebContent/WEB-INF/web.xml"&gt;
    &lt;fileset dir="WebContent/"/&gt;     &lt;!-- Copy static files --&gt;
    &lt;lib dir="lib/"/&gt;                &lt;!-- Copy all libraries (*.jar) --&gt;
    &lt;classes dir="build/classes/"/&gt;  &lt;!-- Copy classes --&gt;
&lt;/war&gt;   
				</pre></div></div><div class="subSecRow2" id="sec_tomcat"><div class="subSecHead" id="sechd_tomcat"><a name="tomcat">Tomcat</a></div><div class="subSecContent" id="seccnt_tomcat"><h2 class="subSecSummaryNoClick">How to Deploy a Web Application on Tomcat</h2><p class="subSecExplanation">Deployment of web applications in Tomcat is very easy:</p><ul class="subSecList"><li>To deploy an application, <em>copy the WAR into Tomcat's <span class="idf">webapps</span> directory</em>. The application will start automatically.</li><li>Alternatively, you can also <em>copy web application directories</em> (extracted WARs) into <span class="idf">webapps</span>.</li><li>You can configure your application either <em>by editing Tomcat's <span class="idf">conf/context.xml</span> file</em>, or by putting a file <span class="idf">/META-INF/context.xml</span> into your web application. Read Tomcat's <a href="http://tomcat.apache.org/tomcat-6.0-doc/config/context.html">Context Configuration documentation</a>.</li><li>The <em>context root is the application's WAR file name</em> (without extension) if you copied a WAR, or the directory name for directories. If the WAR file is called <span class="idf">ROOT.war</span> (or you copy a directory called <span class="idf">ROOT</span>), it will be deployed with the context root "/".</li></ul></div></div><div class="yahbar"><div class="yahprev"><a href="overview.xhtml">Prev<br/><span>Overview</span></a></div><div class="yahhere"><a href="#" onclick="return navToggle();">Servlet 2.5 Guide / Servlets</a><br/><a href="/guide/servlet25/"><span>Single Page Mode</span></a>, <a href="#" onclick="return navToggle();"><span>Show Table of Content</span></a></div><div class="yahnext"><a href="responses.xhtml">Next<br/><span>Responses</span></a></div></div></div><div id="sidecolumn">
    	<div><h3>Useful Links</h3><div class="sidecolumnSubTitleLine"/>
	  			<a href="http://java.sun.com/products/servlet/">Servlet Homepage</a><br/>
	  			<a href="http://en.wikipedia.org/wiki/Java_Servlet">Servlet on Wikipedia</a><br/>
	  			<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/package-summary.html">javax.servlet API Docs</a><br/>
	  			<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/package-summary.html">javax.servlet.http API Docs</a><br/>
	  			<a href="http://jcp.org/aboutJava/communityprocess/mrel/jsr154/index2.html">Servlet 2.5 Specification</a><br/>
	  		</div>
  		
  		<div><h3>Related Documents</h3><div class="sidecolumnSubTitleLine">(on Jarfiller.com)</div>
	  			<a href="/reference/webxml2x/">Web.xml Reference</a><br/>
	  		</div>
  	
  </div></div></div><div id="footer"><div id="footer-content"><div id="footer-left"><div class="footerLine"><a href="/">Home</a> - <a href="/about">About Jarfiller</a> - <a href="/imprint.xhtml">Imprint</a></div><div class="footerLine">Please send feedback and corrections to <a href="mailto:tim@tjansen.de">tim@<span style="display: none">got you</span>tjansen.de</a>.</div><div class="footerLine"><a href="http://www.twitter.com/timjansen">Follow</a> me on Twitter.</div><div class="copyrightLine">© 2010 Tim Jansen; content licensed under <a href="http://creativecommons.org/licenses/by/3.0/us/">cc-by</a>; example source code is public domain
				</div></div><div id="footer-right"><a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/"><img alt="Creative Commons License" style="border-width:0" src="../../images/ext/cc-by-88x31.png"/></a></div></div></div><div id="navbar" onclick="return navToggle();" onmouseover="document.getElementById('navbar').className='mouseover';" onmouseout="document.getElementById('navbar').className='';"/><div id="navcontainer"><div id="navlinks"><div id="navclosebar"><a href="#" onclick="return navClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div><div id="navpositionbar" class="navpositionbar"/><h2 id="navtitle">Servlet 2.5 Guide</h2><a id="nav_overview" class="navseclink" href="overview.xhtml#overview">Overview</a><a id="nav_intro" class="navsublink" href="overview.xhtml#intro">Intro</a><a id="nav_usecases" class="navsublink" href="overview.xhtml#usecases">When should you write a Servlet?</a><a id="nav_requirements" class="navsublink" href="overview.xhtml#requirements">What do you need for Servlets?</a><a id="nav_containers" class="navsublink" href="overview.xhtml#containers">Which container supports which Servlet / JEE version?</a><a id="nav_httpintro" class="navsublink" href="overview.xhtml#httpintro">Short HTTP Introduction</a><a id="nav_servlets" class="navseclink" href="#servlets" onclick="if (event.button == 0) return goTo('#servlets', true); else return true;">Servlets</a><a id="nav_servletintro" class="navsublink" href="#servletintro" onclick="if (event.button == 0) return goTo('#servletintro', true); else return true;">Servlet Intro</a><a id="nav_classoverview" class="navsublink" href="#classoverview" onclick="if (event.button == 0) return goTo('#classoverview', true); else return true;">Class Overview</a><a id="nav_servletclass" class="navsublink" href="#servletclass" onclick="if (event.button == 0) return goTo('#servletclass', true); else return true;">Servlet Class</a><a id="nav_servicemethods" class="navsublink" href="#servicemethods" onclick="if (event.button == 0) return goTo('#servicemethods', true); else return true;">Service Dispatching in the HttpServlet</a><a id="nav_lifecycle" class="navsublink" href="#lifecycle" onclick="if (event.button == 0) return goTo('#lifecycle', true); else return true;">The Servlet Lifecycle</a><a id="nav_multithreading" class="navsublink" href="#multithreading" onclick="if (event.button == 0) return goTo('#multithreading', true); else return true;">Multithreading</a><a id="nav_twothreadsafeways" class="navsublink" href="#twothreadsafeways" onclick="if (event.button == 0) return goTo('#twothreadsafeways', true); else return true;">Two Simple Ways to Write Thread-Safe Servlets</a><a id="nav_webapplications" class="navsublink" href="#webapplications" onclick="if (event.button == 0) return goTo('#webapplications', true); else return true;">Web Applications</a><a id="nav_webxml" class="navsublink" href="#webxml" onclick="if (event.button == 0) return goTo('#webxml', true); else return true;">web.xml</a><a id="nav_applayout" class="navsublink" href="#applayout" onclick="if (event.button == 0) return goTo('#applayout', true); else return true;">Example Application Layout</a><a id="nav_contextroot" class="navsublink" href="#contextroot" onclick="if (event.button == 0) return goTo('#contextroot', true); else return true;">Context Root</a><a id="nav_staticcontent" class="navsublink" href="#staticcontent" onclick="if (event.button == 0) return goTo('#staticcontent', true); else return true;">Static Content</a><a id="nav_eclipse" class="navsublink" href="#eclipse" onclick="if (event.button == 0) return goTo('#eclipse', true); else return true;">How to Create a Web Application with Eclipse</a><a id="nav_ant" class="navsublink" href="#ant" onclick="if (event.button == 0) return goTo('#ant', true); else return true;">How to Create a Web Application (WAR) with Ant</a><a id="nav_tomcat" class="navsublink" href="#tomcat" onclick="if (event.button == 0) return goTo('#tomcat', true); else return true;">How to Deploy a Web Application on Tomcat</a><a id="nav_responses" class="navseclink" href="responses.xhtml#responses">Responses</a><a id="nav_textoutput" class="navsublink" href="responses.xhtml#textoutput">Text Output</a><a id="nav_responsebinary" class="navsublink" href="responses.xhtml#responsebinary">Binary Output</a><a id="nav_buffering" class="navsublink" href="responses.xhtml#buffering">Buffering and Committing</a><a id="nav_errors" class="navsublink" href="responses.xhtml#errors">Error Code</a><a id="nav_redirection" class="navsublink" href="responses.xhtml#redirection">Redirection</a><a id="nav_requests" class="navseclink" href="requests.xhtml#requests">Requests</a><a id="nav_reqparameters" class="navsublink" href="requests.xhtml#reqparameters">Request Parameters</a><a id="nav_parameternames" class="navsublink" href="requests.xhtml#parameternames">How to find out which parameters have been sent</a><a id="nav_headers" class="navsublink" href="requests.xhtml#headers">How to read header values</a><a id="nav_paths" class="navsublink" href="requests.xhtml#paths">Paths</a><a id="nav_sessionsandcookies" class="navseclink" href="sessionsandcookies.xhtml#sessionsandcookies">Sessions and Cookies</a><a id="nav_cookies" class="navsublink" href="sessionsandcookies.xhtml#cookies">Cookies</a><a id="nav_sessions" class="navsublink" href="sessionsandcookies.xhtml#sessions">Sessions</a><a id="nav_distributablesessions" class="navsublink" href="sessionsandcookies.xhtml#distributablesessions">Sessions in Distributed Servers (Clusters)</a><a id="nav_sessioncaveat" class="navsublink" href="sessionsandcookies.xhtml#sessioncaveat">Be Careful When Using HttpSession</a><a id="nav_resources" class="navseclink" href="resources.xhtml#resources">Resources</a><a id="nav_resourceannotations" class="navsublink" href="resources.xhtml#resourceannotations">Resource Annotations</a><a id="nav_jndilookup" class="navsublink" href="resources.xhtml#jndilookup">How to get resources with JNDI</a><a id="nav_tomcatresources" class="navsublink" href="resources.xhtml#tomcatresources">How to Provide Resources in Tomcat</a><span class="navseclink">How to... Requests and Responses</span><a id="nav_customheaders" class="navsublink" href="customheaders.xhtml#customheaders">How to Read and Write Additional Headers</a><a id="nav_attributes" class="navsublink" href="attributes.xhtml#attributes">How to Use Attributes in Request and Context</a><a id="nav_getlastmodified" class="navsublink" href="getlastmodified.xhtml#getlastmodified">How to Use HttpServlet.getLastModified to Improve Client-Side Caching</a><a id="nav_contentlength" class="navsublink" href="contentlength.xhtml#contentlength">How to Set the Content Length</a><a id="nav_fileupload" class="navsublink" href="fileupload.xhtml#fileupload">How to Receive File Uploads (Multi-Part File Upload)</a><a id="nav_browserdetection" class="navsublink" href="browserdetection.xhtml#browserdetection">How to Detect the User's Web Browser</a><a id="nav_contentlanguage" class="navsublink" href="contentlanguage.xhtml#contentlanguage">How to Declare the Content Language</a><a id="nav_acceptedlanguages" class="navsublink" href="acceptedlanguages.xhtml#acceptedlanguages">How to Detect the Client's Preferred Languages</a><a id="nav_sendingxml" class="navsublink" href="sendingxml.xhtml#sendingxml">How to Send XML as Response</a><a id="nav_dynamicimages" class="navsublink" href="dynamicimages.xhtml#dynamicimages">How to Generate Images as Response</a><a id="nav_jspforward" class="navsublink" href="jspforward.xhtml#jspforward">How to Use a JSP as Template</a><a id="nav_requestdispatcher" class="navsublink" href="requestdispatcher.xhtml#requestdispatcher">How to Invoke Servlets and JSPs with the RequestDispatcher</a><a id="nav_virtualhosts" class="navsublink" href="virtualhosts.xhtml#virtualhosts">How to Handle Virtual Hosts and Multiple IP Addresses?</a><a id="nav_filters" class="navsublink" href="filters.xhtml#filters">How to Write Filters</a><span class="navseclink">How to... Sessions and Security</span><a id="nav_usermanagement" class="navsublink" href="usermanagement.xhtml#usermanagement">How to Authenticate and Manage Users</a><a id="nav_declarativesecurity" class="navsublink" href="declarativesecurity.xhtml#declarativesecurity">How to Restrict Access to a Web Application (Declarative Security)</a><a id="nav_requiringssl" class="navsublink" href="requiringssl.xhtml#requiringssl">How to Require HTTPS / SSL</a><a id="nav_programmaticsecurity" class="navsublink" href="programmaticsecurity.xhtml#programmaticsecurity">How to Use Authentication Data in Servlets</a><a id="nav_cookielessessions" class="navsublink" href="cookielessessions.xhtml#cookielessessions">How to Use HttpSessions and Authentication without Cookies?</a><span class="navseclink">How to... General</span><a id="nav_addinglibraries" class="navsublink" href="addinglibraries.xhtml#addinglibraries">How to Add Libraries to a Web Application / WAR</a><a id="nav_addingresourcefiles" class="navsublink" href="addingresourcefiles.xhtml#addingresourcefiles">How to Read Files Contained in a Web Application / WAR</a><a id="nav_throwingexceptions" class="navsublink" href="throwingexceptions.xhtml#throwingexceptions">How to Throw Exceptions in Servlets</a><a id="nav_initparameters" class="navsublink" href="initparameters.xhtml#initparameters">Configure your Servlet with Initialization Parameters</a><a id="nav_logging" class="navsublink" href="logging.xhtml#logging">How to Log</a><a id="nav_errorpages" class="navsublink" href="errorpages.xhtml#errorpages">How to Replace the Default Error Page</a><a id="nav_temporarydirectory" class="navsublink" href="temporarydirectory.xhtml#temporarydirectory">How to Get a Temporary Directory</a><a id="nav_ejbinvocation" class="navsublink" href="ejbinvocation.xhtml#ejbinvocation">How to Access an EJB</a><a id="nav_distributedapps" class="navsublink" href="distributedapps.xhtml#distributedapps">How to Create a Distributed Application</a><a id="nav_listeners" class="navsublink" href="listeners.xhtml#listeners">How to Be Notified about Events (Listeners)</a><a id="nav_servlet24" class="navsublink" href="servlet24.xhtml#servlet24">New Features Since Servlet API 2.4</a><a id="nav_andnow" class="navseclink" href="andnow.xhtml#andnow">And now...?</a><a id="nav_nextsteps" class="navsublink" href="andnow.xhtml#nextsteps">Next Steps</a></div></div><div id="popups"><div id="pp-d22757e2151" class="tooltip">To write a servlet, just create a class that <em>extends from <span class="idf">HttpServlet</span></em>, and provide a <em>constructor without arguments</em>. You do not need to override any of the <span class="idf">HttpServlet</span> methods.<br/> Beside the initialization and destruction methods <span class="idf">init</span> and <span class="idf">destroy</span>, the <span class="idf">HttpServlet</span> provides overridable methods for each HTTP command, like <span class="idf">doGet</span>, <span class="idf">doPost</span>, <span class="idf">doHead</span>....</div><div id="pp-d22757e2230" class="tooltip">A <em>constructor without arguments is required</em> for every <span class="idf">Servlet</span> class. You should <em>avoid putting code here</em>. Costly operations, such as retrieving connections via JNDI, should be done in the <em><span class="idf">init</span> method</em>, which will always be invoked before the servlet handles its first request.<br/> Usually it is up to the web container to decide when to initialize a servlet. Either the servlet is initialized when the application is started, or when the first request needs to be handled. You can enforce the former behaviour using the <span class="idf">&lt;load-on-startup&gt;</span> element in the <span class="idf">web.xml</span> deployment descriptor.</div><div id="pp-d22757e2277" class="tooltip">The <span class="idf">init</span> method will be invoked by the web container before the servlet gets the first request. All <em>costly initialization should be done here</em>. Also, the <span class="idf">ServletConfig</span> will be passed here and can be used to configure the servlet.<br/> Usually it is up to the web container to decide when to initialize a servlet. Either the servlet is initialized when the application is started, or when the first request needs to be handled. You can enforce the former behaviour using the <span class="idf">&lt;load-on-startup&gt;</span> element in the <span class="idf">web.xml</span> deployment descriptor.</div><div id="pp-d22757e2406" class="tooltip">When the server does not need the servlet anymore, it calls <span class="idf">destroy</span>. All <em>resources should be released here</em>.<br/> There are two reasons for the server to call <span class="idf">destroy</span>. Either the web application is being shut down, or the server decides that the servlet has not been needed for a while and it should be removed in order to conserve resources.<br/> After calling <span class="idf">destroy</span>, the container will not use the servlet anymore. If it needs the servlet to handle a request, it will create a new instance and initialize it again.</div><div id="pp-d22757e2593" class="tooltip">You can, of course, also use the usual synchronization techniques to write a thread-safe servlet. But explaining them is far outside of the scope of this page.</div><div id="pp-d22757e2624" class="tooltip">Yes, that's true! At least if you follow the Java specification by the word. Because thread synchronization is not only needed to avoid concurrent access, but also to synchronize the thread's local memory (read: the CPU core's cache) with the main memory.<br/> However, on today's machines, not synchronizing the constructor won't hurt. This may change though in the future, when caches are not cache coherent anymore.</div><div id="pp-d22757e2703" class="tooltip">The goal of these rules is to prevent the sharing of data between threads, which would require synchronization.</div><div id="pp-d22757e2897" class="tooltip">Any file that you put into a JAR will be served by the web container. The only exceptions are files in the special '/WEB-INF' and '/META-INF' directories.<br/> Depending on the extension, some files will be served as static content, and some files (like JSPs) will be handled in a special way. The files are reachable under the same path as in the JAR, within the application's context. For example, if your web-application's context URL is 'http://myserver/myapp' and you have a file 'a/b/c.html' in the WAR, its URL is 'http://myserver/myapp/a/b/c.html'.</div><div id="pp-d22757e2938" class="tooltip">As a WAR is technically a JAR, it supports many JAR features. You could, for example, put JAR's <span class="idf">MANIFEST.MF</span> descriptor there. Some containers also define <span class="idf">META-INF</span> as location for non-standard configuration files. Beside those vendor extensions, <span class="idf">META-INF</span> is not important for most WARs. You only need to know that files in '/META-INF' will not be served as static files.</div><div id="pp-d22757e2980" class="tooltip">As said above, a WAR is just a JAR with a special file layout and the file extension ".war". So if you do not have a IDE or build tool that helps you to assemble the web application, you can always resort to the good old "jar" command line tool. Just write "jar cvf <span class="idf">myapp.war</span> <span class="idf">path/to/dir</span>".</div><div id="pp-d22757e3057" class="tooltip">The servlet mapping defines for which path the server will invoke the servlet.<br/> This is is the path under which it is reachable by web browsers, minus the context root which must be declared by you in the web container.<br/>For example, if your server is at www.example.org, you define a context root 'timeapp', and the <span class="idf">&lt;url-pattern&gt;</span> is '/now', then you can reach the servlet under 'http://www.example.org/timeapp/now'.</div><div id="pp-d22757e3192" class="tooltip">Setting your application's context root is <em>container-specific</em>. Containers that allow you to deploy by copying a WAR into a deployment directory usually take <em>the WAR's file name without extension as context root</em> (thus a WAR called 'myapp.war' gets '/myapp' as context root). Depending on the specific container, you can either set an application's context root in a GUI, declare it in the container's configuration file, or you can declare it in the WAR itself by putting a container-specific configuration file into the '/WEB-INF/' directory.</div><div id="pp-d22757e3230" class="tooltip">For example, if you have a file "/images/ball.png" in your WAR and your application is located at "http://server/myapp/", you can reach it under "http://server/myapp/images/ball.png".</div><div id="pp-d22757e3291" class="tooltip">For example, if you define "index.html" as welcome file and a user requests the directory "/test/", the server returns the content of the file "/test/index.html".</div><div id="pp-d22757e3370" class="tooltip">You need to configure your server in <span class="idf">Preferences/Server/Runtime Environments</span>. Then you can add your project to the server, and start/stop/debug the server. Eclipse will do everything else for you. It can even automatically re-deploy when you change anything in your project.<br/> Eclipse ships with support for Tomcat, JBoss and a few others. Plugins for many other servers are available on the web.<br/> You can <em>edit the context root</em> in the project's properties / Web Project Settings. So for a server running on port 8080 and a context root 'MyApp', find your application at http://localhost:8080/MyApp/. </div><div id="pp-d22757e2012" class="tooltip"><span class="idf">web.xml</span> is the <em>deployment descriptor for web applications</em>. It is always located at the path <em>/WEB-INF/web.xml</em> in the application's directory structure. Usually the whole web application is stored in a WAR file (a special kind of JAR archive) for deployment in the web container.</div><div id="pp-d22757e2029" class="tooltip">A URL Pattern defines which URLs the servlet responds to. You can either define a path, a partial path or a file extension.</div><div id="pp-d22757e2039" class="tooltip">A WAR file is a <em>special kind of JAR archive</em> that contains all classes of a web application as well as static files and JSPs. The content of the WAR is described in the deployment descriptor at /WEB-INF/web.xml.</div><div id="pp-d22757e288" class="tooltip">Declares the version of the Servlet Specification the descriptor uses, e.g. "2.4", "2.5" or "3.0". Newer versions are backward compatible, so "2.2" will work in 3.0 containers as well. Required.</div><div id="pp-d22757e312" class="tooltip">Defines the URLs that the servlet will invoked for. A complete path, or "/path/*", "*.extension" or "/". Repeat to define several alternative patterns. Required, more than one allowed.</div><div id="pp-d22757e314" class="tooltip"><span class="idf">web-app</span> is the root element for all web.xml deployment descriptors. Its <span class="idf">version</span> attribute is required for declaring the Servlet Specification version.</div><div id="pp-d22757e321" class="tooltip">The namespace of all standard web.xml elements is "http://java.sun.com/xml/ns/j2ee".</div><div id="pp-d22757e323" class="tooltip">Declares the XML Schema namespace with the prefix "xsi". Only needed for <span class="idf">schemaLocation</span>.</div><div id="pp-d22757e328" class="tooltip">Declares the location of the XML Schema, so editors and other XML processors can find it. Optional (but recommended). The attribute is not directly part of the Servlet Specification, but comes from the XML Schema Specification.</div><div id="pp-d22757e420" class="tooltip">Declares a servlet, either in the form of a class implementing the <span class="idf">Servlet</span> interface or as a JSP page. The URL mapping must be declared in one or more <span class="idf">&lt;servlet-mapping&gt;</span> elements. Optional, more than one allowed.</div><div id="pp-d22757e431" class="tooltip">The name of the servlet. Must be unique in the descriptor, and will be referenced by <span class="idf">&lt;servlet-mapping&gt;</span> elements. Required.</div><div id="pp-d22757e436" class="tooltip">The name of the class that implements the <span class="idf">Servlet</span> interface. Required if <span class="idf">&lt;jsp-file&gt;</span> is not present.</div><div id="pp-d22757e478" class="tooltip">Defines the URL or a pattern for those URLs that the servlet responds to. Optional, more than one allowed.</div><div id="pp-d22757e481" class="tooltip">The name of the servlet that is mapped. Must correspond to a <span class="idf">&lt;servlet&gt;</span>/<span class="idf">&lt;servlet-name&gt;</span> element. Required.</div><div id="pp-d22757e493" class="tooltip">Defines the MIME type (content type) of a file extension, for use with static files that are contained in the WAR file. Optional, more than one allowed.</div><div id="pp-d22757e495" class="tooltip">The file extension, for example "html" or "jpg". Required.</div><div id="pp-d22757e497" class="tooltip">The content type, for example "text/html" or "image/jpeg". Required.</div><div id="pp-d22757e499" class="tooltip">An ordered list of file names to show for requests that go to a directory (possibly the root directory). The first file that exists will be shown. Optional.</div><div id="pp-d22757e501" class="tooltip">Specifies a single file name, e.g. "index.html" or "index.jsp". Required, more than one allowed.</div><div id="pp-d22757e144" class="topic"><div class="topicPara"><span class="topicHead">JSP</span><span class="topicAbbreviation"> - JavaServer Pages</span></div><div class="topicPara">JSPs are a template system for generating dynamic web pages. It is tightly integrated with
  		Java and allows mixing Java source code with markup code.</div><div class="topicPara"><span class="topicLinkHead">Homepage: </span><a href="http://java.sun.com/products/jsp/">JavaServer Pages Technology (Sun/Oracle)</a><br/><span class="topicLinkHead">Wikipedia: </span><a href="http://en.wikipedia.org/wiki/JavaServer_Pages">JavaServer Pages</a></div><div class="topicPara"><span class="topicLinkHead">Specification: </span><a href="http://jcp.org/aboutJava/communityprocess/mrel/jsr245/index.html">JSP 2.2</a><br/><span class="topicLinkHead">JSR: </span><a href="http://jcp.org/en/jsr/detail?id=53">JSR-53</a>, <a href="http://jcp.org/en/jsr/detail?id=152">JSR-152</a>, <a href="http://jcp.org/en/jsr/detail?id=245">JSR-245</a></div></div><div id="pp-d22757e184" class="topic"><div class="topicPara"><span class="topicHead">JAR</span><span class="topicAbbreviation"> - Java ARchive</span></div><div class="topicPara">JARs are ZIP files with a <span class="idf">.jar</span> extension and a special directory structure. Java uses them to store Java 
  		applications and libraries.</div><div class="topicPara"><span class="topicLinkHead">Jarfiller Guide: </span><a href="/javabasics/jar/">Java Basics: JAR Files</a></div><div class="topicPara"><span class="topicLinkHead">Wikipedia: </span><a href="http://en.wikipedia.org/wiki/JAR_(file_format)">JAR (file format)</a></div><div class="topicPara"><span class="topicLinkHead">Specification: </span><a href="http://java.sun.com/j2se/1.5.0/docs/guide/jar/jar.html">JAR Specification</a></div></div><div id="ttCloseBar" class="closeBar"><a href="#" onclick="return tlClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div><div id="topicCloseBar" class="closeBar"><a href="#" onclick="return tpcClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div></div></body></html>