<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/1999/xhtml" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:page="http://tjansen.de/refPage" xmlns:i="http://tjansen.de/internal"><head><title>JAXB Guide</title><meta http-equiv="X-UA-Compatible" content="chrome=1"/><meta http-equiv="content-language" content="en"/><link rel="shortcut icon" href="../../images/favicon.png" type="image/png"/><link rel="stylesheet" type="text/css" href="../../style/style.css"/><script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-6791190-2']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
})();
</script><script type="text/javascript" src="../../js/all.js"/></head><body id="body"><div id="visibleContent"><div id="top"><a href="/"><img src="../../images/titlebar.png" alt="Jarfiller.com"/></a></div><div id="titleArea"><h1>JAXB Guide</h1><p id="titleIntro">Read, modify and write XML documents with JAXB 2.1 or 2.2</p></div><div id="main"><div id="bodycolumn"><div id="options">Options: <a href="#" onclick="return navToggle();">Table of Content</a>, <a href="jaxboverview.xhtml">Multi-Page Version</a></div><h2 id="sec_jaxboverview" class="sectionHead"><a name="jaxboverview">Overview</a></h2><div class="sectionExpandAll">
			(<a href="#" onclick="&#xA;return showAll([['colla_usecases','sec_usecases'],['colla_requirements','sec_requirements'], null]); &#xA;">expand everything</a>)
		</div><div class="subSecRow1" id="sec_intro"><div class="subSecHead" id="sechd_intro"><a class="multipageHeadLink" href="jaxboverview.xhtml#intro" name="intro">Intro</a></div><div class="subSecContent" id="seccnt_intro"><p class="subSecExplanation">JAXB allows you to <em>access XML documents like regular Java classes</em>. It only works for documents that follow a <em>fixed structure</em> that can be described by a schema, a DTD or by a tree of Java classes.<br/> The easiest way to use JAXB is with a <a href="#" id="tl-d2e322" class="dottedTooltip" onclick="return tpcClick('tl-d2e322','pp-d2e20');" onmouseover="return tpcOver('tl-d2e322','pp-d2e20');" onmouseout="return tpcOut('tl-d2e322','pp-d2e20');">XML Schema</a> (XSD file). You can then just <em>compile the schema</em> using <a href="#" id="tl-d2e329" class="dottedTooltip" onclick="return tlClick('tl-d2e329','pp-d2e332');" onmouseover="return tlOver('tl-d2e329','pp-d2e332');" onmouseout="return tlOut('tl-d2e329','pp-d2e332');">xjc</a>. <span class="idf">xjc</span> generates <em>annotated Java classes</em> that you use to read and write the XML. Alternatively, you write your data structures as Java classes yourself and <em>use annotations</em> to map them onto the XML structure. An <em>XML schema is not needed</em> for this approach, but you can generate one from your code using the <a href="#" id="tl-d2e355" class="dottedTooltip" onclick="return tlClick('tl-d2e355','pp-d2e358');" onmouseover="return tlOver('tl-d2e355','pp-d2e358');" onmouseout="return tlOut('tl-d2e355','pp-d2e358');">schemagen</a> tool. <br/> Once you have the annotated classes, JAXB can read XML documents and create object trees that represents them (this is called <em>unmarshalling</em>) and write them back into an XML document (<em>marshalling</em>). The object tree itself can be created, read and modified like any other Java object. </p></div></div><div id="colla_usecases" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="jaxboverview.xhtml#usecases" name="usecases">Use Cases</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('usecases');">When should JAXB be used?</a></div></div></div><div class="subSecRow2" id="sec_usecases" style="display: none"><div class="subSecHead" id="sechd_usecases"><a class="multipageHeadLink" href="jaxboverview.xhtml#usecases" name="usecases">Use Cases</a></div><div class="subSecContent" id="seccnt_usecases"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('usecases');">When should JAXB be used?</a></div><p class="subSecExplanation">Use JAXB when..</p><ul class="subSecList"><li>you want to easily read or write XML documents with a <em>specific schema</em></li><li>the documents are mainly structured data, <em>not markup text</em> (e.g. no XHTML or DocBook)</li><li>throughput and performance is not your primary concern</li></ul><h4 class="subSecMiniHeadline">Alternatives</h4><ul class="subSecList"><li><a href="http://en.wikipedia.org/wiki/Document_Object_Model">DOM</a> provides a flexible object model that allows you to read and write any XML document. However, if your document has a known schema, using JAXB will be easier and less error-prone than the generic DOM model.</li><li><a href="http://en.wikipedia.org/wiki/StAX">StAX</a> is a low-level pull API for reading any XML. It is fast and flexible, but also complicated to use and parsing a specific schema is hard to get right.</li><li><a href="http://en.wikipedia.org/wiki/Simple_API_for_XML">SaX</a> is a very old push XML API. Is is quite fast, but very difficult to use correctly. Avoid if possible.</li><li>There are several XML APIs that are not part of any Java Edition. None of them is in wide-spread use anymore, even though they may have advantages over Java's APIs.</li></ul></div></div><div id="colla_requirements" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="jaxboverview.xhtml#requirements" name="requirements">Requirements</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('requirements');">What do you need for JAXB?</a></div></div></div><div class="subSecRow1" id="sec_requirements" style="display: none"><div class="subSecHead" id="sechd_requirements"><a class="multipageHeadLink" href="jaxboverview.xhtml#requirements" name="requirements">Requirements</a></div><div class="subSecContent" id="seccnt_requirements"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('requirements');">What do you need for JAXB?</a></div><p class="subSecExplanation">For JAXB 2.x...</p><ul class="subSecList"><li><em>Java SE 6</em> (or higher) <em>ships</em> with JAXB 2.x</li><li><em>Java EE 5</em> (or higher) <em>ships</em> with JAXB 2.x</li><li>JAXB for Java SE 5 can be downloaded <a href="http://jaxb.dev.java.net/">here</a></li><li>JAXB 2.x can not be used for versions &lt; Java 5</li></ul></div></div><h2 id="sec_mappingclasses" class="sectionHead"><a name="mappingclasses">Mapping Classes</a></h2><div class="subSecRow2" id="sec_schemafirst"><div class="subSecHead" id="sechd_schemafirst"><a class="multipageHeadLink" href="mappingclasses.xhtml#schemafirst" name="schemafirst">Schema first?</a></div><div class="subSecContent" id="seccnt_schemafirst"><p class="subSecExplanation"> In case you don't already have a schema, you need to ask yourself whether you want to <em>write the XML Schema first</em> and generate classes for it using <a href="#" id="tl-d2e494" class="dottedTooltip" onclick="return tlClick('tl-d2e494','pp-d2e332');" onmouseover="return tlOver('tl-d2e494','pp-d2e332');" onmouseout="return tlOut('tl-d2e494','pp-d2e332');">xjc</a>, or whether you want to <em>write the Java classes with JAXB annotations</em>, and optionally generate the XML Schema later using <a href="#" id="tl-d2e499" class="dottedTooltip" onclick="return tlClick('tl-d2e499','pp-d2e358');" onmouseover="return tlOver('tl-d2e499','pp-d2e358');" onmouseout="return tlOut('tl-d2e499','pp-d2e358');">schemagen</a>.</p><ul class="subSecList"><li>If you just want to serialize some data in XML, and don't really care too much what the XML looks like, write the definitions in Java. It's usually more convenient and the resulting Java classes are simpler and easier to use. This is called <em>bottom-up design</em>.</li><li>If you care about the XML Schema (e.g. you want to publish it), write the Schema first and use <span class="idf">xjc</span>. This makes it a lot easier to have a good XML schema. This is called <em>top-down design</em></li></ul></div></div><div class="subSecRow1" id="sec_xjc"><div class="subSecHead" id="sechd_xjc"><a class="multipageHeadLink" href="mappingclasses.xhtml#xjc" name="xjc">xjc</a></div><div class="subSecContent" id="seccnt_xjc"><p class="subSecExplanation"> If you have a schema, you can use <a href="#" id="tl-d2e527" class="dottedTooltip" onclick="return tlClick('tl-d2e527','pp-d2e332');" onmouseover="return tlOver('tl-d2e527','pp-d2e332');" onmouseout="return tlOut('tl-d2e527','pp-d2e332');">xjc</a> on the command line to get the classes that you need. <span class="idf">xjc</span> is included with both JDK6 and the JAXB reference implementation. Usage:</p><pre class="subSecConsole">&gt; xjc -d <a href="#" id="tl-d2e535" class="dottedTooltip" onclick="return tlClick('tl-d2e535','pp-d2e539');" onmouseover="return tlOver('tl-d2e535','pp-d2e539');" onmouseout="return tlOut('tl-d2e535','pp-d2e539');">target-directory</a> -p <a href="#" id="tl-d2e542" class="dottedTooltip" onclick="return tlClick('tl-d2e542','pp-d2e546');" onmouseover="return tlOver('tl-d2e542','pp-d2e546');" onmouseout="return tlOut('tl-d2e542','pp-d2e546');">your.package.name</a> <a href="#" id="tl-d2e555" class="dottedTooltip" onclick="return tlClick('tl-d2e555','pp-d2e559');" onmouseover="return tlOver('tl-d2e555','pp-d2e559');" onmouseout="return tlOut('tl-d2e555','pp-d2e559');">path-to-schema</a></pre></div></div><div class="subSecRow2" id="sec_propertybased"><div class="subSecHead" id="sechd_propertybased"><a class="multipageHeadLink" href="mappingclasses.xhtml#propertybased" name="propertybased">Property-based Beans</a><br/>(<a href="#" id="tl-d2e563" class="dottedTooltip" onclick="return tlClick('tl-d2e563','pp-d2e568');" onmouseover="return tlOver('tl-d2e563','pp-d2e568');" onmouseout="return tlOut('tl-d2e563','pp-d2e568');">more</a>)
		</div><div class="subSecContent" id="seccnt_propertybased"><pre class="subSecCode"><code>package com.jarfiller.example;
import java.util.*;
import <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlRootElement.html" class="javadoc">javax.xml.bind.annotation.XmlRootElement</a>;

<em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlRootElement.html" class="javadoc">@XmlRootElement</a></em>
public class MovieLibrary {                      <span class="cmt">// root element</span>
  private List&lt;Movie&gt; collection;

  public MovieLibrary() {                        <span class="cmt">// <em>no-arg constructor required</em> (<a href="#" id="tl-d2e614" class="dottedTooltip" onclick="return tlClick('tl-d2e614','pp-d2e614');" onmouseover="return tlOver('tl-d2e614','pp-d2e614');" onmouseout="return tlOut('tl-d2e614','pp-d2e614');">more</a>)</span>
  }

  public MovieLibrary(List&lt;Movie&gt; collection) {  <span class="cmt">// convenience constructor</span>
    this.collection = collection;
  }

  public void setCollection(List&lt;Movie&gt; collection) {
    this.collection = collection;
  }
  public List&lt;Movie&gt; getCollection() {
    return collection;
  }
}

public class Movie {                             <span class="cmt">// normal element - <em>annotations are optional</em></span>
  private String title;
  private int releaseYear;

  public Movie() {                               <span class="cmt">// <em>no-arg constructor required</em> (<a href="#" id="tl-d2e685" class="dottedTooltip" onclick="return tlClick('tl-d2e685','pp-d2e614');" onmouseover="return tlOver('tl-d2e685','pp-d2e614');" onmouseout="return tlOut('tl-d2e685','pp-d2e614');">more</a>)</span>
  }

  public Movie(String title, int releaseYear) {
    this.title = title;
    this.releaseYear = releaseYear;
  }

  public String getTitle() {
    return title;
  }
  public void setTitle(String title) {
    this.title = title;
  }

  public int getReleaseYear() {
    return releaseYear;
  }
  public void setReleaseYear(int releaseYear) {
    this.releaseYear = releaseYear;
  }
}
</code></pre></div></div><div class="subSecRow1" id="sec_fieldbased"><div class="subSecHead" id="sechd_fieldbased"><a class="multipageHeadLink" href="mappingclasses.xhtml#fieldbased" name="fieldbased">Field-based beans</a><br/>(<a href="#" id="tl-d2e753" class="dottedTooltip" onclick="return tlClick('tl-d2e753','pp-d2e758');" onmouseover="return tlOver('tl-d2e753','pp-d2e758');" onmouseout="return tlOut('tl-d2e753','pp-d2e758');">more</a>)
		</div><div class="subSecContent" id="seccnt_fieldbased"><p class="subSecExplanation">Shorter alternative: just <em>use public fields</em>. The following classes would create exactly the same XML as the property-based bean above:</p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlRootElement.html" class="javadoc">@XmlRootElement</a>
public class MovieLibrary {
  public List&lt;Movie&gt; collection;
}

public class Movie {
  public String title;
  public int releaseYear;
}
</code></pre></div></div><div class="subSecRow2" id="sec_exampleschema"><div class="subSecHead" id="sechd_exampleschema"><a class="multipageHeadLink" href="mappingclasses.xhtml#exampleschema" name="exampleschema">XML Schema</a></div><div class="subSecContent" id="seccnt_exampleschema"><p class="subSecExplanation">This is the <a href="#" id="tl-d2e812" class="dottedTooltip" onclick="return tpcClick('tl-d2e812','pp-d2e20');" onmouseover="return tpcOver('tl-d2e812','pp-d2e20');" onmouseout="return tpcOut('tl-d2e812','pp-d2e20');">XML Schema</a> that the <em><a href="#" id="tl-d2e816" class="dottedTooltip" onclick="return tlClick('tl-d2e816','pp-d2e358');" onmouseover="return tlOver('tl-d2e816','pp-d2e358');" onmouseout="return tlOut('tl-d2e816','pp-d2e358');">schemagen</a> tool will create</em>, given the <span class="idf">MovieLibrary</span> class:</p><pre class="subSecCode"><code>&lt;xs:schema version="1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;

  &lt;xs:complexType name="movieLibrary"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="collection" type="movie" nillable="true"
                     minOccurs="0" maxOccurs="unbounded"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;

  &lt;xs:complexType name="movie"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="title" type="xs:string" minOccurs="0"/&gt;
      &lt;xs:element name="releaseYear" type="xs:int"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:schema&gt;
</code></pre><p class="subSecExplanation">Be careful with <span class="idf">schemagen</span>-generated schemas though: as in this example, they do not declare a top-level element. You may need to add it yourself:</p><pre class="subSecCode"><code>&lt;xs:element name="movieLibrary" type="movieLibrary"/&gt;
</code></pre></div></div><h2 id="sec_readingandwriting" class="sectionHead"><a name="readingandwriting">Reading and Writing XML</a></h2><div class="subSecRow1" id="sec_writingxml"><div class="subSecHead" id="sechd_writingxml"><a class="multipageHeadLink" href="readingandwriting.xhtml#writingxml" name="writingxml">Writing XML</a><br/>(<a href="#" id="tl-d2e893" class="dottedTooltip" onclick="return tlClick('tl-d2e893','pp-d2e898');" onmouseover="return tlOver('tl-d2e893','pp-d2e898');" onmouseout="return tlOut('tl-d2e893','pp-d2e898');">more</a>)
		</div><div class="subSecContent" id="seccnt_writingxml"><pre class="subSecCode"><code>List&lt;Movie&gt; movies = new java.util.ArrayList&lt;Movie&gt;();
movies.add(new Movie("Casablanca", 1942));
movies.add(new Movie("Dr Zhivago", 1965));
movies.add(new Movie("Out of Africa", 1985));
MovieLibrary library = new MovieLibrary(movies);

<em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXB.html#marshal(java.lang.Object, java.io.File)" class="javadoc">JAXB.marshal</a></em>(library, new File("/tmp/library.xml"));  <span class="cmt">// write XML (<a href="#" id="tl-d2e939" class="dottedTooltip" onclick="return tlClick('tl-d2e939','pp-d2e939');" onmouseover="return tlOver('tl-d2e939','pp-d2e939');" onmouseout="return tlOut('tl-d2e939','pp-d2e939');">more</a>)</span>

</code></pre></div></div><div class="subSecRow2" id="sec_writingxmlresult"><div class="subSecHead" id="sechd_writingxmlresult"><a class="multipageHeadLink" href="readingandwriting.xhtml#writingxmlresult" name="writingxmlresult">Result</a></div><div class="subSecContent" id="seccnt_writingxmlresult"><p class="subSecExplanation">Result of the previous code snippet:</p><pre class="subSecCode"><code>&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;movieLibrary&gt;
    &lt;collection&gt;
        &lt;name&gt;Casablanca&lt;/name&gt;
        &lt;releaseYear&gt;1942&lt;/releaseYear&gt;
    &lt;/collection&gt;
    &lt;collection&gt;
        &lt;name&gt;Dr Zhivago&lt;/name&gt;
        &lt;releaseYear&gt;1965&lt;/releaseYear&gt;
    &lt;/collection&gt;
    &lt;collection&gt;
        &lt;name&gt;Out of Africa&lt;/name&gt;
        &lt;releaseYear&gt;1985&lt;/releaseYear&gt;
    &lt;/collection&gt;
&lt;/movieLibrary&gt;
</code></pre></div></div><div class="subSecRow1" id="sec_readingxml"><div class="subSecHead" id="sechd_readingxml"><a class="multipageHeadLink" href="readingandwriting.xhtml#readingxml" name="readingxml">Reading XML</a><br/>(<a href="#" id="tl-d2e1008" class="dottedTooltip" onclick="return tlClick('tl-d2e1008','pp-d2e1013');" onmouseover="return tlOver('tl-d2e1008','pp-d2e1013');" onmouseout="return tlOut('tl-d2e1008','pp-d2e1013');">more</a>)
		</div><div class="subSecContent" id="seccnt_readingxml"><pre class="subSecCode"><code>MovieLibrary library = <em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXB.html#unmarshal(java.io.File, java.lang.Class)" class="javadoc">JAXB.unmarshal</a></em>(new File("/tmp/library.xml"), 
                               MovieLibrary.class);  <span class="cmt">// read XML (<a href="#" id="tl-d2e1040" class="dottedTooltip" onclick="return tlClick('tl-d2e1040','pp-d2e1040');" onmouseover="return tlOver('tl-d2e1040','pp-d2e1040');" onmouseout="return tlOut('tl-d2e1040','pp-d2e1040');">more</a>)</span>

assert library.getCollection().size() == 3;
assert library.getCollection().get(0).getTitle().equals("Casablanca");
assert library.getCollection().get(2).getReleaseYear() == 1985;
</code></pre></div></div><div class="subSecRow2" id="sec_supportedtypes"><div class="subSecHead" id="sechd_supportedtypes"><a class="multipageHeadLink" href="readingandwriting.xhtml#supportedtypes" name="supportedtypes">Supported Types</a><br/>(<a href="#" id="tl-d2e1060" class="dottedTooltip" onclick="return tlClick('tl-d2e1060','pp-d2e1065');" onmouseover="return tlOver('tl-d2e1060','pp-d2e1065');" onmouseout="return tlOut('tl-d2e1060','pp-d2e1065');">more</a>)
		</div><div class="subSecContent" id="seccnt_supportedtypes"><p class="subSecExplanation">Beside beans, JAXB supports the following types natively. Each of them can also be used either as element content or for XML attributes:</p><div class="subSecTableDiv"><table><tr><th>Java type</th><th>XML Simple Schema type</th></tr><tr><td><span class="idf">java.lang.String</span></td><td>xs:string</td></tr><tr><td><span class="idf">int</span></td><td>xs:int</td></tr><tr><td><span class="idf">long</span></td><td>xs:long</td></tr><tr><td><span class="idf">boolean</span></td><td>xs:boolean</td></tr><tr><td><span class="idf">byte</span></td><td>xs:byte</td></tr><tr><td><span class="idf">short</span></td><td>xs:short</td></tr><tr><td><span class="idf">float</span></td><td>xs:float</td></tr><tr><td><span class="idf">double</span></td><td>xs:double</td></tr><tr><td><span class="idf">byte[]</span></td><td>xs:base64Binary</td></tr><tr><td><span class="idf">java.math.BigInteger</span></td><td>xs:integer</td></tr><tr><td><span class="idf">java.math.BigDecimal</span></td><td>xs:decimal</td></tr><tr><td><span class="idf">java.util.Date</span></td><td>xs:dateTime</td></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/javax/xml/namespace/QName.html" class="javadoc">javax.xml.namespace.QName</a></td><td>xs:QName</td></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/javax/xml/datatype/Duration.html" class="javadoc">javax.xml.datatype.Duration</a></td><td>xs:duration</td></tr></table></div><p class="subSecExplanation"> Collections are also supported by JAXB and can be used as element content:</p><div class="subSecTableDiv"><table><tr><th>Java type</th><th>XML Mapping</th></tr><tr><td>Arrays, single dimension</td><td>Repeats the element several times, sets <span class="idf">maxOccurs</span> in the schema to <span class="idf">unbounded</span> (except <span class="idf">byte[]</span>, see above).</td></tr><tr><td>Arrays, multi dimension</td><td>For the first dimension, the item is repeated (<span class="idf">maxOccurs</span> in the schema set to <span class="idf">unbounded</span>). For additional dimensions, there is a repeating element <span class="idf">item</span> defined that will be nested.</td></tr><tr><td><span class="idf">java.util.Collection</span> (includes <span class="idf">List</span> and <span class="idf">Set</span>)</td><td>Repeats the element several times, sets <span class="idf">maxOccurs</span> in the schema to <span class="idf">unbounded</span> (like one-dimensional arrays).</td></tr><tr><td><span class="idf">java.util.Map</span></td><td>The element contains an <span class="idf">entry</span> element for each Map entry (<span class="idf">maxOccurs</span> in the schema set to <span class="idf">unbounded</span>), each <span class="idf">entry</span> containing a <span class="idf">key</span> and a <span class="idf">value</span> element.</td></tr></table></div></div></div><h2 id="sec_howtomapping" class="sectionHead"><a name="howtomapping">How to... Mapping</a></h2><div class="sectionExpandAll">
			(<a href="#" onclick="&#xA;return showAll([['colla_namespaces','sec_namespaces'],['colla_attributes','sec_attributes'],['colla_requiredelements','sec_requiredelements'],['colla_elementnames','sec_elementnames'],['colla_preventingserialization','sec_preventingserialization'],['colla_propertyorder','sec_propertyorder'],['colla_choice','sec_choice'],['colla_simpletypes','sec_simpletypes'],['colla_xmladapter','sec_xmladapter'],['colla_jaxbelement','sec_jaxbelement'], null]); &#xA;">expand everything</a>)
		</div><div id="colla_namespaces" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="namespaces.xhtml#namespaces" name="namespaces">Namespaces</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('namespaces');">How to Use XML Namespaces</a></div></div></div><div class="subSecRow1" id="sec_namespaces" style="display: none"><div class="subSecHead" id="sechd_namespaces"><a class="multipageHeadLink" href="namespaces.xhtml#namespaces" name="namespaces">Namespaces</a></div><div class="subSecContent" id="seccnt_namespaces"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('namespaces');">How to Use XML Namespaces</a></div><p class="subSecExplanation">To declare an XML namespace at the Java package level, create a file called <span class="idf">package-info.java</span> in the package's directory and declare the namespace using the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlSchema.html" class="javadoc">@XmlSchema</a> annotation like this (no <span class="idf">class</span> declaration needed):</p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/javax.xml.bind.annotation.XmlSchema.html" class="javadoc">@javax.xml.bind.annotation.XmlSchema</a>(<em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlSchema.html#namespace()" class="javadoc">namespace</a>="http://example.jarfiller.com"</em>)
package com.jarfiller.example;
</code></pre><p class="subSecExplanation">Alternatively, you can also declare the schema separately for each class as well as for the XML root element: </p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlRootElement.html" class="javadoc">@XmlRootElement</a>(<em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlRootElement.html#namespace()" class="javadoc">namespace</a>="http://example.jarfiller.com"</em>)
<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlType.html" class="javadoc">@XmlType</a>(<em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlType.html#namespace()" class="javadoc">namespace</a>="http://example.jarfiller.com"</em>)
public class MovieLibrary {
  public List&lt;Movie&gt; collection;
}

<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlType.html" class="javadoc">@XmlType</a>(<em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlType.html#namespace()" class="javadoc">namespace</a>="http://example.jarfiller.com"</em>)
public class Movie {
    public String title;
    public int releaseYear;
}
</code></pre></div></div><div id="colla_attributes" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="attributes.xhtml#attributes" name="attributes">Attributes</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('attributes');">How to Declare XML Attributes</a></div></div></div><div class="subSecRow2" id="sec_attributes" style="display: none"><div class="subSecHead" id="sechd_attributes"><a class="multipageHeadLink" href="attributes.xhtml#attributes" name="attributes">Attributes</a></div><div class="subSecContent" id="seccnt_attributes"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('attributes');">How to Declare XML Attributes</a></div><p class="subSecExplanation">With the annotation <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlAttribute.html" class="javadoc">@XmlAttribute</a> you can declare that a bean's property or field is represented by an attribute instead of by an element. Example (with properties):</p><pre class="subSecCode"><code>public class Movie {
    private String title;
    private int releaseYear;

    <em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlAttribute.html" class="javadoc">@XmlAttribute</a></em>
    public String getTitle() {
        return title;
    }
    public void setTitle(String title) {
        this.title = title;
    }

    <em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlAttribute.html" class="javadoc">@XmlAttribute</a></em>
    public int getReleaseYear() {
        return releaseYear;
    }
    public void setReleaseYear(int releaseYear) {
        this.releaseYear = releaseYear;
    }
}
</code></pre><p class="subSecExplanation">Resulting <a href="#" id="tl-d2e1470" class="dottedTooltip" onclick="return tpcClick('tl-d2e1470','pp-d2e20');" onmouseover="return tpcOver('tl-d2e1470','pp-d2e20');" onmouseout="return tpcOut('tl-d2e1470','pp-d2e20');">XML Schema</a> fragment: </p><pre class="subSecCode"><code>&lt;xs:complexType name="movie"&gt;
    &lt;xs:sequence/&gt;
    &lt;xs:attribute name="releaseYear" type="xs:int" use="required"/&gt;
    &lt;xs:attribute name="title" type="xs:string"/&gt;
&lt;/xs:complexType&gt;
</code></pre><p class="subSecExplanation">Example XML fragment: </p><pre class="subSecCode"><code>&lt;ns2:movieLibrary xmlns:ns2="http://example.jarfiller.com"&gt;
    &lt;collection title="Casablanca" releaseYear="1942" /&gt;
    &lt;collection title="Dr Zhivago" releaseYear="1965" /&gt;
    &lt;collection title="Out of Africa" releaseYear="1985" /&gt;
&lt;/ns2:movieLibrary&gt;
</code></pre></div></div><div id="colla_requiredelements" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="requiredelements.xhtml#requiredelements" name="requiredelements">Required Elements</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('requiredelements');">How to Require XML Elements</a></div></div></div><div class="subSecRow1" id="sec_requiredelements" style="display: none"><div class="subSecHead" id="sechd_requiredelements"><a class="multipageHeadLink" href="requiredelements.xhtml#requiredelements" name="requiredelements">Required Elements</a></div><div class="subSecContent" id="seccnt_requiredelements"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('requiredelements');">How to Require XML Elements</a></div><p class="subSecExplanation">By default, all XML elements in the generated schema are optional, unless the underlying Java type is a built-in type that does not allow <span class="idf">null</span> (such as <span class="idf">int</span>, <span class="idf">boolean</span>...). If you a value is required in an element, you must declare this explicitly: </p><pre class="subSecCode"><code>public class Movie {
    private String title;
    private int releaseYear;

    <em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlElement.html" class="javadoc">@XmlElement</a>(<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlElement.html#required()" class="javadoc">required</a>=true)</em>
    public String getTitle() {
        return title;
    }
    public void setTitle(String title) {
        this.title = title;
    }

    public <em>int</em> getReleaseYear() {  <span class="cmt">// <span class="idf">int</span> is always required (<a href="#" id="tl-d2e1592" class="dottedTooltip" onclick="return tlClick('tl-d2e1592','pp-d2e1592');" onmouseover="return tlOver('tl-d2e1592','pp-d2e1592');" onmouseout="return tlOut('tl-d2e1592','pp-d2e1592');">more</a>)</span>
        return releaseYear;
    }
    public void setReleaseYear(int releaseYear) {
        this.releaseYear = releaseYear;
    }
}
</code></pre><p class="subSecExplanation">Resulting <a href="#" id="tl-d2e1642" class="dottedTooltip" onclick="return tpcClick('tl-d2e1642','pp-d2e20');" onmouseover="return tpcOver('tl-d2e1642','pp-d2e20');" onmouseout="return tpcOut('tl-d2e1642','pp-d2e20');">XML Schema</a> fragment (the <span class="idf">minOccurs</span> attributes that made the elements optional have disappeared): </p><pre class="subSecCode"><code>&lt;xs:complexType name="movie"&gt;
    &lt;xs:sequence&gt;
        &lt;xs:element name="releaseYear" type="xs:int"/&gt;
        &lt;xs:element name="title" type="xs:string"/&gt;
    &lt;/xs:sequence&gt;
&lt;/xs:complexType&gt;
</code></pre></div></div><div id="colla_elementnames" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="elementnames.xhtml#elementnames" name="elementnames">Element Names</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('elementnames');">How to Specify a Different Name for an Element</a></div></div></div><div class="subSecRow2" id="sec_elementnames" style="display: none"><div class="subSecHead" id="sechd_elementnames"><a class="multipageHeadLink" href="elementnames.xhtml#elementnames" name="elementnames">Element Names</a></div><div class="subSecContent" id="seccnt_elementnames"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('elementnames');">How to Specify a Different Name for an Element</a></div><p class="subSecExplanation">By default, JAXB uses the property name or field name as element name. If you don't want this, use an <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlElement.html" class="javadoc">@XmlElement</a> annotation with <span class="idf">name</span> parameter. </p><pre class="subSecCode"><code>public class Movie {
    <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlElement.html" class="javadoc">@XmlElement</a>(<em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlElement.html#name()" class="javadoc">name</a>="movie-title")</em>
    public String title;
    <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlAttribute.html" class="javadoc">@XmlAttribute</a>(<em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlAttribute.html#name()" class="javadoc">name</a>="release-year")</em>
    public int releaseYear;
}
</code></pre></div></div><div id="colla_preventingserialization" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="preventingserialization.xhtml#preventingserialization" name="preventingserialization">Preventing Serialization</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('preventingserialization');">How to Prevent Serialization of Properties or Fields</a></div></div></div><div class="subSecRow1" id="sec_preventingserialization" style="display: none"><div class="subSecHead" id="sechd_preventingserialization"><a class="multipageHeadLink" href="preventingserialization.xhtml#preventingserialization" name="preventingserialization">Preventing Serialization</a></div><div class="subSecContent" id="seccnt_preventingserialization"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('preventingserialization');">How to Prevent Serialization of Properties or Fields</a></div><p class="subSecExplanation">By default, JAXB will serialize all public fields and properties of a bean. However, you can control this behaviour using the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlAccessorType.html" class="javadoc">@XmlAccessorType</a> annotation at class or package level. Instead of the default <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlAccessType.html#PUBLIC" class="javadoc">XmlAccessType.PUBLIC</a> you can specify that only properties (<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlAccessType.html#PROPERTY" class="javadoc">XmlAccessType.PROPERTY</a>), fields (<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlAccessType.html#FIELD" class="javadoc">XmlAccessType.FIELD</a>) or no members (<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlAccessType.html#NONE" class="javadoc">XmlAccessType.NONE</a>) are serialized without a explicit annotation. Then only <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlElement.html" class="javadoc">@XmlElement</a>-annotated members will be written: </p><pre class="subSecCode"><code><em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlAccessorType.html" class="javadoc">@XmlAccessorType</a>(<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlAccessType.html#NONE" class="javadoc">XmlAccessType.NONE</a>)</em>
public class Movie {
    <em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlElement.html" class="javadoc">@XmlElement</a></em>
    public String title;
    <em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlElement.html" class="javadoc">@XmlElement</a></em>
    public int releaseYear;
    public String notWritten;  <span class="cmt">// will not be serialized</span>
}
</code></pre><p class="subSecExplanation">The serialization of specific members can also be prevented with the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlTransient.html" class="javadoc">@XmlTransient</a> annotation, or (for fields) with the <span class="idf">transient</span> modifier: </p><pre class="subSecCode"><code>public class Movie {
    public String title;
    public int releaseYear;

    <em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlTransient.html" class="javadoc">@XmlTransient</a></em>
    public String notWritten1;            <span class="cmt">// will not be serialized</span>

    public <em>transient</em> String notWritten2;  <span class="cmt">// will not be serialized</span>
}
</code></pre></div></div><div id="colla_propertyorder" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="propertyorder.xhtml#propertyorder" name="propertyorder">Property Order</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('propertyorder');">How to Specify an Order for Properties/Fields</a></div></div></div><div class="subSecRow2" id="sec_propertyorder" style="display: none"><div class="subSecHead" id="sechd_propertyorder"><a class="multipageHeadLink" href="propertyorder.xhtml#propertyorder" name="propertyorder">Property Order</a></div><div class="subSecContent" id="seccnt_propertyorder"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('propertyorder');">How to Specify an Order for Properties/Fields</a></div><p class="subSecExplanation">By default, the generated <a href="#" id="tl-d2e1867" class="dottedTooltip" onclick="return tpcClick('tl-d2e1867','pp-d2e20');" onmouseover="return tpcOver('tl-d2e1867','pp-d2e20');" onmouseout="return tpcOut('tl-d2e1867','pp-d2e20');">XML Schema</a> for a bean require XML elements to have the same order that you defined your properties and fields in (using <span class="idf">xs:sequence</span>). Often this is not a good idea, because after refactoring the Java code may create a XML Schema incompatible with the old one. Therefore a specific order can be defined with the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlType.html#propOrder()" class="javadoc">propOrder</a> parameter of the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlType.html" class="javadoc">@XmlType</a> annotation: </p><pre class="subSecCode"><code><em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlType.html" class="javadoc">@XmlType</a>(<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlType.html#propOrder()" class="javadoc">propOrder</a>={"title", "releaseYear"})</em>
public class Movie {
    public int releaseYear;
    public String title;
}
</code></pre><p class="subSecExplanation">If you do not care about the element order at all, you can also specify an empty <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlType.html#propOrder()" class="javadoc">propOrder</a> sequence. The generated <a href="#" id="tl-d2e1909" class="dottedTooltip" onclick="return tpcClick('tl-d2e1909','pp-d2e20');" onmouseover="return tpcOver('tl-d2e1909','pp-d2e20');" onmouseout="return tpcOut('tl-d2e1909','pp-d2e20');">XML Schema</a> will then use <span class="idf">xs:all</span> instead of <span class="idf">xs:sequence</span>, meaning that the XML elements can appear in any order. But note that the resulting schema may be more difficult to read, for humans as well as computers:</p><pre class="subSecCode"><code><em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlType.html" class="javadoc">@XmlType</a>(<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlType.html#propOrder()" class="javadoc">propOrder</a>={})</em>
public class Movie {
    public int releaseYear;
    public String title;
}
</code></pre></div></div><div id="colla_choice" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="choice.xhtml#choice" name="choice">Choice Collection</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('choice');">How to Have Mixed XML Elements in a Single List (Choice)</a></div></div></div><div class="subSecRow1" id="sec_choice" style="display: none"><div class="subSecHead" id="sechd_choice"><a class="multipageHeadLink" href="choice.xhtml#choice" name="choice">Choice Collection</a></div><div class="subSecContent" id="seccnt_choice"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('choice');">How to Have Mixed XML Elements in a Single List (Choice)</a></div><p class="subSecExplanation">It is possible to put different XML elements in the same list. Let's say you want to create a collection of values that can either be strings, numbers or a key/value pair of strings. This can be represented by the following schema:</p><pre class="subSecCode"><code>&lt;xs:schema version="1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
  &lt;xs:element name="values"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:choice minOccurs="0" maxOccurs="unbounded"&gt;
        &lt;xs:element name="aString" type="xs:string"/&gt;
        &lt;xs:element name="aNumber" type="xs:int"/&gt;
        &lt;xs:element name="aKeyValuePair"&gt;
          &lt;xs:complexType&gt;
            &lt;xs:sequence/&gt;
            &lt;xs:attribute name="key" type="xs:string"/&gt;
            &lt;xs:attribute name="value" type="xs:string"/&gt;
          &lt;/xs:complexType&gt;
        &lt;/xs:element&gt;
      &lt;/xs:choice&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;
&lt;/xs:schema&gt;
</code></pre><p class="subSecExplanation">The problem here is that the <span class="idf">aString</span>, <span class="idf">aNumber</span> and <span class="idf">aKeyValuePair</span> elements do not have a common super-class. You can implement it in Java by using an <span class="idf">Object</span> collection and specifying all possible types that the collection may contain:</p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlRootElement.html" class="javadoc">@XmlRootElement</a>(name="values")
<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlType.html" class="javadoc">@XmlType</a>(name="")    <span class="cmt">// anonymous (inline) type</span>
public class Values {

  <em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlElements.html" class="javadoc">@XmlElements</a>({</em>     <span class="cmt">// declares the element choice</span>
    <em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlElement.html" class="javadoc">@XmlElement</a>(<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlElement.html#name()" class="javadoc">name</a>="aKeyValuePair", <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlElement.html#type()" class="javadoc">type</a>=Values.AKeyValuePair.class),</em>
    <em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlElement.html" class="javadoc">@XmlElement</a>(<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlElement.html#name()" class="javadoc">name</a>="aString", <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlElement.html#type()" class="javadoc">type</a>=String.class),</em>
    <em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlElement.html" class="javadoc">@XmlElement</a>(<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlElement.html#name()" class="javadoc">name</a>="empty")</em>
  <em>})</em>
  public List&lt;Object&gt; list = new new ArrayList&lt;Object&gt;();

  <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlType.html" class="javadoc">@XmlType</a>(<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlType.html#name()" class="javadoc">name</a>="")  <span class="cmt">// anonymous (inline) type</span>
  public static class AKeyValuePair {
    <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlAttribute.html" class="javadoc">@XmlAttribute</a>
    public String key;
    <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlAttribute.html" class="javadoc">@XmlAttribute</a>
    public String value;
  }
}
</code></pre></div></div><div id="colla_simpletypes" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="simpletypes.xhtml#simpletypes" name="simpletypes">Simple Types</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('simpletypes');">How to Implement a Simple Type</a></div></div></div><div class="subSecRow2" id="sec_simpletypes" style="display: none"><div class="subSecHead" id="sechd_simpletypes"><a class="multipageHeadLink" href="simpletypes.xhtml#simpletypes" name="simpletypes">Simple Types</a></div><div class="subSecContent" id="seccnt_simpletypes"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('simpletypes');">How to Implement a Simple Type</a></div><p class="subSecExplanation"><span class="idf">Simple types</span> are types that consist only of text, without any elements. Examples for simple types are strings, numbers and dates.<br/> JAXB has the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlValue.html" class="javadoc">@XmlValue</a> type to implement simple types. To do this, you need to create a Java class to represent the type. Exactly one single property or field of the class must be annotated with the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlValue.html" class="javadoc">@XmlValue</a> annotation. The property's (or field's) type must always map to a simple type (such as a string or number). The following example implements the class <span class="idf">Price</span> as simple type:</p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlRootElement.html" class="javadoc">@XmlRootElement</a>
public class PriceList {
	public List&lt;Price&gt; prices;
}

public class Price {
  <em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlValue.html" class="javadoc">@XmlValue</a></em>
  public double amount;

  public Price(double amount) {
    this.amount = amount;
  }

  public Price() {
  }
}
</code></pre><p class="subSecExplanation">Now the following marshalling code</p><pre class="subSecCode"><code>PriceList priceList = new PriceList();
priceList.prices = Arrays.asList(new Price(99.95), new Price(74.90));
<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXB.html#marshal(java.lang.Object, java.io.Writer)" class="javadoc">JAXB.marshal</a>(priceList, System.out);
</code></pre><p class="subSecExplanation">Note that will print this XML document:</p><pre class="subSecCode"><code>&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;priceList&gt;
  <em>&lt;prices&gt;99.95&lt;/prices&gt;</em>
  <em>&lt;prices&gt;74.9&lt;/prices&gt;</em>
&lt;/priceList&gt;
</code></pre><p class="subSecExplanation">Note that there is no <span class="idf">&lt;amount&gt;</span> element in the resulting XML, only <span class="idf">PriceList</span>'s <span class="idf">&lt;prices&gt;</span> element.</p><p class="subSecExplanation">You can also combine a <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlValue.html" class="javadoc">@XmlValue</a> in a class with an <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlAttribute.html" class="javadoc">@XmlAttribute</a>. The following example shows you how to use it:</p><pre class="subSecCode"><code>public class Price {
  <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlValue.html" class="javadoc">@XmlValue</a>
  public double amount;

  <em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlAttribute.html" class="javadoc">@XmlAttribute</a></em>
  public String currency;

  public Price(double amount, String currency) {
    this.amount = amount;
    this.currency = currency;
  }

  public Price() {
  }
}
</code></pre><p class="subSecExplanation">Then the following code</p><pre class="subSecCode"><code>PriceList priceList = new PriceList();
priceList.prices = Arrays.asList(new Price(99.95, "US Dollar"), new Price(74.90, "Euro"));
<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXB.html#marshal(java.lang.Object, java.io.Writer)" class="javadoc">JAXB.marshal</a>(priceList, System.out);
</code></pre><p class="subSecExplanation">will print this XML document:</p><pre class="subSecCode"><code>&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;priceList&gt;
  &lt;prices <em>currency="US Dollar"</em>&gt;99.95&lt;/prices&gt;
  &lt;prices <em>currency="Euro"</em>&gt;74.9&lt;/prices&gt;
&lt;/priceList&gt;
</code></pre><p class="subSecExplanation">Not every <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlValue.html" class="javadoc">@XmlValue</a> property needs to be backed by an actual field, of course. You can also use it to construct a simple typed value from several other values:</p><pre class="subSecCode"><code>public class Price {
  <em>private</em> double amount;
  <em>private</em> String currency;

  public Price(double amount, String currency) {
    this.amount = amount;
    this.currency = currency;
  }

  public Price() {
  }

  <em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlValue.html" class="javadoc">@XmlValue</a></em>
  <em>public String getValue()</em> {
    return amount + " " + currency;
  }

  <em>public void setValue(String v)</em> {  <span class="cmt">// bad code, no error handling!</span>
    amount = Double.parseDouble(v.replaceFirst("\\s.*$", ""));
    currency = v.replaceFirst("^.*\\s", "");
  }
}
</code></pre><p class="subSecExplanation">When using the same content tree as in the previous example, the resulting XML will be:</p><pre class="subSecCode"><code>&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;priceList&gt;
  &lt;prices&gt;<em>99.95 US Dollar</em>&lt;/prices&gt;
  &lt;prices&gt;<em>74.9 Euro</em>&lt;/prices&gt;
&lt;/priceList&gt;
</code></pre></div></div><div id="colla_xmladapter" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="xmladapter.xhtml#xmladapter" name="xmladapter">XML Adapter</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('xmladapter');">How to Map Java Types to XML</a></div></div></div><div class="subSecRow1" id="sec_xmladapter" style="display: none"><div class="subSecHead" id="sechd_xmladapter"><a class="multipageHeadLink" href="xmladapter.xhtml#xmladapter" name="xmladapter">XML Adapter</a></div><div class="subSecContent" id="seccnt_xmladapter"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('xmladapter');">How to Map Java Types to XML</a></div><p class="subSecExplanation">The <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/XmlAdapter.html" class="javadoc">XmlAdapter</a> interface allows you to serialize any Java type to XML, by providing a <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/XmlAdapter.html" class="javadoc">XmlAdapter</a> implementation that maps the arbitrary Java object to a JAXB supported object.<br/> For example, the following class is not JAXB-compatible because it lacks the argument-less default constructor and its fields are <span class="idf">final</span>:</p><pre class="subSecCode"><code>public class EMailAddress {  <span class="cmt">// not JAXB-compatible</span>
  public final String user, hostname;

  public EMailAddress(String user, String hostname) {
    this.user = user;
    this.hostname = hostname;
  }
}
</code></pre><p class="subSecExplanation">The first step for mapping the <span class="idf">EMailAddress</span> class to XML is creating or finding a suitable JAXB-compatible type that can represent it. So let's define a bean <span class="idf">XmlEMailAddress</span> that can be serialized by JAXB:</p><pre class="subSecCode"><code>public class XmlEMailAddress {   <span class="cmt">// JAXB-compatible</span>
  public String user;
  public String hostname;
}
</code></pre><p class="subSecExplanation"> The next step is to implement the <span class="idf">XmlAdapter</span> and provide methods to convert between <span class="idf">EMailAddress</span> and <span class="idf">XmlEMailAddress</span>: </p><pre class="subSecCode"><code>public class XmlEMailAddressAdapter <em>extends <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/XmlAdapter.html" class="javadoc">XmlAdapter</a>&lt;XmlEMailAddress, EMailAddress&gt;</em> {
  @Override
  public <em>XmlEMailAddress marshal(EMailAddress v)</em> {
    XmlEMailAddress a = new XmlEMailAddress();
    a.user = v.user;
    a.hostname = v.hostname;
    return a;
  }

  @Override
  public <em>EMailAddress unmarshal(XmlEMailAddress v)</em>{
    return new EMailAddress(v.user, v.hostname);
  }
}
</code></pre><p class="subSecExplanation">Now you only need to declare that the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/adapters/XmlAdapter.html" class="javadoc">XmlAdapter</a> should be used for <span class="idf">EMailAddress</span>. For this you need the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/adapters/XmlJavaTypeAdapter.html" class="javadoc">XmlJavaTypeAdapter</a> annotation. It can be used at a property-level (to define the adapter only for this property or field), at the mapped class, or at the package level to define an adapter for the whole package. In this example, a class <span class="idf">EMail</span> is defined that uses the adapter only for a single property:</p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlRootElement.html" class="javadoc">@XmlRootElement</a>
public class EMail {
  <em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/adapters/XmlJavaTypeAdapter.html" class="javadoc">@XmlJavaTypeAdapter</a>(value=XmlEMailAddressAdapter.class)</em>
  public EMailAddress recipient;

  public String body;
}
</code></pre><p class="subSecExplanation">Now <span class="idf">EMail</span> can be used like any other class:</p><pre class="subSecCode"><code>EMail mail = new EMail();
mail.recipient = <em>new EMailAddress("recipient", "example.com")</em>;
mail.body = "Hello!";
<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXB.html#marshal(java.lang.Object, java.io.Writer)" class="javadoc">JAXB.marshal</a>(mail, System.out);
</code></pre><p class="subSecExplanation">This is the output of the last code fragment:</p><pre class="subSecCode"><code>&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;eMail&gt;
    <em>&lt;recipient&gt;</em>
        <em>&lt;user&gt;recipient&lt;/user&gt;</em>
        <em>&lt;hostname&gt;example.com&lt;/hostname&gt;</em>
    <em>&lt;/recipient&gt;</em>
    &lt;body&gt;Hello!&lt;/body&gt;
&lt;/eMail&gt;
</code></pre><p class="subSecExplanation">An adapter can also map to a simple type such as a string. The following example shows an adapter that converts the <span class="idf">EMail</span> class into a string with the usual email notation:</p><pre class="subSecCode"><code>public class XmlEMailAddressAdapter extends <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/XmlAdapter.html" class="javadoc">XmlAdapter</a>&lt;<em>String</em>, EMailAddress&gt; {
  @Override
  public String marshal(EMailAddress v) throws Exception {
    return v.user + "@" + v.hostname;
  }

  @Override
  public EMailAddress unmarshal(String v) throws Exception {
    return new EMailAddress(v.replaceFirst("@.*$", ""), v.replaceFirst("^.*@", ""));
  }
}
</code></pre><p class="subSecExplanation">When this is used as <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/XmlAdapter.html" class="javadoc">XmlAdapter</a>, the following XML will be generated:</p><pre class="subSecCode"><code>&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;
&lt;eMail&gt;
    &lt;recipient&gt;<em>recipient@example.com</em>&lt;/recipient&gt;
    &lt;body&gt;Hello!&lt;/body&gt;
&lt;/eMail&gt;
</code></pre></div></div><div id="colla_jaxbelement" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="jaxbelement.xhtml#jaxbelement" name="jaxbelement">JAXBElement</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('jaxbelement');">How to use JAXBElement</a></div></div></div><div class="subSecRow2" id="sec_jaxbelement" style="display: none"><div class="subSecHead" id="sechd_jaxbelement"><a class="multipageHeadLink" href="jaxbelement.xhtml#jaxbelement" name="jaxbelement">JAXBElement</a></div><div class="subSecContent" id="seccnt_jaxbelement"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('jaxbelement');">How to use JAXBElement</a></div><p class="subSecExplanation"><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBElement.html" class="javadoc">JAXBElement</a> is used in JAXB where the <a href="#" id="tl-d2e2857" class="dottedTooltip" onclick="return tpcClick('tl-d2e2857','pp-d2e20');" onmouseover="return tpcOver('tl-d2e2857','pp-d2e20');" onmouseout="return tpcOut('tl-d2e2857','pp-d2e20');">XML Schema</a> can not be represented by a Java bean. You will often encounter it when compiling complex XML Schema documents with <a href="#" id="tl-d2e2860" class="dottedTooltip" onclick="return tlClick('tl-d2e2860','pp-d2e332');" onmouseover="return tlOver('tl-d2e2860','pp-d2e332');" onmouseout="return tlOut('tl-d2e2860','pp-d2e332');">xjc</a>. Each <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBElement.html" class="javadoc">JAXBElement</a> corresponds to an XML element. It stores the element's tag name as well as its content. The content of a <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBElement.html" class="javadoc">JAXBElement</a> can be any object supported by JAXB, beans or simple types.<br/> The following example</p><pre class="subSecCode"><code>Movie movieContent = new Movie("Casablanca", 1942);
<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBElement.html" class="javadoc">JAXBElement</a>&lt;Movie&gt; myMovie = <em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBElement.html#JAXBElement(javax.xml.namespace.QName, java.lang.Class, T)" class="javadoc">new JAXBElement</a>&lt;Movie&gt;(new QName("myMovie"),</em>
                                           <em>Movie.class, movieContent)</em>;
<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXB.html#marshal(java.lang.Object, java.io.Writer)" class="javadoc">JAXB.marshal</a>(myMovie, new File("/tmp/movie.xml"));
</code></pre><p class="subSecExplanation">will create this XML:</p><pre class="subSecCode"><code>&lt;<em>myMovie</em>&gt;
  &lt;releaseYear&gt;1942&lt;/releaseYear&gt;
  &lt;title&gt;Casablanca&lt;/title&gt;
&lt;/<em>myMovie</em>&gt;
</code></pre><p class="subSecExplanation">Note that the tag name of the generated element is not <span class="idf">Movie</span>, but <span class="idf">myMovie</span>, as specified in the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBElement.html" class="javadoc">JAXBElement</a>.</p><h4 class="subSecMiniHeadline">JAXBElement for Choice</h4><p class="subSecExplanation">Here is an example for a XML Schema that will need <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBElement.html" class="javadoc">JAXBElement</a>:</p><pre class="subSecCode"><code>&lt;xs:schema version="1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema"&gt;
  &lt;xs:element name="movieSoSoLibrary"&gt;
    &lt;xs:complexType&gt;
      &lt;xs:<em>choice</em> minOccurs="0" maxOccurs="unbounded"&gt;
        &lt;xs:element <em>name="goodMovie" type="movie"</em> nillable="true"/&gt;
        &lt;xs:element <em>name="badMovie" type="movie"</em> nillable="true"/&gt;
      &lt;/xs:<em>choice</em>&gt;
    &lt;/xs:complexType&gt;
  &lt;/xs:element&gt;

  &lt;xs:complexType name="movie"&gt;
    &lt;xs:sequence&gt;
      &lt;xs:element name="releaseYear" type="xs:int"/&gt;
      &lt;xs:element name="title" type="xs:string"/&gt;
    &lt;/xs:sequence&gt;
  &lt;/xs:complexType&gt;
&lt;/xs:schema&gt;
</code></pre><p class="subSecExplanation">In this example, the tag names <span class="idf">goodMovie</span> and <span class="idf">badMovie</span> can both be used to represent the <span class="idf">movie</span> type. In order to differentiate a <span class="idf">goodMovie</span> from a <span class="idf">badMovie</span>, even though both are represented by the <span class="idf">Movie</span> class, <a href="#" id="tl-d2e3031" class="dottedTooltip" onclick="return tlClick('tl-d2e3031','pp-d2e332');" onmouseover="return tlOver('tl-d2e3031','pp-d2e332');" onmouseout="return tlOut('tl-d2e3031','pp-d2e332');">xjc</a> will create the following code:</p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlAccessorType.html" class="javadoc">@XmlAccessorType</a>(<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlAccessType.html#FIELD" class="javadoc">XmlAccessType.FIELD</a>)
<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlType.html" class="javadoc">@XmlType</a>(name = "", propOrder = { "goodMovieOrBadMovie" })
<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlRootElement.html" class="javadoc">@XmlRootElement</a>(name = "movieSoSoLibrary")
public class MovieSoSoLibrary {

  <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlElementRefs.html" class="javadoc">@XmlElementRefs</a>({
    <em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlElementRef.html" class="javadoc">@XmlElementRef</a>(name = "goodMovie", type = JAXBElement.class),</em>
    <em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlElementRef.html" class="javadoc">@XmlElementRef</a>(name = "badMovie", type = JAXBElement.class)</em>
  })
  protected <em>List&lt;<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBElement.html" class="javadoc">JAXBElement</a>&lt;Movie&gt;&gt; goodMovieOrBadMovie</em>;

  public List&lt;<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBElement.html" class="javadoc">JAXBElement</a>&lt;Movie&gt;&gt; getGoodMovieOrBadMovie() {
    if (goodMovieOrBadMovie == null) {
      goodMovieOrBadMovie = new ArrayList&lt;<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBElement.html" class="javadoc">JAXBElement</a>&lt;Movie&gt;&gt;();
    }
  return this.goodMovieOrBadMovie;
  }
}
</code></pre><p class="subSecExplanation">When <a href="#" id="tl-d2e3126" class="dottedTooltip" onclick="return tlClick('tl-d2e3126','pp-d2e332');" onmouseover="return tlOver('tl-d2e3126','pp-d2e332');" onmouseout="return tlOut('tl-d2e3126','pp-d2e332');">xjc</a> generates such code, it places factory methods for the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBElement.html" class="javadoc">JAXBElement</a> instances into a class called <span class="idf">ObjectFactory</span>. There you can find the following definitions for creating <span class="idf">goodMovie</span> and <span class="idf">badMovie</span> elements:</p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlElementDecl.html" class="javadoc">@XmlElementDecl</a>(namespace = "", name = "badMovie", scope = MovieSoSoLibrary.class)
public <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBElement.html" class="javadoc">JAXBElement</a>&lt;Movie&gt; createMovieSoSoLibraryBadMovie(Movie value) {
  return <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBElement.html#JAXBElement(javax.xml.namespace.QName, java.lang.Class, java.lang.Class, T)" class="javadoc">new JAXBElement</a>&lt;Movie&gt;(_MovieSoSoLibraryBadMovie_QNAME, 
                                   Movie.class, MovieSoSoLibrary.class, value);
}

<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlElementDecl.html" class="javadoc">@XmlElementDecl</a>(namespace = "", name = "goodMovie", scope = MovieSoSoLibrary.class)
public <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBElement.html" class="javadoc">JAXBElement</a>&lt;Movie&gt; createMovieSoSoLibraryGoodMovie(Movie value) {
  return <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBElement.html#JAXBElement(javax.xml.namespace.QName, java.lang.Class, java.lang.Class, T)" class="javadoc">new JAXBElement</a>&lt;Movie&gt;(_MovieSoSoLibraryGoodMovie_QNAME, 
                                   Movie.class, MovieSoSoLibrary.class, value);
}
</code></pre><p class="subSecExplanation">Note that the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlElementRef.html" class="javadoc">@XmlElementRef</a> annotations in the <span class="idf">MovieSoSoLibrary</span> refer to the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlElementDecl.html" class="javadoc">@XmlElementDecl</a> annotations in <span class="idf">ObjectFactory</span>.</p></div></div><h2 id="sec_howtoserialization" class="sectionHead"><a name="howtoserialization">How to... Serialization</a></h2><div class="sectionExpandAll">
			(<a href="#" onclick="&#xA;return showAll([['colla_jaxbcontext','sec_jaxbcontext'],['colla_customizedserialization','sec_customizedserialization'],['colla_schemavalidation','sec_schemavalidation'],['colla_prettyprinting','sec_prettyprinting'],['colla_xmlfragments','sec_xmlfragments'],['colla_encoding','sec_encoding'],['colla_consumer','sec_consumer'],['colla_domtree','sec_domtree'],['colla_stringreading','sec_stringreading'],['colla_stringwriting','sec_stringwriting'],['colla_xpath','sec_xpath'],['colla_xslt','sec_xslt'],['colla_performance','sec_performance'],['colla_multithreading','sec_multithreading'], null]); &#xA;">expand everything</a>)
		</div><div id="colla_jaxbcontext" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="jaxbcontext.xhtml#jaxbcontext" name="jaxbcontext">JAXBContext</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('jaxbcontext');">How to Use JAXBContext</a></div></div></div><div class="subSecRow1" id="sec_jaxbcontext" style="display: none"><div class="subSecHead" id="sechd_jaxbcontext"><a class="multipageHeadLink" href="jaxbcontext.xhtml#jaxbcontext" name="jaxbcontext">JAXBContext</a></div><div class="subSecContent" id="seccnt_jaxbcontext"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('jaxbcontext');">How to Use JAXBContext</a></div><p class="subSecExplanation"> <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html" class="javadoc">JAXBContext</a> represents a collection of JAXB-enabled classes. You create it with either a list of JAXB-enabled classes, or using a 'context path' containing a list of colon-separated packages (read <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html#newInstance(java.lang.String, java.lang.ClassLoader)" class="javadoc">newInstance(String,ClassLoader)</a> for details). Once you have the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html" class="javadoc">JAXBContext</a>, you can obtain <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html" class="javadoc">Marshaller</a> and <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Unmarshaller.html" class="javadoc">Unmarshaller</a> objects from it, which will do the acutal serialization.<br/> When you use the methods <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXB.html#marshal(java.lang.Object, java.io.Writer)" class="javadoc">JAXB.marshal</a> and <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXB.html#unmarshal(java.io.File, java.lang.Class)" class="javadoc">JAXB.unmarshall</a> shown in the previous sections, you <em>don't need to take care of the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html" class="javadoc">JAXBContext</a></em> yourself - it will all be done automatically. <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html" class="javadoc">JAXBContext</a> is only needed when you want <em>to customize the serialization process</em>. </p><h4 class="subSecMiniHeadline">Creating JAXBContext by Class</h4><p class="subSecExplanation"> This is a simplest way to create a <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html" class="javadoc">JAXBContext</a>. Note that not only the <span class="idf">MovieLibrary</span> class will be in the context, but also <em>all beans it refers to</em>: </p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html" class="javadoc">JAXBContext</a> ctx = <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html#newInstance(java.lang.Class...)" class="javadoc">JAXBContext.newInstance</a>(MovieLibrary.class);
</code></pre><p class="subSecExplanation"> You can also add more classes:</p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html" class="javadoc">JAXBContext</a> ctx = <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html#newInstance(java.lang.Class...)" class="javadoc">JAXBContext.newInstance</a>(MovieLibrary.class, Movie.class);
</code></pre><h4 class="subSecMiniHeadline">Creating JAXBContext by Package</h4><p class="subSecExplanation"> You can also generate the context for one or more packages, but <em>only if you generated them using <a href="#" id="tl-d2e3313" class="dottedTooltip" onclick="return tlClick('tl-d2e3313','pp-d2e332');" onmouseover="return tlOver('tl-d2e3313','pp-d2e332');" onmouseout="return tlOut('tl-d2e3313','pp-d2e332');">xjc</a></em> (<a href="#" id="tl-d2e3315" class="dottedTooltip" onclick="return tlClick('tl-d2e3315','pp-d2e3315');" onmouseover="return tlOver('tl-d2e3315','pp-d2e3315');" onmouseout="return tlOut('tl-d2e3315','pp-d2e3315');">more</a>). Just list the package names, <em>separated by colons</em>: </p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html" class="javadoc">JAXBContext</a> ctx = <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html#newInstance(java.lang.String, java.lang.ClassLoader)" class="javadoc">JAXBContext.newInstance</a>("com.jarfiller.example<em>:</em>com.jarfiller.xml");
</code></pre><p class="subSecExplanation"/></div></div><div id="colla_customizedserialization" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="customizedserialization.xhtml#customizedserialization" name="customizedserialization">Marshaller / Unmarshaller</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('customizedserialization');">How to Customize the Serialization / use JAXB 2.0</a></div></div></div><div class="subSecRow2" id="sec_customizedserialization" style="display: none"><div class="subSecHead" id="sechd_customizedserialization"><a class="multipageHeadLink" href="customizedserialization.xhtml#customizedserialization" name="customizedserialization">Marshaller / Unmarshaller</a></div><div class="subSecContent" id="seccnt_customizedserialization"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('customizedserialization');">How to Customize the Serialization / use JAXB 2.0</a></div><p class="subSecExplanation">Using the methods <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXB.html#marshal(java.lang.Object, java.io.Writer)" class="javadoc">JAXB.marshal</a> and <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXB.html#unmarshal(java.io.File, java.lang.Class)" class="javadoc">JAXB.unmarshall</a>, as shown in the previous sections, is the most convenient way of using JAXB. Unfortunately, they do no allow any customization of the serialization and deserialization processes, and they are not available JAXB 2.0. In order to get around these limitations, you have to work with the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html" class="javadoc">JAXBContext</a>, <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html" class="javadoc">Marshaller</a> and <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Unmarshaller.html" class="javadoc">Unmarshaller</a> objects. <br/> The following example shows you how to write a Java object into an XML document using <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html" class="javadoc">Marshaller</a>:</p><pre class="subSecCode"><code>MovieLibrary library = <span class="abstract">...</span>;

<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html" class="javadoc">JAXBContext</a> ctx = <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html#newInstance(java.lang.Class...)" class="javadoc">JAXBContext.newInstance</a>(MovieLibrary.class);  <span class="cmt">// create <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html" class="javadoc">JAXBContext</a> (<a href="#" id="tl-d2e3413" class="dottedTooltip" onclick="return tlClick('tl-d2e3413','pp-d2e3413');" onmouseover="return tlOver('tl-d2e3413','pp-d2e3413');" onmouseout="return tlOut('tl-d2e3413','pp-d2e3413');">more</a>)</span>
<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html" class="javadoc">Marshaller</a> marshaller = ctx.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html#createMarshaller()" class="javadoc">createMarshaller</a>();
marshaller.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html#marshal(java.lang.Object, java.io.OutputStream)" class="javadoc">marshal</a>(library, new FileOutputStream("/tmp/library.xml"));
</code></pre><p class="subSecExplanation">Note that the example above only works if you declared the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlRootElement.html" class="javadoc">@XmlRootElement</a> for the <span class="idf">MovieLibrary</span> class. This shouldn't be a problem for classes you wrote yourself. However, the <a href="#" id="tl-d2e3451" class="dottedTooltip" onclick="return tlClick('tl-d2e3451','pp-d2e332');" onmouseover="return tlOver('tl-d2e3451','pp-d2e332');" onmouseout="return tlOut('tl-d2e3451','pp-d2e332');">xjc</a> compiler does not set it automatically under some circumstances (<a href="#" id="tl-d2e3453" class="dottedTooltip" onclick="return tlClick('tl-d2e3453','pp-d2e3453');" onmouseover="return tlOver('tl-d2e3453','pp-d2e3453');" onmouseout="return tlOut('tl-d2e3453','pp-d2e3453');">more</a>). In this case you must set the root element's name explicitly and the <span class="idf">marshal</span> call looks like this:</p><pre class="subSecCode"><code>marshaller.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html#marshal(java.lang.Object, java.io.OutputStream)" class="javadoc">marshal</a>(<em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBElement.html#JAXBElement(javax.xml.namespace.QName, java.lang.Class, T)" class="javadoc">new JAXBElement</a>&lt;MovieLibrary&gt;(new QName("movieLibrary"),</em> 
                                                    <em>MovieLibrary.class, library)</em>,
                   new FileOutputStream("/tmp/library.xml"));
</code></pre><p class="subSecExplanation">Loading XML with the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Unmarshaller.html" class="javadoc">Unmarshaller</a> is similar to storing: </p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html" class="javadoc">JAXBContext</a> ctx = <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html#newInstance(java.lang.Class...)" class="javadoc">JAXBContext.newInstance</a>(MovieLibrary.class);  <span class="cmt">// can be reused</span>
<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Unmarshaller.html" class="javadoc">Unmarshaller</a> unmarshaller = ctx.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html#createUnmarshaller()" class="javadoc">createUnmarshaller</a>();
MovieLibrary library = unmarshaller.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Unmarshaller.html#unmarshal(javax.xml.transform.Source, java.lang.Class)" class="javadoc">unmarshal</a>(<a href="http://java.sun.com/javase/6/docs/api/javax/xml/transform/stream/StreamSource.html#StreamSource(java.io.File)" class="javadoc">new StreamSource</a>(new File("/tmp/library.xml")),
                                              MovieLibrary.class).<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBElement.html#getValue()" class="javadoc">getValue</a>();
</code></pre></div></div><div id="colla_schemavalidation" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="schemavalidation.xhtml#schemavalidation" name="schemavalidation">Schema Validation</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('schemavalidation');">How to Validate Against an XML Schema</a></div></div></div><div class="subSecRow1" id="sec_schemavalidation" style="display: none"><div class="subSecHead" id="sechd_schemavalidation"><a class="multipageHeadLink" href="schemavalidation.xhtml#schemavalidation" name="schemavalidation">Schema Validation</a></div><div class="subSecContent" id="seccnt_schemavalidation"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('schemavalidation');">How to Validate Against an XML Schema</a></div><p class="subSecExplanation">A <a href="#" id="tl-d2e3548" class="dottedTooltip" onclick="return tpcClick('tl-d2e3548','pp-d2e20');" onmouseover="return tpcOver('tl-d2e3548','pp-d2e20');" onmouseout="return tpcOut('tl-d2e3548','pp-d2e20');">XML Schema</a> allows more restrictions than Java's object model. For example, Java does not allow you to limit the length of a string. If you have a XML schema, you can let JAXB check the XML during the transformation process to be sure that the input and output is valid. First, you need to create a <a href="http://java.sun.com/javase/6/docs/api/javax/xml/validation/Schema.html" class="javadoc">Schema</a> instance (<span class="idf">javax.xml.validation</span> package): </p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/javax/xml/validation/SchemaFactory.html" class="javadoc">SchemaFactory</a> factory = <a href="http://java.sun.com/javase/6/docs/api/javax/xml/validation/SchemaFactory.html#newInstance(java.lang.String)" class="javadoc">SchemaFactory.newInstance</a>(<a href="http://java.sun.com/javase/6/docs/api/javax/xml/XMLConstants.html#W3C_XML_SCHEMA_NS_URI" class="javadoc">XMLConstants.W3C_XML_SCHEMA_NS_URI</a>);
<a href="http://java.sun.com/javase/6/docs/api/javax/xml/validation/Schema.html" class="javadoc">Schema</a> schema = factory.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/validation/SchemaFactory.html#newSchema(javax.xml.transform.Source)" class="javadoc">newSchema</a>(<a href="http://java.sun.com/javase/6/docs/api/javax/xml/transform/stream/StreamSource.html#StreamSource(java.io.File)" class="javadoc">new StreamSource</a>(new File("schema1.xsd")));
</code></pre><p class="subSecExplanation">Now that you have the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/validation/Schema.html" class="javadoc">Schema</a>, just set the property in the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html" class="javadoc">Marshaller</a> to validate the generated XML:</p><pre class="subSecCode"><code>MovieLibrary library = <span class="abstract">...</span>;

<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html" class="javadoc">JAXBContext</a> ctx = <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html#newInstance(java.lang.Class...)" class="javadoc">JAXBContext.newInstance</a>(MovieLibrary.class);
<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html" class="javadoc">Marshaller</a> marshaller = ctx.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html#createMarshaller()" class="javadoc">createMarshaller</a>();
<em>marshaller.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html#setSchema(javax.xml.validation.Schema)" class="javadoc">setSchema</a>(schema);</em>
marshaller.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html#marshal(java.lang.Object, java.io.OutputStream)" class="javadoc">marshal</a>(<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBElement.html#JAXBElement(javax.xml.namespace.QName, java.lang.Class, T)" class="javadoc">new JAXBElement</a>&lt;MovieLibrary&gt;(new QName("movieLibrary"), 
                                                    MovieLibrary.class, library),
                   new FileOutputStream("/tmp/library.xml"));
</code></pre><p class="subSecExplanation">To validate XML before you read it, set the <span class="idf">schema</span> property in the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Unmarshaller.html" class="javadoc">Unmarshaller</a>:</p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html" class="javadoc">JAXBContext</a> ctx = <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html#newInstance(java.lang.Class...)" class="javadoc">JAXBContext.newInstance</a>(MovieLibrary.class);  <span class="cmt">// can be reused</span>
<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Unmarshaller.html" class="javadoc">Unmarshaller</a> unmarshaller = ctx.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html#createUnmarshaller()" class="javadoc">createUnmarshaller</a>();
<em>unmarshaller.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Unmarshaller.html#setSchema(javax.xml.validation.Schema)" class="javadoc">setSchema</a>(schema);</em>
MovieLibrary library = unmarshaller.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Unmarshaller.html#unmarshal(javax.xml.transform.Source, java.lang.Class)" class="javadoc">unmarshal</a>(<a href="http://java.sun.com/javase/6/docs/api/javax/xml/transform/stream/StreamSource.html#StreamSource(java.io.File)" class="javadoc">new StreamSource</a>(new File("/tmp/library.xml")),
                                              MovieLibrary.class).<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBElement.html#getValue()" class="javadoc">getValue</a>();
</code></pre><p class="subSecExplanation">Reading or writing an invalid document causes JAXB to throw an exception.</p></div></div><div id="colla_prettyprinting" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="prettyprinting.xhtml#prettyprinting" name="prettyprinting">Pretty Printing</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('prettyprinting');">How to Create Nicely Formatted XML</a></div></div></div><div class="subSecRow2" id="sec_prettyprinting" style="display: none"><div class="subSecHead" id="sechd_prettyprinting"><a class="multipageHeadLink" href="prettyprinting.xhtml#prettyprinting" name="prettyprinting">Pretty Printing</a></div><div class="subSecContent" id="seccnt_prettyprinting"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('prettyprinting');">How to Create Nicely Formatted XML</a></div><p class="subSecExplanation">By default, JAXB creates compact XML that can not easily be read by humans. If you want to format it more nicely, you need to set the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html#JAXB_FORMATTED_OUTPUT" class="javadoc">JAXB_FORMATTED_OUTPUT</a> property of the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html" class="javadoc">Marshaller</a>:</p><pre class="subSecCode"><code>MovieLibrary library = <span class="abstract">...</span>;

<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html" class="javadoc">JAXBContext</a> ctx = <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html#newInstance(java.lang.Class...)" class="javadoc">JAXBContext.newInstance</a>(MovieLibrary.class);
<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html" class="javadoc">Marshaller</a> marshaller = ctx.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html#createMarshaller()" class="javadoc">createMarshaller</a>();
<em>marshaller.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html#setProperty(java.lang.String, java.lang.Object)" class="javadoc">setProperty</a>(<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html#JAXB_FORMATTED_OUTPUT" class="javadoc">Marshaller.JAXB_FORMATTED_OUTPUT</a>, true);</em>
marshaller.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html#marshal(java.lang.Object, java.io.OutputStream)" class="javadoc">marshal</a>(<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBElement.html#JAXBElement(javax.xml.namespace.QName, java.lang.Class, T)" class="javadoc">new JAXBElement</a>&lt;MovieLibrary&gt;(new QName("movieLibrary"), 
                                                    MovieLibrary.class, library),
                   new FileOutputStream("/tmp/library.xml"));
</code></pre></div></div><div id="colla_xmlfragments" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="xmlfragments.xhtml#xmlfragments" name="xmlfragments">XML Fragments</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('xmlfragments');">How to Create XML Fragments</a></div></div></div><div class="subSecRow1" id="sec_xmlfragments" style="display: none"><div class="subSecHead" id="sechd_xmlfragments"><a class="multipageHeadLink" href="xmlfragments.xhtml#xmlfragments" name="xmlfragments">XML Fragments</a></div><div class="subSecContent" id="seccnt_xmlfragments"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('xmlfragments');">How to Create XML Fragments</a></div><p class="subSecExplanation">If you want to create an XML fragment (a XML snippet without XML declaration that can be included into other XML documents) instead of a document, you need to set the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html#JAXB_FRAGMENT" class="javadoc">JAXB_FRAGMENT</a> property of the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html" class="javadoc">Marshaller</a>:</p><pre class="subSecCode"><code>MovieLibrary library = <span class="abstract">...</span>;

<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html" class="javadoc">JAXBContext</a> ctx = <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html#newInstance(java.lang.Class...)" class="javadoc">JAXBContext.newInstance</a>(MovieLibrary.class);
<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html" class="javadoc">Marshaller</a> marshaller = ctx.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html#createMarshaller()" class="javadoc">createMarshaller</a>();
<em>marshaller.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html#setProperty(java.lang.String, java.lang.Object)" class="javadoc">setProperty</a>(<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html#JAXB_FRAGMENT" class="javadoc">Marshaller.JAXB_FRAGMENT</a>, true);</em>
marshaller.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html#marshal(java.lang.Object, java.io.OutputStream)" class="javadoc">marshal</a>(<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBElement.html#JAXBElement(javax.xml.namespace.QName, java.lang.Class, T)" class="javadoc">new JAXBElement</a>&lt;MovieLibrary&gt;(new QName("movieLibrary"), 
                                                    MovieLibrary.class, library),
                   new FileOutputStream("/tmp/library.xml"));
</code></pre></div></div><div id="colla_encoding" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="encoding.xhtml#encoding" name="encoding">Encoding</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('encoding');">How to Change the Charset Encoding of the XML Output</a></div></div></div><div class="subSecRow2" id="sec_encoding" style="display: none"><div class="subSecHead" id="sechd_encoding"><a class="multipageHeadLink" href="encoding.xhtml#encoding" name="encoding">Encoding</a></div><div class="subSecContent" id="seccnt_encoding"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('encoding');">How to Change the Charset Encoding of the XML Output</a></div><p class="subSecExplanation">Sometimes you need to use a specific charset for the XML output instead the default UTF-8. You can use the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html#JAXB_ENCODING" class="javadoc">JAXB_ENCODING</a> property of the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html" class="javadoc">Marshaller</a> to set it:</p><pre class="subSecCode"><code>MovieLibrary library = <span class="abstract">...</span>;

<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html" class="javadoc">JAXBContext</a> ctx = <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html#newInstance(java.lang.Class...)" class="javadoc">JAXBContext.newInstance</a>(MovieLibrary.class);
<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html" class="javadoc">Marshaller</a> marshaller = ctx.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html#createMarshaller()" class="javadoc">createMarshaller</a>();
<em>marshaller.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html#setProperty(java.lang.String, java.lang.Object)" class="javadoc">setProperty</a>(<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html#JAXB_ENCODING" class="javadoc">Marshaller.JAXB_ENCODING</a>, "iso-8859-15");</em>
marshaller.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html#marshal(java.lang.Object, java.io.OutputStream)" class="javadoc">marshal</a>(<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBElement.html#JAXBElement(javax.xml.namespace.QName, java.lang.Class, T)" class="javadoc">new JAXBElement</a>&lt;MovieLibrary&gt;(new QName("movieLibrary"), 
                                                    MovieLibrary.class, library),
                   new FileOutputStream("/tmp/library.xml"));
</code></pre></div></div><div id="colla_consumer" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="consumer.xhtml#consumer" name="consumer">Consumer</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('consumer');">How to Send the Content Tree to a DOM/SAX Consumer</a></div></div></div><div class="subSecRow1" id="sec_consumer" style="display: none"><div class="subSecHead" id="sechd_consumer"><a class="multipageHeadLink" href="consumer.xhtml#consumer" name="consumer">Consumer</a></div><div class="subSecContent" id="seccnt_consumer"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('consumer');">How to Send the Content Tree to a DOM/SAX Consumer</a></div><p class="subSecExplanation">The <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html" class="javadoc">Marshaller</a> interface provides several ways of interoperating with code that expects XML as a DOM tree or is implemented as SAX <span class="idf">ContentHandler</span>. </p><pre class="subSecCode"><code>MovieLibrary library = new MovieLibrary();
<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html" class="javadoc">Marshaller</a> m = <span class="abstract">...</span>;

// Writing into a DOM tree
Document doc = ...;         <span class="cmt">// DOM Document</span>
<em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html#marshal(java.lang.Object, org.w3c.dom.Node)" class="javadoc">m.marshal</a>(library, doc)</em>;    <span class="cmt">// write into the given DOM node</span>

// Writing to a SAX ContentHandler
ContentHandler handler = ...;
<em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html#marshal(java.lang.Object, org.xml.sax.ContentHandler)" class="javadoc">marshal</a>(library, handler);</em>  <span class="cmt">// write into ContentHandler</span>
</code></pre><p class="subSecExplanation">In addition to the <span class="idf">marshal</span> variants, there is also the optional operation <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html#getNode(java.lang.Object)" class="javadoc">getNode</a>, which would return a live DOM tree corrensponding to the JAXB content tree. Java's default implemention does not support this operation though.</p></div></div><div id="colla_domtree" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="domtree.xhtml#domtree" name="domtree">DOM Tree</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('domtree');">How to Read from a DOM Tree</a></div></div></div><div class="subSecRow2" id="sec_domtree" style="display: none"><div class="subSecHead" id="sechd_domtree"><a class="multipageHeadLink" href="domtree.xhtml#domtree" name="domtree">DOM Tree</a></div><div class="subSecContent" id="seccnt_domtree"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('domtree');">How to Read from a DOM Tree</a></div><p class="subSecExplanation">The <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Unmarshaller.html" class="javadoc">Unmarshaller</a> interface provides a variant of the <span class="idf">unmarshall</span> method that reads a DOM <span class="idf">Node</span>. </p><pre class="subSecCode"><code>Node node = <span class="abstract">...</span>;
<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Unmarshaller.html" class="javadoc">Unmarshaller</a> m = <span class="abstract">...</span>;

MovieLibrary library = (MovieLibrary) <em>m.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Unmarshaller.html#unmarshal(org.w3c.dom.Node)" class="javadoc">unmarshal</a>(node)</em>;  <span class="cmt">// read from DOM node</span>
</code></pre></div></div><div id="colla_stringreading" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="stringreading.xhtml#stringreading" name="stringreading">String Reading</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('stringreading');">How to Read from a String</a></div></div></div><div class="subSecRow1" id="sec_stringreading" style="display: none"><div class="subSecHead" id="sechd_stringreading"><a class="multipageHeadLink" href="stringreading.xhtml#stringreading" name="stringreading">String Reading</a></div><div class="subSecContent" id="seccnt_stringreading"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('stringreading');">How to Read from a String</a></div><p class="subSecExplanation"><span class="idf">JAXB</span> allows you to read from a <a href="http://java.sun.com/javase/6/docs/api/java/io/Reader.html" class="javadoc">Reader</a>, which can easily be used to read from a String:</p><pre class="subSecCode"><code>String xml = "&lt;movieLibrary&gt;&lt;collection&gt;"+
             "&lt;name&gt;Up&lt;/name&gt;&lt;releaseYear&gt;2009&lt;/releaseYear&gt;"+
             "&lt;/collection&gt;&lt;/movieLibrary&gt;";

<em><a href="http://java.sun.com/javase/6/docs/api/java/io/StringReader.html" class="javadoc">StringReader</a> reader = new <a href="http://java.sun.com/javase/6/docs/api/java/io/StringReader.html#StringReader(java.lang.String)" class="javadoc">StringReader</a>(xml)</em>;
MovieLibrary lib = <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXB.html#unmarshal(java.io.Reader, java.lang.Class)" class="javadoc">JAXB.unmarshall</a>(<em>reader</em>, MovieLibrary.class);
</code></pre><p class="subSecExplanation">Note that JAXB will ignore any character encoding set in the <a href="#" id="tl-d2e4111" class="dottedTooltip" onclick="return tlClick('tl-d2e4111','pp-d2e4138');" onmouseover="return tlOver('tl-d2e4111','pp-d2e4138');" onmouseout="return tlOut('tl-d2e4111','pp-d2e4138');">XML prolog</a>.</p></div></div><div id="colla_stringwriting" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="stringwriting.xhtml#stringwriting" name="stringwriting">String Writing</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('stringwriting');">How to Serialize XML Into a String</a></div></div></div><div class="subSecRow2" id="sec_stringwriting" style="display: none"><div class="subSecHead" id="sechd_stringwriting"><a class="multipageHeadLink" href="stringwriting.xhtml#stringwriting" name="stringwriting">String Writing</a></div><div class="subSecContent" id="seccnt_stringwriting"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('stringwriting');">How to Serialize XML Into a String</a></div><p class="subSecExplanation">In general, it is <em>not recommended to serialize XML into a String</em>. XML is defined as a <em>binary format</em>, and ideally you should write handle it as such. When storing an 'XML string' you need to be aware of the character encoding defined in the <a href="#" id="tl-d2e4134" class="dottedTooltip" onclick="return tlClick('tl-d2e4134','pp-d2e4138');" onmouseover="return tlOver('tl-d2e4134','pp-d2e4138');" onmouseout="return tlOut('tl-d2e4134','pp-d2e4138');">XML prolog</a>. If you write your 'XML string' in the wrong encoding you will run into trouble.</p><p class="subSecExplanation">Now, after the obligatory warning, it is possible and actually quite easy to write your JAXB tree into an 'XML string': </p><pre class="subSecCode"><code>MovieLibrary ml = <span class="abstract">...</span>;

<a href="http://java.sun.com/javase/6/docs/api/java/io/StringWriter.html" class="javadoc">StringWriter</a> writer = new <a href="http://java.sun.com/javase/6/docs/api/java/io/StringWriter.html#StringWriter()" class="javadoc">StringWriter</a>();
<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXB.html#marshal(java.lang.Object, java.io.Writer)" class="javadoc">JAXB.marshall</a>(ml, <em>writer</em>);
String <em>xmlText = writer.<a href="http://java.sun.com/javase/6/docs/api/java/io/StringWriter.html#toString()" class="javadoc">toString</a>()</em>;
</code></pre></div></div><div id="colla_xpath" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="xpath.xhtml#xpath" name="xpath">XPath</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('xpath');">How to Use XPath on JAXB Content Trees</a></div></div></div><div class="subSecRow1" id="sec_xpath" style="display: none"><div class="subSecHead" id="sechd_xpath"><a class="multipageHeadLink" href="xpath.xhtml#xpath" name="xpath">XPath</a></div><div class="subSecContent" id="seccnt_xpath"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('xpath');">How to Use XPath on JAXB Content Trees</a></div><p class="subSecExplanation">Java's <a href="#" id="tl-d2e4198" class="dottedTooltip" onclick="return tpcClick('tl-d2e4198','pp-d2e53');" onmouseover="return tpcOver('tl-d2e4198','pp-d2e53');" onmouseout="return tpcOut('tl-d2e4198','pp-d2e53');">XPath</a> engine is not able to use JAXB content trees directly. You either need to convert it to a DOM tree or to a binary XML document first. The following example shows you how to use DOM for running XPath:</p><pre class="subSecCode"><code>MovieLibrary library = <span class="abstract">...</span>;

<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html" class="javadoc">JAXBContext</a> ctx = <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html#newInstance(java.lang.Class...)" class="javadoc">JAXBContext.newInstance</a>(MovieLibrary.class);
<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html" class="javadoc">Marshaller</a> marshaller = ctx.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html#createMarshaller()" class="javadoc">createMarshaller</a>();

<a href="http://java.sun.com/javase/6/docs/api/javax/xml/parsers/DocumentBuilderFactory.html" class="javadoc">DocumentBuilderFactory</a> domFactory = <a href="http://java.sun.com/javase/6/docs/api/javax/xml/parsers/DocumentBuilderFactory.html#newInstance()" class="javadoc">DocumentBuilderFactory.newInstance</a>();
<a href="http://java.sun.com/javase/6/docs/api/javax/xml/parsers/DocumentBuilder.html" class="javadoc">DocumentBuilder</a> domBuilder = domFactory.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/parsers/DocumentBuilderFactory.html#newDocumentBuilder()" class="javadoc">newDocumentBuilder</a>();
<a href="http://java.sun.com/javase/6/docs/api/org/w3c/dom/Document.html" class="javadoc">Document</a> doc = domBuilder.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/parsers/DocumentBuilder.html#newDocument()" class="javadoc">newDocument</a>();
<em>marshaller.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html#marshal(java.lang.Object, org.w3c.dom.Node)" class="javadoc">marshal</a>(library, doc)</em>;

<a href="http://java.sun.com/javase/6/docs/api/javax/xml/xpath/XPathFactory.html" class="javadoc">XPathFactory</a> factory = <a href="http://java.sun.com/javase/6/docs/api/javax/xml/xpath/XPathFactory.html#newInstance()" class="javadoc">XPathFactory.newInstance</a>();
<a href="http://java.sun.com/javase/6/docs/api/javax/xml/xpath/XPath.html" class="javadoc">XPath</a> xpath = factory.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/xpath/XPathFactory.html#newXPath()" class="javadoc">newXPath</a>();

<a href="http://java.sun.com/javase/6/docs/api/org/w3c/dom/NodeList.html" class="javadoc">NodeList</a> list = (<a href="http://java.sun.com/javase/6/docs/api/org/w3c/dom/NodeList.html" class="javadoc">NodeList</a>) <em>xpath.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/xpath/XPath.html#evaluate(java.lang.String, java.lang.Object, javax.xml.namespace.QName)" class="javadoc">evaluate</a>(</em>
          <em>"/movieLibrary/collection[releaseYear &lt; 1980]/title",</em>
          <em>doc, <a href="http://java.sun.com/javase/6/docs/api/javax/xml/xpath/XPathConstants.html#NODESET" class="javadoc">XPathConstants.NODESET</a>)</em>;
for (int i = 0; i &lt; list.<a href="http://java.sun.com/javase/6/docs/api/org/w3c/dom/NodeList.html#getLength()" class="javadoc">getLength</a>(); i++)  <span class="cmt">// print list of movies older than 1980</span>
  System.out.println(list.<a href="http://java.sun.com/javase/6/docs/api/org/w3c/dom/NodeList.html#item(int)" class="javadoc">item</a>(i).<a href="http://java.sun.com/javase/6/docs/api/org/w3c/dom/Node.html#getTextContent()" class="javadoc">getTextContent</a>());
</code></pre><p class="subSecExplanation">An alternative for running 'real' XPath expressions over the XML is to use <a href="http://commons.apache.org/jxpath/">JXPath</a>, which allows you to run XPath expressions over Java object trees.</p></div></div><div id="colla_xslt" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="xslt.xhtml#xslt" name="xslt">XSLT</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('xslt');">How to Use JAXB with XSLT</a></div></div></div><div class="subSecRow2" id="sec_xslt" style="display: none"><div class="subSecHead" id="sechd_xslt"><a class="multipageHeadLink" href="xslt.xhtml#xslt" name="xslt">XSLT</a></div><div class="subSecContent" id="seccnt_xslt"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('xslt');">How to Use JAXB with XSLT</a></div><p class="subSecExplanation">Java's <a href="#" id="tl-d2e4350" class="dottedTooltip" onclick="return tpcClick('tl-d2e4350','pp-d2e75');" onmouseover="return tpcOver('tl-d2e4350','pp-d2e75');" onmouseout="return tpcOut('tl-d2e4350','pp-d2e75');">XSLT</a> framework (TrAX) can use JAXB content trees as input or output of XSLT transformations. You can find the required helper classes <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/util/JAXBSource.html" class="javadoc">JAXBSource</a> and <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/util/JAXBResult.html" class="javadoc">JAXBResult</a> in the <span class="idf">javax.xml.bind.util</span> package.<br/> The following example transforms a <span class="idf">MovieLibrary</span> document to another <span class="idf">MovieLibrary</span> using a XSLT file:</p><pre class="subSecCode"><code>MovieLibrary library = <span class="abstract">...</span>;

<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html" class="javadoc">JAXBContext</a> ctx = <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html#newInstance(java.lang.Class...)" class="javadoc">JAXBContext.newInstance</a>(MovieLibrary.class);
<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBSource.html" class="javadoc">JAXBSource</a> src = <em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/util/JAXBSource.html#JAXBSource(javax.xml.bind.JAXBContext, java.lang.Object)" class="javadoc">new JAXBSource</a>(ctx, library)</em>;
<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBResult result.html" class="javadoc">JAXBResult result</a> = <em><a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/util/JAXBResult.html#JAXBResult(javax.xml.bind.JAXBContext)" class="javadoc">new JAXBResult</a>(ctx)</em>;

<a href="http://java.sun.com/javase/6/docs/api/javax/xml/transform/TransformerFactory.html" class="javadoc">TransformerFactory</a> factory = <a href="http://java.sun.com/javase/6/docs/api/javax/xml/transform/TransformerFactory.html#newInstance()" class="javadoc">TransformerFactory.newInstance</a>();
<a href="http://java.sun.com/javase/6/docs/api/javax/xml/transform/Transformer.html" class="javadoc">Transformer</a> transformer = factory.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/transform/TransformerFactory.html#newTransformer()" class="javadoc">newTransformer</a>(<a href="http://java.sun.com/javase/6/docs/api/javax/xml/transform/stream/StreamSource.html#StreamSource(java.io.File)" class="javadoc">new StreamSource</a>(new File("myTemplate.xslt")));
<em>transformer.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/transform/Transformer.html#transform(javax.xml.transform.Source, javax.xml.transform.Result)" class="javadoc">transform</a>(src, result)</em>;

MovieLibrary modifiedLibrary = (MovieLibrary) <em>result.<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/util/JAXBResult.html#getResult()" class="javadoc">getResult</a>()</em>;
</code></pre><p class="subSecExplanation">Using <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/util/JAXBSource.html" class="javadoc">JAXBSource</a> it is also possible to provide the stylesheet itself as JAXB content tree.</p></div></div><div id="colla_performance" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="performance.xhtml#performance" name="performance">Performance</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('performance');">How to Improve Performance</a></div></div></div><div class="subSecRow1" id="sec_performance" style="display: none"><div class="subSecHead" id="sechd_performance"><a class="multipageHeadLink" href="performance.xhtml#performance" name="performance">Performance</a></div><div class="subSecContent" id="seccnt_performance"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('performance');">How to Improve Performance</a></div><p class="subSecExplanation">Consider the following things:</p><ul class="subSecList"><li>The static helper methods in the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXB.html" class="javadoc">JAXB</a> class (<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXB.html#marshal(java.lang.Object, java.io.Writer)" class="javadoc">JAXB.marshal</a> and <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXB.html#unmarshal(java.io.File, java.lang.Class)" class="javadoc">JAXB.unmarshall</a>) should be avoided if you need to invoke them repeatedly. Instead, create a <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html" class="javadoc">JAXBContext</a> instance once and work with the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html" class="javadoc">Marshaller</a> and <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Unmarshaller.html" class="javadoc">Unmarshaller</a> interfaces.</li><li>Make sure you have only a single <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html" class="javadoc">JAXBContext</a> instance and share it across objects and threads.</li><li>Don't use schema validation (if possible).</li><li>Check that you use the best source or destination for the serialization/deserialization process. For example, if you want to transmit XML over the net, write it directly into the connection's <span class="idf">OutputStream</span>. Try to avoid temporary storage of the XML using ByteArray streams or in DOM trees.</li><li>If the document contains binary data, use a XOP transport if possible.</li><li>If you are sure you can't reach your performance target using JAXB, switch to the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamReader.html" class="javadoc">XMLStreamReader</a>/<a href="http://java.sun.com/javase/6/docs/api/javax/xml/stream/XMLStreamWriter.html" class="javadoc">XMLStreamWriter</a> interfaces (StAX API) for those parts that are too slow. Note that using this low-level API can be a lot more work than using JAXB, and getting the code to work right in all possible situations (e.g. comments in the middle of an XML text) is even more difficult.</li></ul></div></div><div id="colla_multithreading" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="multithreading.xhtml#multithreading" name="multithreading">Multithreading</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('multithreading');">How to Write Thread-safe Code with JAXB</a></div></div></div><div class="subSecRow2" id="sec_multithreading" style="display: none"><div class="subSecHead" id="sechd_multithreading"><a class="multipageHeadLink" href="multithreading.xhtml#multithreading" name="multithreading">Multithreading</a></div><div class="subSecContent" id="seccnt_multithreading"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('multithreading');">How to Write Thread-safe Code with JAXB</a></div><p class="subSecExplanation">The rules for JAXB in a multi-threaded environment are very simple: you can share the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html" class="javadoc">JAXBContext</a> object among threads. Doing so will also improve performance, as the construction of the context may be expensive. All other objects, including <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html" class="javadoc">Marshaller</a> and <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Unmarshaller.html" class="javadoc">Unmarshaller</a>, are not thread-safe and must not be shared. The static helper methods in the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXB.html" class="javadoc">JAXB</a> class can be used from several threads, of course.<br/> In practice, this means that if you need a <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html" class="javadoc">JAXBContext</a> instance, you should probably store in a static member.</p></div></div></div><div id="sidecolumn">
  	<div><h3>Useful Links</h3><div class="sidecolumnSubTitleLine"/>
  			<a href="http://en.wikipedia.org/wiki/Java_Architecture_for_XML_Binding">JAXB on Wikipedia</a><br/>
  			<a href="https://jaxb.dev.java.net/">JAXB Reference Implementation (Metro)</a><br/>
  			<a href="http://jcp.org/en/jsr/detail?id=222">JSR-222 (JAXB)</a><br/>
  			<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/package-summary.html">Java 6 API javax.xml.bind</a>
  		</div>
  </div></div></div><div id="footer"><div id="footer-content"><div id="footer-left"><div class="footerLine"><a href="/">Home</a> - <a href="/about">About Jarfiller</a> - <a href="/imprint.xhtml">Imprint</a></div><div class="footerLine">Please send feedback and corrections to <a href="mailto:tim@tjansen.de">tim@<span style="display: none">got you</span>tjansen.de</a>.</div><div class="footerLine"><a href="http://www.twitter.com/timjansen">Follow</a> me on Twitter.</div><div class="copyrightLine">© 2010 Tim Jansen; content licensed under <a href="http://creativecommons.org/licenses/by/3.0/us/">cc-by</a>; example source code is public domain
				</div></div><div id="footer-right"><a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/"><img alt="Creative Commons License" style="border-width:0" src="../../images/ext/cc-by-88x31.png"/></a></div></div></div><div id="navbar" onclick="return navToggle();" onmouseover="document.getElementById('navbar').className='mouseover';" onmouseout="document.getElementById('navbar').className='';"/><div id="navcontainer"><div id="navlinks"><div id="navclosebar"><a href="#" onclick="return navClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div><div id="navpositionbar" class="navpositionbar"/><h2 id="navtitle">JAXB Guide</h2><a id="nav_jaxboverview" class="navseclink" href="#jaxboverview" onclick="if (event.button == 0) return goTo('#jaxboverview', true); else return true;">Overview</a><a id="nav_intro" class="navsublink" href="#intro" onclick="if (event.button == 0) return goTo('#intro', true); else return true;">Intro</a><a id="nav_usecases" class="navsublink" href="#usecases" onclick="if (event.button == 0) return goTo('#usecases', true); else return true;">When should JAXB be used?</a><a id="nav_requirements" class="navsublink" href="#requirements" onclick="if (event.button == 0) return goTo('#requirements', true); else return true;">What do you need for JAXB?</a><a id="nav_mappingclasses" class="navseclink" href="#mappingclasses" onclick="if (event.button == 0) return goTo('#mappingclasses', true); else return true;">Mapping Classes</a><a id="nav_schemafirst" class="navsublink" href="#schemafirst" onclick="if (event.button == 0) return goTo('#schemafirst', true); else return true;">Schema first?</a><a id="nav_xjc" class="navsublink" href="#xjc" onclick="if (event.button == 0) return goTo('#xjc', true); else return true;">xjc</a><a id="nav_propertybased" class="navsublink" href="#propertybased" onclick="if (event.button == 0) return goTo('#propertybased', true); else return true;">Property-based Beans</a><a id="nav_fieldbased" class="navsublink" href="#fieldbased" onclick="if (event.button == 0) return goTo('#fieldbased', true); else return true;">Field-based beans</a><a id="nav_exampleschema" class="navsublink" href="#exampleschema" onclick="if (event.button == 0) return goTo('#exampleschema', true); else return true;">XML Schema</a><a id="nav_readingandwriting" class="navseclink" href="#readingandwriting" onclick="if (event.button == 0) return goTo('#readingandwriting', true); else return true;">Reading and Writing XML</a><a id="nav_writingxml" class="navsublink" href="#writingxml" onclick="if (event.button == 0) return goTo('#writingxml', true); else return true;">Writing XML</a><a id="nav_writingxmlresult" class="navsublink" href="#writingxmlresult" onclick="if (event.button == 0) return goTo('#writingxmlresult', true); else return true;">Result</a><a id="nav_readingxml" class="navsublink" href="#readingxml" onclick="if (event.button == 0) return goTo('#readingxml', true); else return true;">Reading XML</a><a id="nav_supportedtypes" class="navsublink" href="#supportedtypes" onclick="if (event.button == 0) return goTo('#supportedtypes', true); else return true;">Supported Types</a><a id="nav_howtomapping" class="navseclink" href="#howtomapping" onclick="if (event.button == 0) return goTo('#howtomapping', true); else return true;">How to... Mapping</a><a id="nav_namespaces" class="navsublink" href="#namespaces" onclick="if (event.button == 0) return goTo('#namespaces', true); else return true;">How to Use XML Namespaces</a><a id="nav_attributes" class="navsublink" href="#attributes" onclick="if (event.button == 0) return goTo('#attributes', true); else return true;">How to Declare XML Attributes</a><a id="nav_requiredelements" class="navsublink" href="#requiredelements" onclick="if (event.button == 0) return goTo('#requiredelements', true); else return true;">How to Require XML Elements</a><a id="nav_elementnames" class="navsublink" href="#elementnames" onclick="if (event.button == 0) return goTo('#elementnames', true); else return true;">How to Specify a Different Name for an Element</a><a id="nav_preventingserialization" class="navsublink" href="#preventingserialization" onclick="if (event.button == 0) return goTo('#preventingserialization', true); else return true;">How to Prevent Serialization of Properties or Fields</a><a id="nav_propertyorder" class="navsublink" href="#propertyorder" onclick="if (event.button == 0) return goTo('#propertyorder', true); else return true;">How to Specify an Order for Properties/Fields</a><a id="nav_choice" class="navsublink" href="#choice" onclick="if (event.button == 0) return goTo('#choice', true); else return true;">How to Have Mixed XML Elements in a Single List (Choice)</a><a id="nav_simpletypes" class="navsublink" href="#simpletypes" onclick="if (event.button == 0) return goTo('#simpletypes', true); else return true;">How to Implement a Simple Type</a><a id="nav_xmladapter" class="navsublink" href="#xmladapter" onclick="if (event.button == 0) return goTo('#xmladapter', true); else return true;">How to Map Java Types to XML</a><a id="nav_jaxbelement" class="navsublink" href="#jaxbelement" onclick="if (event.button == 0) return goTo('#jaxbelement', true); else return true;">How to use JAXBElement</a><a id="nav_howtoserialization" class="navseclink" href="#howtoserialization" onclick="if (event.button == 0) return goTo('#howtoserialization', true); else return true;">How to... Serialization</a><a id="nav_jaxbcontext" class="navsublink" href="#jaxbcontext" onclick="if (event.button == 0) return goTo('#jaxbcontext', true); else return true;">How to Use JAXBContext</a><a id="nav_customizedserialization" class="navsublink" href="#customizedserialization" onclick="if (event.button == 0) return goTo('#customizedserialization', true); else return true;">How to Customize the Serialization / use JAXB 2.0</a><a id="nav_schemavalidation" class="navsublink" href="#schemavalidation" onclick="if (event.button == 0) return goTo('#schemavalidation', true); else return true;">How to Validate Against an XML Schema</a><a id="nav_prettyprinting" class="navsublink" href="#prettyprinting" onclick="if (event.button == 0) return goTo('#prettyprinting', true); else return true;">How to Create Nicely Formatted XML</a><a id="nav_xmlfragments" class="navsublink" href="#xmlfragments" onclick="if (event.button == 0) return goTo('#xmlfragments', true); else return true;">How to Create XML Fragments</a><a id="nav_encoding" class="navsublink" href="#encoding" onclick="if (event.button == 0) return goTo('#encoding', true); else return true;">How to Change the Charset Encoding of the XML Output</a><a id="nav_consumer" class="navsublink" href="#consumer" onclick="if (event.button == 0) return goTo('#consumer', true); else return true;">How to Send the Content Tree to a DOM/SAX Consumer</a><a id="nav_domtree" class="navsublink" href="#domtree" onclick="if (event.button == 0) return goTo('#domtree', true); else return true;">How to Read from a DOM Tree</a><a id="nav_stringreading" class="navsublink" href="#stringreading" onclick="if (event.button == 0) return goTo('#stringreading', true); else return true;">How to Read from a String</a><a id="nav_stringwriting" class="navsublink" href="#stringwriting" onclick="if (event.button == 0) return goTo('#stringwriting', true); else return true;">How to Serialize XML Into a String</a><a id="nav_xpath" class="navsublink" href="#xpath" onclick="if (event.button == 0) return goTo('#xpath', true); else return true;">How to Use XPath on JAXB Content Trees</a><a id="nav_xslt" class="navsublink" href="#xslt" onclick="if (event.button == 0) return goTo('#xslt', true); else return true;">How to Use JAXB with XSLT</a><a id="nav_performance" class="navsublink" href="#performance" onclick="if (event.button == 0) return goTo('#performance', true); else return true;">How to Improve Performance</a><a id="nav_multithreading" class="navsublink" href="#multithreading" onclick="if (event.button == 0) return goTo('#multithreading', true); else return true;">How to Write Thread-safe Code with JAXB</a></div></div><div id="popups"><div id="pp-d2e568" class="tooltip">JAXB uses plain Java beans to represent the XML document. Data can be either stored in properties, as shown in this section, or in public fields.<br/>In order to map the bean onto a specific XML schema, it supports a large number of annotations to give you full control over the XML that will be generated. However, if the exact XML layout is a concern for you (e.g. whether a field will be stored as an attribute or as an element), you are usually better off writing the XML Schema first and use <span class="idf">xjc</span>.</div><div id="pp-d2e614" class="tooltip">Every serializable element needs a <span class="idf">public</span> constructor without arguments that JAXB can use to create new instances. You are free to add additional constructors, of course.</div><div id="pp-d2e758" class="tooltip">In JAXB, you can either use bean properties or public fields for you data. You can also mix both of them. The created XML will always be the same.<br/> You can override the automatic creation of elements for both types of members using the <span class="idf">@XmlAccessorType</span> annotation.</div><div id="pp-d2e898" class="tooltip">Since JAXB 2.1, serializing your Java class tree into a XML document is really simple. Just call the static <span class="idf">marshal</span> method and you're done.<br/> Only in more complicated scenarios you will need to create <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html" class="javadoc">JAXBContext</a> and <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html" class="javadoc">Marshaller</a> separately. This will be shown in the How-To sections below. </div><div id="pp-d2e939" class="tooltip"> The <span class="idf">marshal</span> method writes the XML structure represented by the first argument into the given file or stream. It is a short cut added in JAXB 2.1 that replaces the complicated setup mechanism of older versions. </div><div id="pp-d2e1013" class="tooltip">Since JAXB 2.1, reading the XML document is as simple as writing. Just call the static <span class="idf">marshal</span> method and you're done.<br/> Only in more complicated scenarios you will need to create <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html" class="javadoc">JAXBContext</a> and <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Unmarshaller.html" class="javadoc">Unmarshaller</a> separately. This will be shown in the How-To sections below. </div><div id="pp-d2e1040" class="tooltip"> The <span class="idf">unmarshal</span> method reads the XML structure represented by the first argument will and creates an object tree using the class specified in the second argument. It is a short cut added since JAXB 2.1 that replaces the complicated setup mechanism of older versions. </div><div id="pp-d2e1065" class="tooltip">The Java types in this section's tables can be translated directly into corresponding XML types. You do not need to convert them manually. All other types are treated as beans by default. Alternatively you could also write an <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/adapters/XmlAdapter.html" class="javadoc">@XmlAdapter</a> to map a type and declare it with a <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/adapters/XmlJavaTypeAdapter.html" class="javadoc">@XmlJavaTypeAdapter</a> annotation.</div><div id="pp-d2e1592" class="tooltip">Built-in types (<span class="idf">int</span>, <span class="idf">boolean</span>, <span class="idf">long</span>, <span class="idf">float</span>...) are always required, as they can not be null. If you want to make the XML elements optional you must use the corresponding wrapper type (<span class="idf">Integer</span>, <span class="idf">Boolean</span>, <span class="idf">Long</span>, <span class="idf">Float</span>...).</div><div id="pp-d2e3315" class="tooltip">Well, that's not entirely true. But creating the context by package works only if you either have an <span class="idf">ObjectFactory</span> class, which is a helper class generated by , or a file called <span class="idf">jaxb.index</span> containing all class names. See the JavaDocs for details.<br/> If you create the Java classes by hand, you usually don't have neither <span class="idf">ObjectFactory</span> nor <span class="idf">jaxb.index</span>, and it does not make much sense to create those files manually instead of just listing the classes in the code. So, effectively, creating the context by package is only a good option for <a href="#" id="tl-d2e3332" class="dottedTooltip" onclick="return tlClick('tl-d2e3332','pp-d2e332');" onmouseover="return tlOver('tl-d2e3332','pp-d2e332');" onmouseout="return tlOut('tl-d2e3332','pp-d2e332');">xjc</a>-generated code.</div><div id="pp-d2e3413" class="tooltip">The <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html" class="javadoc">JAXBContext</a> represents the mapping between Java classes and XML. You can either specify one or more root classes (it supports varargs) or the name of the package containing the mapping classes. <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXBContext.html" class="javadoc">JAXBContext</a> is multi-thread safe and can be shared among threads (note that you can not share <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Marshaller.html" class="javadoc">Marshaller</a> and <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/Unmarshaller.html" class="javadoc">Unmarshaller</a>).</div><div id="pp-d2e3453" class="tooltip"><span class="idf">xjc</span> does not set it if the root element is defined using a stand-alone complex type instead of an inline type. Then <span class="idf">xjc</span> can not be sure whether all uses of the complex type are really as root type, and thus it can not write the <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/annotation/XmlRootElement.html" class="javadoc">@XmlRootElement</a> annotation.</div><div id="pp-d2e332" class="tooltip"><span class="idf">xjc</span> is a compiler that takes a XML schema and generates annotated Java classes that represent this schema. You can find <span class="idf">xjc</span> in your JDK's <span class="idf">bin</span> directory since JDK6.</div><div id="pp-d2e358" class="tooltip"><span class="idf">schemagen</span> takes Java classes with JAXB's annotations and generates an XML schema for them. This is useful if you want to use the XML document in other applications. You can find <span class="idf">schemagen</span> in your JDK's <span class="idf">bin</span> directory (since JDK6).</div><div id="pp-d2e539" class="tooltip">The path of the directory to store the generated source in.</div><div id="pp-d2e546" class="tooltip">The package name for the Java code to generate. If you don't specify the <span class="idf">-p</span> option, <span class="idf">xjc</span> will try to derive a package name from the XML Schema's namespace URI.</div><div id="pp-d2e559" class="tooltip">The path to the XML schema you want to compile. You can specify more than one schema. If this is a directory, all schemas in the directory will be compiled.</div><div id="pp-d2e4138" class="tooltip">The prolog is the optional first line of a XML file, and looks like "&lt;?xml bla bla bla?&gt;". Most importantly, it defines the XML version ("version") and the character encoding ("encoding") of the file.<br/> If a document has no prolog, the character encoding is either UTF-8 or UTF-16. The processor will detect the encoding by inspecting the document's first four bytes.</div><div id="pp-d2e20" class="topic"><div class="topicPara"><span class="topicHead">XML Schema</span></div><div class="topicPara">An XML Schema is used to describe the structure of a XML document. The schema itself is a also XML document,
  		called XML Schema Definition (XSD).</div><div class="topicPara"><span class="topicLinkHead">Homepage: </span><a href="http://www.w3.org/XML/Schema">XML Schema Homepage (W3C)</a><br/><span class="topicLinkHead">Wikipedia: </span><a href="http://en.wikipedia.org/wiki/XML_Schema_(W3C)">XML Schema (W3C)</a></div><div class="topicPara"><span class="topicLinkHead">Specification: </span><a href="http://www.w3.org/TR/xmlschema-0/">Part 0</a>, <a href="http://www.w3.org/TR/2004/REC-xmlschema-1-20041028/structures.html">Part 1</a>, <a href="http://www.w3.org/TR/2004/REC-xmlschema-2-20041028/datatypes.html">Part 2</a></div></div><div id="pp-d2e53" class="topic"><div class="topicPara"><span class="topicHead">XPath</span></div><div class="topicPara">XPath is a query language for XML documents.</div><div class="topicPara"><span class="topicLinkHead">Wikipedia: </span><a href="http://en.wikipedia.org/wiki/XPath">XPath</a></div><div class="topicPara"><span class="topicLinkHead">Specification: </span><a href="http://www.w3.org/TR/xpath/">XPath 1.0</a>, <a href="http://www.w3.org/TR/xpath20/">XPath 2.0</a></div></div><div id="pp-d2e75" class="topic"><div class="topicPara"><span class="topicHead">XSLT</span></div><div class="topicPara">XSLT is a language for transforming XML documents into other XML documents, HTML or plain text.</div><div class="topicPara"><span class="topicLinkHead">Homepage: </span><a href="http://www.w3.org/Style/XSL/">XSL Family (W3C)</a><br/><span class="topicLinkHead">Wikipedia: </span><a href="http://en.wikipedia.org/wiki/XSLT">XSLT</a></div><div class="topicPara"><span class="topicLinkHead">Specification: </span><a href="http://www.w3.org/TR/xslt">XSLT 1.0</a>, <a href="http://www.w3.org/TR/xslt20/">XSLT 2.0</a></div></div><div id="ttCloseBar" class="closeBar"><a href="#" onclick="return tlClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div><div id="topicCloseBar" class="closeBar"><a href="#" onclick="return tpcClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div></div></body></html>