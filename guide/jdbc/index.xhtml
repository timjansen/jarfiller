<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/1999/xhtml" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:page="http://tjansen.de/refPage" xmlns:i="http://tjansen.de/internal"><head><title>JDBC Guide</title><meta http-equiv="X-UA-Compatible" content="chrome=1"/><meta http-equiv="content-language" content="en"/><link rel="shortcut icon" href="../../images/favicon.png" type="image/png"/><link rel="stylesheet" type="text/css" href="../../style/style.css"/><script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-6791190-2']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
})();
</script><script type="text/javascript" src="../../js/all.js"/></head><body id="body"><div id="visibleContent"><div id="top"><a href="/"><img src="../../images/titlebar.png" alt="Jarfiller.com"/></a></div><div id="titleArea"><h1>JDBC Guide</h1><p id="titleIntro">Use JDBC to Access Relational Database</p></div><div id="main"><div id="bodycolumn"><div id="options">Options: <a href="#" onclick="return navToggle();">Table of Content</a>, <a href="overview.xhtml">Multi-Page Version</a></div><h2 id="sec_overview" class="sectionHead"><a name="overview">Overview</a></h2><div class="sectionExpandAll">
			(<a href="#" onclick="&#xA;return showAll([['colla_usecases','sec_usecases'],['colla_requirements','sec_requirements'], null]); &#xA;">expand everything</a>)
		</div><div class="subSecRow1" id="sec_intro"><div class="subSecHead" id="sechd_intro"><a class="multipageHeadLink" href="overview.xhtml#intro" name="intro">Intro</a></div><div class="subSecContent" id="seccnt_intro"><p class="subSecExplanation"> JDBC is a <em>low-level API</em> to work with <em>SQL-based <a href="http://en.wikipedia.org/wiki/Relational_database_management_system">relational databases</a></em> in Java. Practically all high-level persistence APIs, such as <a href="#" id="tl-d286e500" class="dottedTooltip" onclick="return tpcClick('tl-d286e500','pp-d286e102');" onmouseover="return tpcOver('tl-d286e500','pp-d286e102');" onmouseout="return tpcOut('tl-d286e500','pp-d286e102');">JPA</a>, are built-on top of JDBC. </p><p class="subSecExplanation"> To access a database via JDBC you <em>need a JDBC driver</em> for it. JDBC drivers are widely available for practically all relational databases and usually consist of a single JAR that you need to put into your classpath. </p><p class="subSecExplanation"> JDBC offers you various ways to <em>execute SQL statements</em> and retrieve their results. The <a href="#escape" onclick="if (event.button == 0) return goTo('#escape', true); else return true;">escape syntax</a> helps you to write database-independent SQL. A <a href="#types" onclick="if (event.button == 0) return goTo('#types', true); else return true;">type-mapping</a> defines how to set and retrieve SQL types in Java. </p></div></div><div id="colla_usecases" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="overview.xhtml#usecases" name="usecases">Use cases</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('usecases');">When should you use JDBC for?</a></div></div></div><div class="subSecRow2" id="sec_usecases" style="display: none"><div class="subSecHead" id="sechd_usecases"><a class="multipageHeadLink" href="overview.xhtml#usecases" name="usecases">Use cases</a></div><div class="subSecContent" id="seccnt_usecases"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('usecases');">When should you use JDBC for?</a></div><p class="subSecExplanation">Use JDBC when you..</p><ul class="subSecList"><li>want to write a simple application that just issues some SQL statements, and using a framework causes more trouble that it's worth</li><li>want full control over the database (e.g. for performance reasons)</li><li>need to access an existing legacy database that can not be easily map onto Java classes or requires you to call stored procedures etc</li><li>want to write something that works with any database schema, such as a database viewer</li></ul><h4 class="subSecMiniHeadline">Alternatives</h4><p class="subSecExplanation"> There are many frameworks which make database access less tedious for large and medium applications. Almost all of them are using JDBC internally, and require you to know at least something about JDBC (you need to configure the <a href="http://java.sun.com/javase/6/docs/api/javax/sql/DataSource.html" class="javadoc">DataSource</a>). These are the most important alternatives:</p><ul class="subSecList"><li><a href="#" id="tl-d286e561" class="dottedTooltip" onclick="return tpcClick('tl-d286e561','pp-d286e102');" onmouseover="return tpcOver('tl-d286e561','pp-d286e102');" onmouseout="return tpcOut('tl-d286e561','pp-d286e102');">JPA</a> is the latest persistence API for Java. It provides a <a href="http://en.wikipedia.org/wiki/Object-relational_mapping">object-relational mapping</a>, but still allows direct database access with SQL. JPA is a part of EJB 3.0 and higher.</li><li><a href="http://ibatis.apache.org">iBATIS</a> is a 'data mapper' which is similar to object-relational mapping, but more flexible. It is a good choice when object-relational mapping is not possible.</li><li><a href="http://en.wikipedia.org/wiki/Java_Data_Objects">JDO</a> is an older API to store objects. Like JPA it offers object-relational mapping, but can also be used with non-relational databases.</li></ul><p class="subSecExplanation">Note that when you write code to run in a framework (such as <a href="http://www.springsource.org/">Spring</a>), the framework may provide its own persistence system which you should consider then. </p></div></div><div id="colla_requirements" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="overview.xhtml#requirements" name="requirements">Requirements</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('requirements');">What do you need for JDBC?</a></div></div></div><div class="subSecRow1" id="sec_requirements" style="display: none"><div class="subSecHead" id="sechd_requirements"><a class="multipageHeadLink" href="overview.xhtml#requirements" name="requirements">Requirements</a></div><div class="subSecContent" id="seccnt_requirements"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('requirements');">What do you need for JDBC?</a></div><p class="subSecExplanation"><em>Java ships with JDBC</em> 3.0 since J2SE 1.4, and with JDBC 4.0 since Java SE 6.0, so you will always have a JDBC implementation. Beside that, you only need a database. <em>Java SE 6.0 includes Java DB</em> which is fine for embedded use. </p></div></div><h2 id="sec_connecting" class="sectionHead"><a name="connecting">Connecting</a></h2><div class="sectionExpandAll">
			(<a href="#" onclick="&#xA;return showAll([['colla_javadb','sec_javadb'],['colla_postgresql','sec_postgresql'],['colla_oracle','sec_oracle'],['colla_exampleschema','sec_exampleschema'], null]); &#xA;">expand everything</a>)
		</div><div class="subSecRow2" id="sec_standalone"><div class="subSecHead" id="sechd_standalone"><a class="multipageHeadLink" href="connecting.xhtml#standalone" name="standalone">Stand-Alone</a><br/>(<a href="#" id="tl-d286e614" class="dottedTooltip" onclick="return tlClick('tl-d286e614','pp-d286e619');" onmouseover="return tlOver('tl-d286e614','pp-d286e619');" onmouseout="return tlOut('tl-d286e614','pp-d286e619');">more</a>)
		</div><div class="subSecContent" id="seccnt_standalone"><pre class="subSecCode"><code><span class="cmt">// Connecting in a stand-alone application (not for EJBs or web applications)</span>

Class.forName("org.apache.derby.jdbc.EmbeddedDriver");   <span class="cmt">// <strong class="warn">driver-specific</strong>, for JDBC &lt;= 3.0 (<a href="#" id="tl-d286e644" class="dottedTooltip" onclick="return tlClick('tl-d286e644','pp-d286e644');" onmouseover="return tlOver('tl-d286e644','pp-d286e644');" onmouseout="return tlOut('tl-d286e644','pp-d286e644');">more</a>)</span>

String url = "jdbc:derby:JarfillerDB;create=true";       <span class="cmt">// <strong class="warn">driver-specific</strong> (<a href="#" id="tl-d286e660" class="dottedTooltip" onclick="return tlClick('tl-d286e660','pp-d286e660');" onmouseover="return tlOver('tl-d286e660','pp-d286e660');" onmouseout="return tlOut('tl-d286e660','pp-d286e660');">more</a>)</span>
<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection = <a href="http://java.sun.com/javase/6/docs/api/java/sql/DriverManager.html" class="javadoc">DriverManager</a>.<a href="http://java.sun.com/javase/6/docs/api/java/sql/DriverManager.html#getConnection(java.lang.String)" class="javadoc"><em>getConnection</em></a>(url);
try {
    <span class="cmt">// use connection ...</span>
}
finally {
    connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#close()" class="javadoc"><em>close</em></a>();
}
</code></pre></div></div><div class="subSecRow1" id="sec_jeecontainer"><div class="subSecHead" id="sechd_jeecontainer"><a class="multipageHeadLink" href="connecting.xhtml#jeecontainer" name="jeecontainer">JEE Container</a><br/>(<a href="#" id="tl-d286e703" class="dottedTooltip" onclick="return tlClick('tl-d286e703','pp-d286e708');" onmouseover="return tlOver('tl-d286e703','pp-d286e708');" onmouseout="return tlOut('tl-d286e703','pp-d286e708');">more</a>)
		</div><div class="subSecContent" id="seccnt_jeecontainer"><pre class="subSecCode"><code><span class="cmt">// In EJBs and servlets, <em>use the <a href="http://java.sun.com/javase/6/docs/api/javax/sql/DataSource.html" class="javadoc">DataSource</a></em> provided by the container!</span>
package com.jarfiller.example;

import <a href="http://java.sun.com/javase/6/docs/api/javax/sql/package-summary.html" class="javadoc">javax.sql.*</a>;
import <a href="http://java.sun.com/javase/6/docs/api/java/sql/package-summary.html" class="javadoc">java.sql.*</a>;
import <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/package-summary.html" class="javadoc">javax.servlet.http.*</a>;
import <a href="http://java.sun.com/javase/6/docs/api/java/sql/javax.annotation.*.html" class="javadoc">javax.annotation.*</a>;

public class DBServlet extends <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServlet.html" class="javadoc">HttpServlet</a> {

    <em><a href="http://java.sun.com/javase/6/docs/api/javax/annotations/Resource.html" class="javadoc">@Resource</a>(name="jdbc/db")</em>
    private <a href="http://java.sun.com/javase/6/docs/api/javax/sql/DataSource.html" class="javadoc"><em>DataSource</em></a> db;                               <span class="cmt">// inject database connection (<a href="#" id="tl-d286e784" class="dottedTooltip" onclick="return tlClick('tl-d286e784','pp-d286e784');" onmouseover="return tlOver('tl-d286e784','pp-d286e784');" onmouseout="return tlOut('tl-d286e784','pp-d286e784');">more</a>)</span>

    protected void <a href="http://java.sun.com/javase/6/docs/api/java/sql/doGet.html" class="javadoc">doGet</a>(<a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletRequest.html" class="javadoc">HttpServletRequest</a> request, <a href="http://java.sun.com/javaee/5/docs/api/javax/servlet/http/HttpServletResponse.html" class="javadoc">HttpServletResponse</a> response) {
        try {
            <a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection = <em>db.<a href="http://java.sun.com/javase/6/docs/api/javax/sql/DataSource.html#getConnection()" class="javadoc">getConnection</a>()</em>;  <span class="cmt">// use injected <span class="idf">DataSource</span></span>

            <span class="cmt">// <span class="abstract">do something with the connection ...</span></span>

        }
        catch (<a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLException.html" class="javadoc">SQLException</a> e) {
            throw new <a href="http://java.sun.com/javase/6/docs/api/java/lang/RuntimeException.html" class="javadoc">RuntimeException</a>(e);               <span class="cmt">// simple error handling (<a href="#" id="tl-d286e858" class="dottedTooltip" onclick="return tlClick('tl-d286e858','pp-d286e858');" onmouseover="return tlOver('tl-d286e858','pp-d286e858');" onmouseout="return tlOut('tl-d286e858','pp-d286e858');">more</a>)</span>
        }
        finally {
            con.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#close()" class="javadoc"><em>close</em></a>();                                 <span class="cmt">// close when done</span>
        }
    }
}
</code></pre></div></div><div id="colla_javadb" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="connecting.xhtml#javadb" name="javadb">Java DB</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('javadb');">Connecting to Java DB</a></div></div></div><div class="subSecRow2" id="sec_javadb" style="display: none"><div class="subSecHead" id="sechd_javadb"><a class="multipageHeadLink" href="connecting.xhtml#javadb" name="javadb">Java DB</a></div><div class="subSecContent" id="seccnt_javadb"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('javadb');">Connecting to Java DB</a></div><p class="subSecExplanation">Java DB is a version of Apache Derby that ships with Java SE since version 6. It can be either used as <a href="#" id="tl-d286e903" class="dottedTooltip" onclick="return tlClick('tl-d286e903','pp-d286e7131');" onmouseover="return tlOver('tl-d286e903','pp-d286e7131');" onmouseout="return tlOut('tl-d286e903','pp-d286e7131');">embedded database</a> running inside your application, or as stand-alone <a href="#" id="tl-d286e905" class="dottedTooltip" onclick="return tlClick('tl-d286e905','pp-d286e7137');" onmouseover="return tlOver('tl-d286e905','pp-d286e7137');" onmouseout="return tlOut('tl-d286e905','pp-d286e7137');">database server</a> which can be accessed by several clients simultanously.</p><h4 class="subSecMiniHeadline">Embedded Driver</h4><p class="subSecExplanation"> To use Java DB in embedded mode, you only need to <em>add derby.jar to your classpath</em>. When you installed Java DB with Java SE, you can find it in a separate directory (default on Windows would be "C:\Program Files\Sun\JavaDB"). The class name of the driver is <span class="idf">org.apache.derby.jdbc.EmbeddedDriver</span>: </p><pre class="subSecCode"><code>Class.forName("<em>org.apache.derby.jdbc.EmbeddedDriver</em>");  <span class="cmt">// optional for JDBC 4.0</span>

String url = "<em>jdbc:derby:c:\\tmp\\JarfillerDB;create=true</em>";
<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection = <a href="http://java.sun.com/javase/6/docs/api/java/sql/DriverManager.html" class="javadoc">DriverManager</a>.<a href="http://java.sun.com/javase/6/docs/api/java/sql/DriverManager.html#getConnection(java.lang.String)" class="javadoc">getConnection</a>(url);
</code></pre><p class="subSecExplanation"> This is the format of the JDBC URL for embedded use:</p><div class="svgContainer"><object data="jdbc-derby-url.svg" type="image/svg+xml" width="564" height="124"><img src="jdbc-derby-url.png" width="564" height="124" alt="Derby URL Schema (Embedded)"/></object></div><h4 class="subSecMiniHeadline">Connecting to a Java DB Server (Client Driver)</h4><p class="subSecExplanation"> The client driver allows you to connect to a Java DB server (<a href="#" id="tl-d286e961" class="dottedTooltip" onclick="return tlClick('tl-d286e961','pp-d286e961');" onmouseover="return tlOver('tl-d286e961','pp-d286e961');" onmouseout="return tlOut('tl-d286e961','pp-d286e961');">more</a>). Just add <em>add derby.jar to your classpath</em> and use <span class="idf">org.apache.derby.jdbc.ClientDriver</span> as driver class: </p><pre class="subSecCode"><code>Class.forName("<em>org.apache.derby.jdbc.ClientDriver</em>");  <span class="cmt">// optional for JDBC 4.0</span>

String url = "<em>jdbc:derby://localhost:1527/JarFillerDB2;create=true</em>";
<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection = <a href="http://java.sun.com/javase/6/docs/api/java/sql/DriverManager.html" class="javadoc">DriverManager</a>.<a href="http://java.sun.com/javase/6/docs/api/java/sql/DriverManager.html#getConnection(java.lang.String)" class="javadoc">getConnection</a>(url, "<span class="abstract">user</span>", "<span class="abstract">password</span>");
</code></pre><p class="subSecExplanation"> This is the format of the JDBC URL for clients:</p><div class="svgContainer"><object data="jdbc-derby-client-url.svg" type="image/svg+xml" width="564" height="124"><img src="jdbc-derby-client-url.png" width="564" height="124" alt="Derby URL Schema (Client)"/></object></div></div></div><div id="colla_postgresql" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="connecting.xhtml#postgresql" name="postgresql">PostgreSQL</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('postgresql');">Connecting to PostgreSQL</a></div></div></div><div class="subSecRow1" id="sec_postgresql" style="display: none"><div class="subSecHead" id="sechd_postgresql"><a class="multipageHeadLink" href="connecting.xhtml#postgresql" name="postgresql">PostgreSQL</a></div><div class="subSecContent" id="seccnt_postgresql"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('postgresql');">Connecting to PostgreSQL</a></div><p class="subSecExplanation"><a href="http://www.postgresql.org/">PostgreSQL</a> is one of the oldest open-source database servers. You can find the JDBC driver and documentation as <a href="http://jdbc.postgresql.org/">jdbc.postgresql.org</a>.</p><p class="subSecExplanation"> The JDBC driver is available in versions for JDBC 3.0 (for Java 5) and JDBC (for Java 6). Just put the appropriate JAR into your classpath. The class name of the driver is <span class="idf">org.postgresql.Driver</span>: </p><pre class="subSecCode"><code>Class.forName("<em>org.postgresql.Driver</em>");  <span class="cmt">// optional for JDBC 4.0</span>

String url = "<em>jdbc:postgresql://localhost/JarFillerDB</em>";
<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection = <a href="http://java.sun.com/javase/6/docs/api/java/sql/DriverManager.html" class="javadoc">DriverManager</a>.<a href="http://java.sun.com/javase/6/docs/api/java/sql/DriverManager.html#getConnection(java.lang.String)" class="javadoc">getConnection</a>(url);
</code></pre><p class="subSecExplanation"> This is the format of PostgreSQL's JDBC URL:</p><div class="svgContainer"><object data="jdbc-postgresql-url.svg" type="image/svg+xml" width="564" height="124"><img src="jdbc-postgresql-url.png" width="564" height="124" alt="PostgreSQL URL Schema"/></object></div></div></div><div id="colla_oracle" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="connecting.xhtml#oracle" name="oracle">Oracle</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('oracle');">Connecting to Oracle Database</a></div></div></div><div class="subSecRow2" id="sec_oracle" style="display: none"><div class="subSecHead" id="sechd_oracle"><a class="multipageHeadLink" href="connecting.xhtml#oracle" name="oracle">Oracle</a></div><div class="subSecContent" id="seccnt_oracle"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('oracle');">Connecting to Oracle Database</a></div><p class="subSecExplanation"><a href="http://www.oracle.com">Oracle Database</a> is the most important proprietary database. Three JDBC drivers are available:</p><ul class="subSecList"><li>The <em>Thin driver is a pure Java JDBC driver</em>. It is the driver shown here.</li><li>The <em>OCI driver requires a SQL*Net installation</em> on the machine and uses native code for access.</li><li>KPRB is only used for writing stored procedures and similar database extensions in Java</li></ul><p class="subSecExplanation">You can <em>download the JDBC driver on <a href="http://www.oracle.com">oracle.com</a></em>. Currently there are two major versions, <span class="idf">ojdbc5.jar</span> for JDBC 3.0 / Java 5, and <span class="idf">ojdbc6.jar</span> for JDBC 4.0 / Java 6. Put the appropriate version in to your class path. The class name of the driver is <span class="idf">oracle.jdbc.OracleDriver</span>: </p><pre class="subSecCode"><code>Class.forName("<em>oracle.jdbc.OracleDriver</em>");  <span class="cmt">// optional for JDBC 4.0</span>

String url = "<em>jdbc:oracle:thin:@localhost:XE</em>";
<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection = <a href="http://java.sun.com/javase/6/docs/api/java/sql/DriverManager.html" class="javadoc">DriverManager</a>.<a href="http://java.sun.com/javase/6/docs/api/java/sql/DriverManager.html#getConnection(java.lang.String)" class="javadoc">getConnection</a>(url);
</code></pre><p class="subSecExplanation">This is the format of Oracle's JDBC URL:</p><div class="svgContainer"><object data="jdbc-oracle-url.svg" type="image/svg+xml" width="564" height="124"><img src="jdbc-oracle-url.png" width="564" height="124" alt="Oracle URL Schema"/></object></div></div></div><div id="colla_exampleschema" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="connecting.xhtml#exampleschema" name="exampleschema">Example Schema</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('exampleschema');">Database Schema for the Following Examples</a></div></div></div><div class="subSecRow1" id="sec_exampleschema" style="display: none"><div class="subSecHead" id="sechd_exampleschema"><a class="multipageHeadLink" href="connecting.xhtml#exampleschema" name="exampleschema">Example Schema</a></div><div class="subSecContent" id="seccnt_exampleschema"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('exampleschema');">Database Schema for the Following Examples</a></div><p class="subSecExplanation">The following <em>examples are based on this database schema</em> (in Java DB syntax): </p><pre class="subSecConfig">CREATE TABLE Movie (
  id          INT <a href="#" id="tl-d286e1188" class="dottedTooltip" onclick="return tlClick('tl-d286e1188','pp-d286e1191');" onmouseover="return tlOver('tl-d286e1188','pp-d286e1191');" onmouseout="return tlOut('tl-d286e1188','pp-d286e1191');">GENERATED BY DEFAULT AS IDENTITY</a>,
  title       VARCHAR (255),
  budget   DECIMAL,
  releaseDate DATE,
  PRIMARY KEY(id)
)
</pre><p class="subSecExplanation">Unless noted, examples in this document have been written and tested for Java DB, but should work in pratically any other SQL database. Some advanced examples have been written for PostgreSQL, because it is the only wide-spread open-source database that supports all JDBC features.</p></div></div><h2 id="sec_updatesandqueries" class="sectionHead"><a name="updatesandqueries">Updates and Queries</a></h2><div class="subSecRow2" id="sec_update"><div class="subSecHead" id="sechd_update"><a class="multipageHeadLink" href="updatesandqueries.xhtml#update" name="update">Update</a><br/>(<a href="#" id="tl-d286e1209" class="dottedTooltip" onclick="return tlClick('tl-d286e1209','pp-d286e1214');" onmouseover="return tlOver('tl-d286e1209','pp-d286e1214');" onmouseout="return tlOut('tl-d286e1209','pp-d286e1214');">more</a>)
		</div><div class="subSecContent" id="seccnt_update"><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection = <span class="abstract">...</span> ;
try {
    String sql = "UPDATE Movie SET budget=9000000 WHERE title='Jaws'";
    <a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String)" class="javadoc"><em>prepareStatement</em></a>(sql);
    int changeCount = stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeUpdate()" class="javadoc"><em>executeUpdate</em></a>();
    System.out.println(changeCount + " records modified.");
}
finally {
    connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#close()" class="javadoc">close</a>();
}
</code></pre></div></div><div class="subSecRow1" id="sec_query"><div class="subSecHead" id="sechd_query"><a class="multipageHeadLink" href="updatesandqueries.xhtml#query" name="query">Query</a><br/>(<a href="#" id="tl-d286e1282" class="dottedTooltip" onclick="return tlClick('tl-d286e1282','pp-d286e1287');" onmouseover="return tlOver('tl-d286e1282','pp-d286e1287');" onmouseout="return tlOut('tl-d286e1282','pp-d286e1287');">more</a>)
		</div><div class="subSecContent" id="seccnt_query"><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection = <span class="abstract">...</span> ;
try {
    String sql = "SELECT id, title, releaseDate, budget FROM Movie";
    <a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String)" class="javadoc">prepareStatement</a>(sql);
    <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc"><em>ResultSet</em></a> rs = stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeQuery()" class="javadoc"><em>executeQuery</em></a>();

    while (rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#next()" class="javadoc"><em>next</em></a>()) {                         <span class="cmt">// iterate through results</span>
        int id = rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getInt(java.lang.String)" class="javadoc"><em>getInt</em></a>("id");               <span class="cmt">// get row value <em>by name</em></span>
        String title = rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getString(java.lang.String)" class="javadoc"><em>getString</em></a>("title");
        <a href="http://java.sun.com/javase/6/docs/api/java/sql/Date.html" class="javadoc">Date</a> date = rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getDate(java.lang.String)" class="javadoc"><em>getDate</em></a>("releaseDate");  <span class="cmt">// <em>returns <span class="idf">java.sql.Date</span></em>, not <span class="idf">java.util.Date</span></span>
        <a href="http://java.sun.com/javase/6/docs/api/java/math/BigDecimal.html" class="javadoc">BigDecimal</a> budget = rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getBigDecimal(java.lang.String)" class="javadoc"><em>getBigDecimal</em></a>("budget");

        System.out.printf("id=%d title=%s date=%s budget=%s\n", id, title, date, budget);
    }
}
finally {
    connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#close()" class="javadoc">close</a>();
}
</code></pre></div></div><div class="subSecRow2" id="sec_valueconversion"><div class="subSecHead" id="sechd_valueconversion"><a class="multipageHeadLink" href="updatesandqueries.xhtml#valueconversion" name="valueconversion">Value Conversion</a><br/>(<a href="#" id="tl-d286e1420" class="dottedTooltip" onclick="return tlClick('tl-d286e1420','pp-d286e1425');" onmouseover="return tlOver('tl-d286e1420','pp-d286e1425');" onmouseout="return tlOut('tl-d286e1420','pp-d286e1425');">more</a>)
		</div><div class="subSecContent" id="seccnt_valueconversion"><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> rs = <span class="abstract">...</span> ;
while (rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#next()" class="javadoc"><em>next</em></a>()) {                                 <span class="cmt">// iterate through results</span>
        long id = rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getLong(java.lang.String)" class="javadoc"><em>getLong</em></a>("id");                 <span class="cmt">// <em>automatic conversion</em> (<span class="idf">id</span> is <span class="idf">INT</span>)</span>
        String title = rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getString(java.lang.String)" class="javadoc">getString</a>("title");
        String date = rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getString(java.lang.String)" class="javadoc"><em>getString</em></a>("releaseDate");  <span class="cmt">// <em>automatic conversion</em> (<span class="idf">releaseDate</span> is <span class="idf">DATE</span>)</span>
        String budget = rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getString(java.lang.String)" class="javadoc"><em>getString</em></a>("budget");

        System.out.printf("id=%d title=%s date=%s budget=%s\n", id, title, date, budget);
}
</code></pre></div></div><div class="subSecRow1" id="sec_colindex"><div class="subSecHead" id="sechd_colindex"><a class="multipageHeadLink" href="updatesandqueries.xhtml#colindex" name="colindex">Column Index</a><br/>(<a href="#" id="tl-d286e1505" class="dottedTooltip" onclick="return tlClick('tl-d286e1505','pp-d286e1510');" onmouseover="return tlOver('tl-d286e1505','pp-d286e1510');" onmouseout="return tlOut('tl-d286e1505','pp-d286e1510');">more</a>)
		</div><div class="subSecContent" id="seccnt_colindex"><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection = <span class="abstract">...</span> ;
try {
    String sql = "SELECT id, title, releaseDate, budget FROM Movie";
    <a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String)" class="javadoc">prepareStatement</a>(sql);
    <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> rs = stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeQuery()" class="javadoc">executeQuery</a>();

    while (rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#next()" class="javadoc">next</a>()) {         <span class="cmt">// iterate through results</span>
        int id = rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getInt(int)" class="javadoc">getInt</a>(<em>1</em>);  <span class="cmt">// get value <em>by index</em></span>
        String title = rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getString(int)" class="javadoc">getString</a>(<em>2</em>);
        <a href="http://java.sun.com/javase/6/docs/api/java/sql/Date.html" class="javadoc">Date</a> date = rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getDate(int)" class="javadoc">getDate</a>(<em>3</em>);
        <a href="http://java.sun.com/javase/6/docs/api/java/math/BigDecimal.html" class="javadoc">BigDecimal</a> budget = rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getBigDecimal(int)" class="javadoc"><em>getBigDecimal</em></a>(4);

        System.out.printf("id=%d title=%s date=%s budget=%s\n", id, title, date, budget);
    }
}
finally {
    connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#close()" class="javadoc">close</a>();
}
</code></pre></div></div><h2 id="sec_parameters" class="sectionHead"><a name="parameters">Parameters</a></h2><div class="subSecRow2" id="sec_parameters1"><div class="subSecHead" id="sechd_parameters1"><a class="multipageHeadLink" href="parameters.xhtml#parameters1" name="parameters1">Parameters</a><br/>(<a href="#" id="tl-d286e1638" class="dottedTooltip" onclick="return tlClick('tl-d286e1638','pp-d286e1643');" onmouseover="return tlOver('tl-d286e1638','pp-d286e1643');" onmouseout="return tlOut('tl-d286e1638','pp-d286e1643');">more</a>)
		</div><div class="subSecContent" id="seccnt_parameters1"><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection = <span class="abstract">...</span> ;
try {
    String sql = "SELECT title, releaseDate, budget FROM Movie"+
         " WHERE title LIKE <em>?</em> AND budget &gt;= <em>?</em>";       <span class="cmt">// <span class="idf">?</span> is <em>parameter placeholder</em></span>
    <a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String)" class="javadoc">prepareStatement</a>(sql);

    stmt.<em><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setString(int, java.lang.String)" class="javadoc">setString</a>(1, "Jaws%")</em>;                       <span class="cmt">// set parameters</span>
    stmt.<em><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setBigDecimal(int, java.math.BigDecimal)" class="javadoc">setBigDecimal</a>(2, new <a href="http://java.sun.com/javase/6/docs/api/java/math/BigDecimal.html" class="javadoc">BigDecimal</a>(10000000))</em>;  <span class="cmt">// <span class="idf">BigDecimal</span> for currency (<a href="#" id="tl-d286e1716" class="dottedTooltip" onclick="return tlClick('tl-d286e1716','pp-d286e1716');" onmouseover="return tlOver('tl-d286e1716','pp-d286e1716');" onmouseout="return tlOut('tl-d286e1716','pp-d286e1716');">more</a>)</span>

    <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> rs = stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeQuery()" class="javadoc">executeQuery</a>();

    while (rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#next()" class="javadoc">next</a>()) {                               <span class="cmt">// iterate through results</span>
        String title = rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getString(java.lang.String)" class="javadoc">getString</a>("title");
        <a href="http://java.sun.com/javase/6/docs/api/java/math/BigDecimal.html" class="javadoc">BigDecimal</a> title = rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getBigDecimal(java.lang.String)" class="javadoc">getBigDecimal</a>("budget");
        <a href="http://java.sun.com/javase/6/docs/api/java/sql/Date.html" class="javadoc">Date</a> date = rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getDate(java.lang.String)" class="javadoc">getDate</a>("releaseDate");

        System.out.printf("title=%s date=%s budget=%s\n", title, date, budget);
    }
}
finally {
    connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#close()" class="javadoc">close</a>();
}
</code></pre></div></div><div class="subSecRow1" id="sec_reusing"><div class="subSecHead" id="sechd_reusing"><a class="multipageHeadLink" href="parameters.xhtml#reusing" name="reusing">Reusing Statements</a><br/>(<a href="#" id="tl-d286e1794" class="dottedTooltip" onclick="return tlClick('tl-d286e1794','pp-d286e1799');" onmouseover="return tlOver('tl-d286e1794','pp-d286e1799');" onmouseout="return tlOut('tl-d286e1794','pp-d286e1799');">more</a>)
		</div><div class="subSecContent" id="seccnt_reusing"><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection = <span class="abstract">...</span> ;
try {
    String sql = "INSERT INTO Movie (title, budget, releaseDate) VALUES(<em>?, ?, ?</em>)";
    <a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String)" class="javadoc">prepareStatement</a>(sql);

    <span class="cmt">// Insert movies released on July 13 1984:</span>
    <a href="http://java.sun.com/javase/6/docs/api/java/sql/Date.html" class="javadoc">Date</a> july13 = new <a href="http://java.sun.com/javase/6/docs/api/java/sql/Date.html" class="javadoc">Date</a>(new <a href="http://java.sun.com/javase/6/docs/api/java/util/GregorianCalendar.html" class="javadoc">GregorianCalendar</a>(1984, <a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#JULY" class="javadoc">Calendar.JULY</a>, 13).<a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#getTimeInMillis()" class="javadoc">getTimeInMillis</a>());
    stmt.<em><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setString(int, java.sql.Date)" class="javadoc">setDate</a>(3, july13)</em>;  <span class="cmt">// <em>re-used parameter</em> (<a href="#" id="tl-d286e1873" class="dottedTooltip" onclick="return tlClick('tl-d286e1873','pp-d286e1873');" onmouseover="return tlOver('tl-d286e1873','pp-d286e1873');" onmouseout="return tlOut('tl-d286e1873','pp-d286e1873');">more</a>)</span>

    <span class="cmt">// Execute statement once per movie</span>
    stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setString(int, java.lang.String)" class="javadoc">setString</a>(1, "The Last Starfighter");
    stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setBigDecimal(int, java.math.BigDecimal)" class="javadoc">setBigDecimal</a>(2, new <a href="http://java.sun.com/javase/6/docs/api/java/math/BigDecimal.html" class="javadoc">BigDecimal</a>(15000000));
    stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeUpdate()" class="javadoc"><em>executeUpdate</em></a>();

    stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setString(int, java.lang.String)" class="javadoc">setString</a>(1, "The Muppets Take Manhattan");
    stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setBigDecimal(int, java.math.BigDecimal)" class="javadoc">setBigDecimal</a>(2, new <a href="http://java.sun.com/javase/6/docs/api/java/math/BigDecimal.html" class="javadoc">BigDecimal</a>(8000000));
    stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeUpdate()" class="javadoc"><em>executeUpdate</em></a>();
}
finally {
    connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#close()" class="javadoc">close</a>();
}
</code></pre></div></div><h2 id="sec_workstatements" class="sectionHead"><a name="workstatements">Working with Statements</a></h2><div class="subSecRow2" id="sec_transactions"><div class="subSecHead" id="sechd_transactions"><a class="multipageHeadLink" href="workstatements.xhtml#transactions" name="transactions">Transactions</a><br/>(<a href="#" id="tl-d286e1954" class="dottedTooltip" onclick="return tlClick('tl-d286e1954','pp-d286e1959');" onmouseover="return tlOver('tl-d286e1954','pp-d286e1959');" onmouseout="return tlOut('tl-d286e1954','pp-d286e1959');">more</a>)
		</div><div class="subSecContent" id="seccnt_transactions"><p class="subSecExplanation">Connections are in <em><a href="#" id="tl-d286e1979" class="dottedTooltip" onclick="return tlClick('tl-d286e1979','pp-d286e1983');" onmouseover="return tlOver('tl-d286e1979','pp-d286e1983');" onmouseout="return tlOut('tl-d286e1979','pp-d286e1983');">auto-commit</a> mode by default</em>. You can automatically <em>begin a <a href="#" id="tl-d286e1995" class="dottedTooltip" onclick="return tlClick('tl-d286e1995','pp-d286e1998');" onmouseover="return tlOver('tl-d286e1995','pp-d286e1998');" onmouseout="return tlOut('tl-d286e1995','pp-d286e1998');">transaction</a> by turning it off</em> (there is no explicit <span class="idf">begin</span> method). The transaction runs until you call <a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#commit()" class="javadoc">commit</a> or <a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#rollback()" class="javadoc">rollback</a>, which will end the current transaction and start a new one.</p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection = <span class="abstract">...</span> ;
try {
    connection.<em><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#setAutoCommit(boolean)" class="javadoc">setAutoCommit</a>(false)</em>;  <span class="cmt">// <em>begin transaction</em></span>

    String sql = "UPDATE Movie SET title=? WHERE title=?";
    <a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String)" class="javadoc">prepareStatement</a>(sql);

    stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setString(int, java.lang.String)" class="javadoc">setString</a>(1, "Jaws 3-D");
    stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setString(int, java.lang.String)" class="javadoc">setString</a>(2, "Jaws 3");
    stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeUpdate()" class="javadoc">executeUpdate</a>();

    stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setString(int, java.lang.String)" class="javadoc">setString</a>(1, "Amityville 3-D");
    stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setString(int, java.lang.String)" class="javadoc">setString</a>(2, "Amityville 3");
    stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeUpdate()" class="javadoc">executeUpdate</a>();

    connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#commit()" class="javadoc"><em>commit</em></a>();
}
catch (RuntimeException e) {
    connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#rollback()" class="javadoc"><em>rollback</em></a>();            <span class="cmt">// rollback on unhandled error</span>
}
finally {
    connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#close()" class="javadoc">close</a>();
}
</code></pre><p class="subSecExplanation">Note that code running in an application server should <em>let the server manage transactions</em> (<a href="#appservertransactions" onclick="if (event.button == 0) return goTo('#appservertransactions', true); else return true;">see below</a>).</p></div></div><div class="subSecRow1" id="sec_closing"><div class="subSecHead" id="sechd_closing"><a class="multipageHeadLink" href="workstatements.xhtml#closing" name="closing">Closing Resources</a><br/>(<a href="#" id="tl-d286e2163" class="dottedTooltip" onclick="return tlClick('tl-d286e2163','pp-d286e2168');" onmouseover="return tlOver('tl-d286e2163','pp-d286e2168');" onmouseout="return tlOut('tl-d286e2163','pp-d286e2168');">more</a>)
		</div><div class="subSecContent" id="seccnt_closing"><p class="subSecExplanation"> When you close a <a href="http://java.sun.com/javase/6/docs/api/java/sql/Collection.html" class="javadoc">Collection</a>, all dependent resources will be freed as well. Often this is sufficient, but in a <em>long running connection</em>, save resources by <em>closing <span class="idf">Statement</span>s and <span class="idf">ResultSet</span>s explicitly</em>. </p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection = <span class="abstract">...</span> ;
try {
    String sql = "SELECT * FROM Movie";
    <a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String)" class="javadoc">prepareStatement</a>(sql);

    <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> rs = stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeQuery()" class="javadoc">executeQuery</a>();
    while (rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#next()" class="javadoc">next</a>()) {
        <span class="cmt">// ...</span>
    }
    rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#close()" class="javadoc"><em>close</em></a>();          <span class="cmt">// <span class="idf">rs</span> not needed anymore</span>

    <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> rs2 = stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeQuery()" class="javadoc">executeQuery</a>();
    while (rs2.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#next()" class="javadoc">next</a>()) {
        <span class="cmt">// ...</span>
    }
    stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Statement.html#close()" class="javadoc"><em>close</em></a>();        <span class="cmt">// also closes <span class="idf">rs2</span> (<a href="#" id="tl-d286e2306" class="dottedTooltip" onclick="return tlClick('tl-d286e2306','pp-d286e2306');" onmouseover="return tlOver('tl-d286e2306','pp-d286e2306');" onmouseout="return tlOut('tl-d286e2306','pp-d286e2306');">more</a>)</span>

    connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String)" class="javadoc">prepareStatement</a>("DELETE FROM Movie WHERE budget &lt; 1000000").<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeUpdate()" class="javadoc">executeUpdate</a>();
}
finally {
    connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#close()" class="javadoc">close</a>();  <span class="cmt">// also closes its <span class="idf">Statement</span>s</span>
}
</code></pre></div></div><h2 id="sec_plainstatements" class="sectionHead"><a name="plainstatements">Plain Statements</a></h2><div class="subSecRow2" id="sec_plainstatements1"><div class="subSecHead" id="sechd_plainstatements1"><a class="multipageHeadLink" href="plainstatements.xhtml#plainstatements1" name="plainstatements1">Plain Statement</a></div><div class="subSecContent" id="seccnt_plainstatements1"><p class="subSecExplanation">The plain <a href="http://java.sun.com/javase/6/docs/api/java/sql/Statement.html" class="javadoc">Statement</a> is similar to <a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a>, but does <em>not support parameters</em> and is often slower (<a href="#" id="tl-d286e2369" class="dottedTooltip" onclick="return tlClick('tl-d286e2369','pp-d286e2369');" onmouseover="return tlOver('tl-d286e2369','pp-d286e2369');" onmouseout="return tlOut('tl-d286e2369','pp-d286e2369');">more</a>). Even though it is quite common in JDBC code, <em>there is little reason to use <a href="http://java.sun.com/javase/6/docs/api/java/sql/Statement.html" class="javadoc">Statement</a></em> instead of <a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a>.</p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection = <span class="abstract">...</span> ;
try {
    String sql = "UPDATE Movie SET title='Jaws 3-D' WHERE title='Jaws 3'";
    <a href="http://java.sun.com/javase/6/docs/api/java/sql/Statement.html" class="javadoc"><em>Statement</em></a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#createStatement()" class="javadoc"><em>createStatement</em></a>();
    stmt.<em><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeUpdate()" class="javadoc">executeUpdate</a>(sql)</em>;

    String sql2 = "SELECT title, budget, releaseDate FROM Movie";
    <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> rs = stmt.<em><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeQuery()" class="javadoc">executeQuery</a>(sql2)</em>;

    while (rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#next()" class="javadoc">next</a>()) {
        String title = rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getString(java.lang.String)" class="javadoc">getString</a>("title");
        <a href="http://java.sun.com/javase/6/docs/api/java/math/BigDecimal.html" class="javadoc">BigDecimal</a> title = rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getBigDecimal(java.lang.String)" class="javadoc">getBigDecimal</a>("budget");
        <a href="http://java.sun.com/javase/6/docs/api/java/sql/Date.html" class="javadoc">Date</a> date = rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getDate(java.lang.String)" class="javadoc">getDate</a>("releaseDate");

        System.out.printf("title=%s date=%s budget=%s\n", title, date, budget);
    }
}
finally {
    connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#close()" class="javadoc">close</a>();
}
</code></pre></div></div><h2 id="sec_escape" class="sectionHead"><a name="escape">SQL Escape Syntax</a></h2><div class="subSecRow1" id="sec_escapesyntax"><div class="subSecHead" id="sechd_escapesyntax"><a class="multipageHeadLink" href="escape.xhtml#escapesyntax" name="escapesyntax">Escape Syntax</a></div><div class="subSecContent" id="seccnt_escapesyntax"><p class="subSecExplanation">JDBC offers a <em>escape syntax for database-independent SQL</em>. SQL statements can contain special <em>macros in curly braces ("{}")</em> that will be replaced by the JDBC driver with database-specific SQL constructs.</p></div></div><div class="subSecRow2" id="sec_dateliterals"><div class="subSecHead" id="sechd_dateliterals"><a class="multipageHeadLink" href="escape.xhtml#dateliterals" name="dateliterals">Date Literals</a><br/>(<a href="#" id="tl-d286e2522" class="dottedTooltip" onclick="return tlClick('tl-d286e2522','pp-d286e2527');" onmouseover="return tlOver('tl-d286e2522','pp-d286e2527');" onmouseout="return tlOut('tl-d286e2522','pp-d286e2527');">more</a>)
		</div><div class="subSecContent" id="seccnt_dateliterals"><div class="subSecTableDiv"><table><tr><th>Syntax</th><th>Example</th><th>Description</th></tr><tr><td>{d 'yyyy-mm-dd'}</td><td>{d '2010-06-30'}</td><td>Date</td></tr><tr><td>{t 'hh:mm:ss'}</td><td>{t '17:30:00')</td><td>Time</td></tr><tr><td>{ts 'yyyy-mm-dd hh:mm:ss'}</td><td>{ts '2000-12-24 18:00:00'}</td><td>Timestamp (second precision)</td></tr><tr><td>{ts 'yyyy-mm-dd hh:mm:ss.fff'}</td><td>{ts '2006-10-06 09:34:15.51712'}</td><td>Timestamp (with fractional second)</td></tr></table></div><p class="subSecExplanation">Example:</p><pre class="subSecCode"><code>String sql = "SELECT title FROM Movie WHERE releaseDate &gt; <em>{d '1980-01-01'}</em>";
<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String)" class="javadoc">prepareStatement</a>(sql);
<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> rs = stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeQuery()" class="javadoc">executeQuery</a>();
</code></pre><p class="subSecExplanation"/></div></div><div class="subSecRow1" id="sec_escapefunctions"><div class="subSecHead" id="sechd_escapefunctions"><a class="multipageHeadLink" href="escape.xhtml#escapefunctions" name="escapefunctions">Functions</a><br/>(<a href="#" id="tl-d286e2605" class="dottedTooltip" onclick="return tlClick('tl-d286e2605','pp-d286e2610');" onmouseover="return tlOver('tl-d286e2605','pp-d286e2610');" onmouseout="return tlOut('tl-d286e2605','pp-d286e2610');">more</a>)
		</div><div class="subSecContent" id="seccnt_escapefunctions"><div class="subSecTableDiv"><table><tr><th>Syntax</th><th>Example</th><th>Description</th></tr><tr><td>{fn <span class="abstract">function-name</span>(<span class="abstract">argument-list</span>)}</td><td>{fn CONCAT('a', 'b')]</td><td>Call function (<em>see list of supported functions below</em>)</td></tr></table></div><p class="subSecExplanation">Example:</p><pre class="subSecCode"><code>String sql = "SELECT <em>{fn UCASE(title)}</em> as title FROM Movie WHERE <em>{fn YEAR(releaseDate)}</em>=1984";
<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String)" class="javadoc">prepareStatement</a>(sql);
<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> rs = stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeQuery()" class="javadoc">executeQuery</a>();
</code></pre><p class="subSecExplanation"/></div></div><div id="colla_escapefunctionlist" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="escape.xhtml#escapefunctionlist" name="escapefunctionlist"/></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('escapefunctionlist');">List of Supported Functions</a></div></div></div><div class="subSecRow2" id="sec_escapefunctionlist" style="display: none"><div class="subSecHead" id="sechd_escapefunctionlist"><a class="multipageHeadLink" href="escape.xhtml#escapefunctionlist" name="escapefunctionlist"/></div><div class="subSecContent" id="seccnt_escapefunctionlist"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('escapefunctionlist');">List of Supported Functions</a></div><h4 class="subSecMiniHeadline">Strings</h4><div class="subSecTableDiv"><table><tr><th>Function</th><th>Description</th></tr><tr><td>ASCII(string)</td><td>ASCII number of first character</td></tr><tr><td>CHAR(integer)</td><td>Character with given ASCII number (0-255)</td></tr><tr><td>CHAR_LENGTH(number)</td><td>String length (including trailing spaces, <em>since JDBC 4.0</em>)</td></tr><tr><td>CHARACTER_LENGTH(number)</td><td>String length (including trailing spaces, <em>since JDBC 4.0</em>)</td></tr><tr><td>CONCAT(string, string)</td><td>Returns concatonated strings (null handling undefined)</td></tr><tr><td>DIFFERENCE(string, string)</td><td><a href="http://en.wikipedia.org/wiki/Soundex">Soundex</a> difference</td></tr><tr><td>INSERT(string1, start, len, string2)</td><td>Replace <span class="idf">len</span> characters from <span class="idf">string1</span> at position <span class="idf">start</span> (1-based) with <span class="idf">string</span></td></tr><tr><td>LCASE(string)</td><td>Convert to lower case</td></tr><tr><td>LEFT(string, integer)</td><td>Return <span class="idf">integer</span> leftmost characters</td></tr><tr><td>LENGTH(string)</td><td>String length (without trailing spaces)</td></tr><tr><td>LOCATE(string1, string2)</td><td>Finds first occurrence of <span class="idf">string1</span> in <span class="idf">string1</span>, returns position (1-based) or 0 if not found</td></tr><tr><td>LOCATE(string1, string2, start)</td><td>Finds first occurrence of <span class="idf">string1</span> in <span class="idf">string1</span> starting at <span class="idf">start</span>, returns position (1-based) or 0 if not found</td></tr><tr><td>LTRIM(string)</td><td>Return <span class="idf">string</span> without leading spaces</td></tr><tr><td>OCTET_LENGTH(string)</td><td>String length in bytes (<em>since JDBC 4.0</em>)</td></tr><tr><td>POSITION(string1 IN string2)</td><td>Position of first occurrence of <span class="idf">string1</span> in <span class="idf">string2</span> (<em>since JDBC 4.0</em>, use <span class="idf">LOCATE</span> for 3.0 compatibility)</td></tr><tr><td>REPEAT(string, integer)</td><td>Returns <span class="idf">string</span> repeated <span class="idf">integer</span> times</td></tr><tr><td>REPLACE(string1, string2, string3)</td><td>Replace all occurrences of <span class="idf">string2</span> in <span class="idf">string1</span> with <span class="idf">string3</span></td></tr><tr><td>RIGHT(string,integer)</td><td>Return <span class="idf">integer</span> rightmost characters</td></tr><tr><td>RTRIM(string)</td><td>Return <span class="idf">string</span> without trailing spaces</td></tr><tr><td>SOUNDEX(string)</td><td><a href="http://en.wikipedia.org/wiki/Soundex">Soundex</a> value (exact content undefined)</td></tr><tr><td>SPACE(integer)</td><td>Returns <span class="idf">integer</span> spaces</td></tr><tr><td>SUBSTRING(string, start, len)</td><td>Returns substring from <span class="idf">start</span> (1-based)</td></tr><tr><td>UCASE(string)</td><td>Convert to upper case</td></tr></table></div><h4 class="subSecMiniHeadline">Date and Time</h4><div class="subSecTableDiv"><table><tr><th>Function</th><th>Description</th></tr><tr><td>CURRENT_DATE()</td><td>Current date (<em>since JDBC 4.0</em>, use <span class="idf">CURDATE</span>() for 3.0 compatibility)</td></tr><tr><td>CURRENT_TIME()</td><td>Current time (<em>since JDBC 4.0</em>, use <span class="idf">CURTIME</span>() for 3.0 compatibility)</td></tr><tr><td>CURRENT_TIMESTAMP()</td><td>Current timestamp (<em>since JDBC 4.0</em>, use <span class="idf">NOW</span>() for 3.0 compatibility)</td></tr><tr><td>CURDATE()</td><td>Current date</td></tr><tr><td>CURTIME()</td><td>Current time</td></tr><tr><td>DAYNAME(date)</td><td>Weekday name (exact value undefined)</td></tr><tr><td>DAYOFMONTH(date)</td><td>Day of month (1-31)</td></tr><tr><td>DAYOFWEEK(date)</td><td>Day of week (1-7, 1 is Sunday)</td></tr><tr><td>DAYOFYEAR(date)</td><td>Day of year (1-366)</td></tr><tr><td>EXCTRACT(field FROM timestamp)</td><td>Get field from time/date/timestamp. <span class="idf">field</span> is <span class="idf">YEAR</span>, <span class="idf">MONTH</span>, <span class="idf">DAY</span>, <span class="idf">HOUR</span>, <span class="idf">MINUTE</span> or <span class="idf">SECOND</span> (<em>since JDBC 4.0</em>)</td></tr><tr><td>HOUR(time)</td><td>Hour of time (0-23)</td></tr><tr><td>MINUTE(time)</td><td>Minute of time (0-59)</td></tr><tr><td>MONTH(date)</td><td>Month of date (1-12)</td></tr><tr><td>MONTHNAME(date)</td><td>Name of month (exact value undefined)</td></tr><tr><td>NOW()</td><td>Current timestamp</td></tr><tr><td>QUARTER(date)</td><td>Quarter of year (1-4)</td></tr><tr><td>SECOND(time)</td><td>Second of time (0-59)</td></tr><tr><td>TIMESTAMPADD(unit,integer,timestamp)</td><td>Add <span class="idf">integer</span> to <span class="idf">timestamp</span>. <span class="idf">unit</span> can be <span class="idf">SQL_TSI_FRAC_SECOND</span>, <span class="idf">SQL_TSI_SECOND</span>, <span class="idf">SQL_TSI_MINUTE</span>, <span class="idf">SQL_TSI_HOUR</span>, <span class="idf">SQL_TSI_DAY</span>, <span class="idf">SQL_TSI_WEEK</span>, <span class="idf">SQL_TSI_MONTH</span>, <span class="idf">SQL_TSI_QUARTER</span> or <span class="idf">SQL_TSI_YEAR</span>.</td></tr><tr><td>TIMESTAMPDIFF(unit,timestamp,timestamp)</td><td>Difference between first and second timestamp. <span class="idf">unit</span> can be <span class="idf">SQL_TSI_FRAC_SECOND</span>, <span class="idf">SQL_TSI_SECOND</span>, <span class="idf">SQL_TSI_MINUTE</span>, <span class="idf">SQL_TSI_HOUR</span>, <span class="idf">SQL_TSI_DAY</span>, <span class="idf">SQL_TSI_WEEK</span>, <span class="idf">SQL_TSI_MONTH</span>, <span class="idf">SQL_TSI_QUARTER</span> or <span class="idf">SQL_TSI_YEAR</span>.</td></tr><tr><td>WEEK(date)</td><td>Week of date (1-53, algorithm undefined)</td></tr><tr><td>YEAR(date)</td><td>Year of date (4 digit)</td></tr></table></div><h4 class="subSecMiniHeadline">Numbers</h4><div class="subSecTableDiv"><table><tr><th>Function</th><th>Description</th></tr><tr><td>ABS(number)</td><td>Absolute value</td></tr><tr><td>ACOS(float)</td><td>Arc cosine of argument (radians)</td></tr><tr><td>ASIN(float)</td><td>Arc sine of argument (radians)</td></tr><tr><td>ATAN(float)</td><td>Arc tangent of argument (radians)</td></tr><tr><td>ATAN2(f1, f2)</td><td>Arc tangent of <span class="idf">f2</span>/<span class="idf">f1</span> (radians)</td></tr><tr><td>CEILING(number)</td><td>Smallest integer &gt;= argument (rounds up)</td></tr><tr><td>DEGREES(number)</td><td>Convert argument from radians to degrees</td></tr><tr><td>FLOOR(float)</td><td>Largest integer &lt;= argument (rounds down)</td></tr><tr><td>LOG(float)</td><td>Base e logarithm of argument</td></tr><tr><td>LOG(float)</td><td>Base 10 logarithm of argument</td></tr><tr><td>MOD(i1, i2)</td><td>Remainder of <span class="idf">i1</span>/<span class="idf">i2</span></td></tr><tr><td>PI()</td><td>PI</td></tr><tr><td>POWER(number, integer)</td><td><span class="idf">number</span>^<span class="idf">integer</span></td></tr><tr><td>RADIANS(number)</td><td>Convert argument from degrees to radians</td></tr><tr><td>RAND(integer)</td><td>Random floating point, argument is seed </td></tr><tr><td>ROUND(number, integer)</td><td>Round number, 2nd argument specified places</td></tr><tr><td>SIGN(number)</td><td>-1 for negative, 1 for positive, 0 for 0 argument</td></tr><tr><td>SIN(float)</td><td>Sine of argument (radians)</td></tr><tr><td>TAN(float)</td><td>Tangent of argument (radians)</td></tr><tr><td>TRUNCATE(number, integer)</td><td>Truncate number, 2nd argument specified places</td></tr></table></div><h4 class="subSecMiniHeadline">Other Functions</h4><div class="subSecTableDiv"><table><tr><th>Function</th><th>Description</th></tr><tr><td>CONVERT(value, type)</td><td>Convert value. Type can be <span class="idf">SQL_BIGINT</span>, <span class="idf">SQL_BINARY</span>, <span class="idf">SQL_BIT</span>, <span class="idf">SQL_BLOB</span>, <span class="idf">SQL_BOOLEAN</span>, <span class="idf">SQL_CHAR</span>, <span class="idf">SQL_CLOB</span>, <span class="idf">SQL_DATE</span>, <span class="idf">SQL_DECIMAL</span>, <span class="idf">SQL_DATALINK</span>, <span class="idf">SQL_DOUBLE</span>, <span class="idf">SQL_FLOAT</span>, <span class="idf">SQL_INTEGER</span>, <span class="idf">SQL_LONGVARBINARY</span>, <span class="idf">SQL_LONGNVARCHAR</span>, <span class="idf">SQL_LONGVARCHAR</span>, <span class="idf">SQL_NCHAR</span>, <span class="idf">SQL_NCLOB</span>, <span class="idf">SQL_NUMERIC</span>, <span class="idf">SQL_NVARCHAR</span>, <span class="idf">SQL_REAL</span>, <span class="idf">SQL_ROWID</span>, <span class="idf">SQL_SQLXML</span>, <span class="idf">SQL_SMALLINT</span>, <span class="idf">SQL_TIME</span>, <span class="idf">SQL_TIMESTAMP</span>, <span class="idf">SQL_TINYINT</span>, <span class="idf">SQL_VARBINARY</span> or <span class="idf">SQL_VARCHAR</span>. </td></tr><tr><td>DATABASE()</td><td>Name of the current database</td></tr><tr><td>IFNULL(expression, value)</td><td>If <span class="idf">expression</span> is <span class="idf">NULL</span>, returns <span class="idf">value</span>, otherwise <span class="idf">expression</span></td></tr><tr><td>USER()</td><td>Name of the current database user</td></tr></table></div></div></div><div class="subSecRow1" id="sec_storedproceduresescape"><div class="subSecHead" id="sechd_storedproceduresescape"><a class="multipageHeadLink" href="escape.xhtml#storedproceduresescape" name="storedproceduresescape">Stored Procedures</a><br/>(<a href="#" id="tl-d286e3465" class="dottedTooltip" onclick="return tlClick('tl-d286e3465','pp-d286e3470');" onmouseover="return tlOver('tl-d286e3465','pp-d286e3470');" onmouseout="return tlOut('tl-d286e3465','pp-d286e3470');">more</a>)
		</div><div class="subSecContent" id="seccnt_storedproceduresescape"><div class="subSecTableDiv"><table><tr><th>Syntax</th><th>Example</th><th>Description</th></tr><tr><td>{call <span class="abstract">procedure-name</span>}</td><td>{call preProcessing}</td><td>Call stored procedure</td></tr><tr><td>{call <span class="abstract">procedure-name</span>(<span class="abstract">argument-list</span>)}</td><td>{call postProcessing(2, 'abc')}</td><td>...with arguments</td></tr><tr><td>{?= call <span class="abstract">procedure-name</span>}</td><td>{?= call recalc}</td><td>...with result parameter</td></tr><tr><td>{?= call <span class="abstract">procedure-name</span>(<span class="abstract">argument-list</span>)}</td><td>{?=call compute(?, ?)}</td><td>...with arguments and result</td></tr></table></div><p class="subSecExplanation">Arguments can be <em>literals or parameter markers ('?')</em>: </p><pre class="subSecCode"><code>String call = "<em>{call convert('USD', ?)}</em>";
<a href="http://java.sun.com/javase/6/docs/api/java/sql/CallableStatement.html" class="javadoc">CallableStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareCall(java.lang.String)" class="javadoc">prepareCall</a>(call);
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setString(int, java.lang.String)" class="javadoc">setString</a>(1, "EUR");
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#execute()" class="javadoc">execute</a>();
</code></pre><p class="subSecExplanation">Stored procedures are discussed <a href="#storedprocedures" onclick="if (event.button == 0) return goTo('#storedprocedures', true); else return true;">in detail below</a>.</p></div></div><div class="subSecRow2" id="sec_likeescape"><div class="subSecHead" id="sechd_likeescape"><a class="multipageHeadLink" href="escape.xhtml#likeescape" name="likeescape">LIKE Escape</a><br/>(<a href="#" id="tl-d286e3577" class="dottedTooltip" onclick="return tlClick('tl-d286e3577','pp-d286e3582');" onmouseover="return tlOver('tl-d286e3577','pp-d286e3582');" onmouseout="return tlOut('tl-d286e3577','pp-d286e3582');">more</a>)
		</div><div class="subSecContent" id="seccnt_likeescape"><div class="subSecTableDiv"><table><tr><th>Syntax</th><th>Example</th><th>Description</th></tr><tr><td>{escape '<span class="abstract">character</span>'}</td><td>{escape '\\'}</td><td>LIKE escape character</td></tr></table></div><p class="subSecExplanation">The escape character must be declared at the end of the <span class="idf">LIKE</span> clause: </p><pre class="subSecCode"><code><span class="cmt">// Find titles ending with '%'</span>
String sql = "SELECT title FROM Movie WHERE title LIKE <em>'$%%' {escape '$'}</em>";
<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String)" class="javadoc">prepareStatement</a>(sql);
<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> rs = stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeQuery()" class="javadoc">executeQuery</a>();
</code></pre><p class="subSecExplanation"/></div></div><div class="subSecRow1" id="sec_outerjoinsescape"><div class="subSecHead" id="sechd_outerjoinsescape"><a class="multipageHeadLink" href="escape.xhtml#outerjoinsescape" name="outerjoinsescape">Outer Joins</a><br/>(<a href="#" id="tl-d286e3652" class="dottedTooltip" onclick="return tlClick('tl-d286e3652','pp-d286e3657');" onmouseover="return tlOver('tl-d286e3652','pp-d286e3657');" onmouseout="return tlOut('tl-d286e3652','pp-d286e3657');">more</a>)
		</div><div class="subSecContent" id="seccnt_outerjoinsescape"><div class="subSecTableDiv"><table><tr><th>Syntax</th><th>Example</th><th>Description</th></tr><tr><td>{oj <span class="abstract">leftTable</span> OUTER JOIN <span class="abstract">rightTable</span> ON <span class="abstract">condition</span>}</td><td>SELECT * FROM {oj table1 OUTER JOIN table2 ON table1.id=table2.ref</td><td>Left outer join</td></tr><tr><td>{oj <span class="abstract">leftTable</span> LEFT OUTER JOIN <span class="abstract">rightTable</span> ON <span class="abstract">condition</span>}</td><td>SELECT * FROM {oj table1 LEFT OUTER JOIN table2 ON table1.id=table2.ref</td><td>Left outer join</td></tr><tr><td>{oj <span class="abstract">leftTable</span> RIGHT OUTER JOIN <span class="abstract">rightTable</span> ON <span class="abstract">condition</span>}</td><td>SELECT * FROM {oj table1 RIGHT OUTER JOIN table2 ON table1.id=table2.ref</td><td>Right outer Join</td></tr><tr><td>{oj <span class="abstract">leftTable</span> FULL OUTER JOIN <span class="abstract">rightTable</span> ON <span class="abstract">condition</span>}</td><td>SELECT * FROM {oj table1 FULL OUTER JOIN table2 ON table1.id=table2.ref</td><td>Full outer join</td></tr></table></div><p class="subSecExplanation">Example:</p><pre class="subSecCode"><code>String sql = "SELECT * FROM <em>{oj MoviePicture </em>" +
   "<em>OUTER JOIN MovieMeta ON MoviePicture.movieRef=MovieMeta.movieRef}</em>";
<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String)" class="javadoc">prepareStatement</a>(sql);
<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> rs = stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeQuery()" class="javadoc">executeQuery</a>();
</code></pre><p class="subSecExplanation"/></div></div><h2 id="sec_howto" class="sectionHead"><a name="howto">How to...</a></h2><div class="sectionExpandAll">
			(<a href="#" onclick="&#xA;return showAll([['colla_storedprocedures','sec_storedprocedures'],['colla_readingnull','sec_readingnull'],['colla_cursors','sec_cursors'],['colla_holdablers','sec_holdablers'],['colla_arrays','sec_arrays'],['colla_creatingsql','sec_creatingsql'],['colla_batch','sec_batch'],['colla_performance','sec_performance'],['colla_dateandtime','sec_dateandtime'],['colla_fetchsizes','sec_fetchsizes'],['colla_timeout','sec_timeout'],['colla_rowsets','sec_rowsets'],['colla_dbmetadata','sec_dbmetadata'],['colla_resultsetmetadata','sec_resultsetmetadata'],['colla_blobs','sec_blobs'],['colla_xml','sec_xml'],['colla_arrayparameters','sec_arrayparameters'],['colla_transactionisolation','sec_transactionisolation'],['colla_drivercats','sec_drivercats'],['colla_wheretoputstatements','sec_wheretoputstatements'],['colla_dboverview','sec_dboverview'],['colla_concurrency','sec_concurrency'],['colla_warnings','sec_warnings'],['colla_types','sec_types'],['colla_appservertransactions','sec_appservertransactions'],['colla_autokeys','sec_autokeys'],['colla_userdefinedtypes','sec_userdefinedtypes'],['colla_distinct','sec_distinct'],['colla_structs','sec_structs'],['colla_nullparameters','sec_nullparameters'],['colla_wrapper','sec_wrapper'], null]); &#xA;">expand everything</a>)
		</div><div id="colla_storedprocedures" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="storedprocedures.xhtml#storedprocedures" name="storedprocedures">Stored Procedures</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('storedprocedures');">How to Invoke Stored Procedures (CallableStatement)</a></div></div></div><div class="subSecRow2" id="sec_storedprocedures" style="display: none"><div class="subSecHead" id="sechd_storedprocedures"><a class="multipageHeadLink" href="storedprocedures.xhtml#storedprocedures" name="storedprocedures">Stored Procedures</a></div><div class="subSecContent" id="seccnt_storedprocedures"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('storedprocedures');">How to Invoke Stored Procedures (CallableStatement)</a></div><p class="subSecExplanation"> JDBC offers support for <em>stored proceduces using the <a href="http://java.sun.com/javase/6/docs/api/java/sql/CallableStatement.html" class="javadoc">CallableStatement</a></em> interface. <a href="http://java.sun.com/javase/6/docs/api/java/sql/CallableStatement.html" class="javadoc">CallableStatement</a> extends <a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> and adds support for parameters. Stored procedures can either be invoked using the database's native syntax, or with a database-independent <a href="#storedproceduresescape" onclick="if (event.button == 0) return goTo('#storedproceduresescape', true); else return true;">escape macro</a>. </p><h4 class="subSecMiniHeadline">Example Stored Procedures</h4><p class="subSecExplanation"> The following examples are based on these four stored procedures and functions, here defined in PostgreSQL syntax: </p><pre class="subSecConfig">-- Deletes all movies in the given date range. No return value.
CREATE FUNCTION deleteMovies(minAge DATE, maxAge DATE) RETURNS void AS '
    DELETE FROM Movie WHERE releaseDate &gt;= $1 and releaseDate &lt; $2
' LANGUAGE SQL;

-- Return average budget of all movies.
CREATE FUNCTION averageBudget() RETURNS decimal AS '
    SELECT avg(budget) from Movie
' LANGUAGE SQL;

-- Return min and max budget of movies of the given year.
CREATE FUNCTION minMaxBudget(year int, OUT minBudget decimal, OUT maxBudget decimal) AS '
    SELECT min(budget), min(budget) from Movie 
    WHERE extract(year from releaseDate)=$1
' LANGUAGE SQL;

-- Returns a table with title and release date of all movies released in
-- the given year.
CREATE FUNCTION getMoviesByYear(year int) RETURNS TABLE(title varchar, releaseDate date) AS '
    SELECT title, releaseDate from Movie 
    WHERE extract(year from releaseDate)=$1
' LANGUAGE SQL;
</pre><h4 class="subSecMiniHeadline">Native Invocation</h4><p class="subSecExplanation"> If you call a stored procedure without return or <span class="idf">OUT</span> values, you can use <a href="http://java.sun.com/javase/6/docs/api/java/sql/CallableStatement.html" class="javadoc">CallableStatement</a> almost like <a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a>. This example invokes <span class="idf">deleteMovies</span> <em>in native PostgreSQL syntax</em>: </p><pre class="subSecCode"><code>String call = "<em>SELECT deleteMovies(?,?)</em>";
<em><a href="http://java.sun.com/javase/6/docs/api/java/sql/CallableStatement.html" class="javadoc">CallableStatement</a></em> stmt = connection.<em><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareCall(java.lang.String)" class="javadoc">prepareCall</a></em>(call);
<a href="http://java.sun.com/javase/6/docs/api/java/sql/Date.html" class="javadoc">Date</a> y1940 = new <a href="http://java.sun.com/javase/6/docs/api/java/sql/Date.html" class="javadoc">Date</a>(new <a href="http://java.sun.com/javase/6/docs/api/java/util/GregorianCalendar.html" class="javadoc">GregorianCalendar</a>(1940, <a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#JANUARY" class="javadoc">Calendar.JANUARY</a>, 1).<a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#getTimeInMillis()" class="javadoc">getTimeInMillis</a>());
<a href="http://java.sun.com/javase/6/docs/api/java/sql/Date.html" class="javadoc">Date</a> y1960 = new <a href="http://java.sun.com/javase/6/docs/api/java/sql/Date.html" class="javadoc">Date</a>(new <a href="http://java.sun.com/javase/6/docs/api/java/util/GregorianCalendar.html" class="javadoc">GregorianCalendar</a>(1960, <a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#JANUARY" class="javadoc">Calendar.JANUARY</a>, 1).<a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#getTimeInMillis()" class="javadoc">getTimeInMillis</a>());
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setString(int, java.sql.Date)" class="javadoc">setDate</a>(1, y1940);  <span class="cmt">// values for the placeholders ('?')</span>
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setString(int, java.sql.Date)" class="javadoc">setDate</a>(2, y1960);
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#execute()" class="javadoc">execute</a>();
</code></pre><p class="subSecExplanation">Note that the code above won't work in many other databases. Another common syntax to invoke a stored procedure would be "CALL deleteMovies(?,?)".</p><h4 class="subSecMiniHeadline">Escape Syntax</h4><p class="subSecExplanation"> The <em>JDBC escape syntax</em> allows you to invoke a store-procedure or function in a <em>database-independent</em> way: </p><pre class="subSecCode"><code>String call = "<em>{call deleteMovies(?,?)}</em>";
<a href="http://java.sun.com/javase/6/docs/api/java/sql/CallableStatement.html" class="javadoc">CallableStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareCall(java.lang.String)" class="javadoc">prepareCall</a>(call);
<a href="http://java.sun.com/javase/6/docs/api/java/sql/Date.html" class="javadoc">Date</a> y1940 = new <a href="http://java.sun.com/javase/6/docs/api/java/sql/Date.html" class="javadoc">Date</a>(new <a href="http://java.sun.com/javase/6/docs/api/java/util/GregorianCalendar.html" class="javadoc">GregorianCalendar</a>(1940, <a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#JANUARY" class="javadoc">Calendar.JANUARY</a>, 1).<a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#getTimeInMillis()" class="javadoc">getTimeInMillis</a>());
<a href="http://java.sun.com/javase/6/docs/api/java/sql/Date.html" class="javadoc">Date</a> y1960 = new <a href="http://java.sun.com/javase/6/docs/api/java/sql/Date.html" class="javadoc">Date</a>(new <a href="http://java.sun.com/javase/6/docs/api/java/util/GregorianCalendar.html" class="javadoc">GregorianCalendar</a>(1960, <a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#JANUARY" class="javadoc">Calendar.JANUARY</a>, 1).<a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#getTimeInMillis()" class="javadoc">getTimeInMillis</a>());
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setString(int, java.sql.Date)" class="javadoc">setDate</a>(1, y1940);  <span class="cmt">// values for the placeholders ('?')</span>
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setString(int, java.sql.Date)" class="javadoc">setDate</a>(2, y1960);
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#execute()" class="javadoc">execute</a>();
</code></pre><h4 class="subSecMiniHeadline">Literals</h4><p class="subSecExplanation"> Instead of placeholders you can also <em>pass literals to store procedures</em> or mix literals with placeholders. The <em>parameter number refers to the placeholder</em>, not the parameter. </p><pre class="subSecCode"><code>String call = "{call deleteMovies(<em>1940</em>, ?)}";
<a href="http://java.sun.com/javase/6/docs/api/java/sql/CallableStatement.html" class="javadoc">CallableStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareCall(java.lang.String)" class="javadoc">prepareCall</a>(call);
<a href="http://java.sun.com/javase/6/docs/api/java/sql/Date.html" class="javadoc">Date</a> y1960 = new <a href="http://java.sun.com/javase/6/docs/api/java/sql/Date.html" class="javadoc">Date</a>(new <a href="http://java.sun.com/javase/6/docs/api/java/util/GregorianCalendar.html" class="javadoc">GregorianCalendar</a>(1960, <a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#JANUARY" class="javadoc">Calendar.JANUARY</a>, 1).<a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#getTimeInMillis()" class="javadoc">getTimeInMillis</a>());
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setString(int, java.sql.Date)" class="javadoc">setDate</a>(<em>1</em>, y1960);  <span class="cmt">// value for the placeholder ('?')</span>
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#execute()" class="javadoc">execute</a>();
</code></pre><h4 class="subSecMiniHeadline">OUT Parameters</h4><p class="subSecExplanation"> <span class="idf">OUT</span> parameters are represented by parameter placeholders ('?'), just like <span class="idf">IN</span> parameters. You need to <em>register the types of all <span class="idf">OUT</span> parameters</em> with <a href="http://java.sun.com/javase/6/docs/api/java/sql/CallableStatement.html#registerOutParameter(int, int)" class="javadoc">registerOutParameter</a> before execution. After the execution there are getter methods to retrieve the values. </p><pre class="subSecCode"><code>String call = "{call minMaxBudget(?, ?, ?)}";  <span class="cmt">// second and third placeholder is <span class="idf">OUT</span></span>
<a href="http://java.sun.com/javase/6/docs/api/java/sql/CallableStatement.html" class="javadoc">CallableStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareCall(java.lang.String)" class="javadoc">prepareCall</a>(call);
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/setInt.html" class="javadoc">setInt</a>(1, 1984);
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/CallableStatement.html#registerOutParameter(int, int)" class="javadoc"><em>registerOutParameter</em></a>(2, <a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#DECIMAL" class="javadoc">Types.DECIMAL</a>);   <span class="cmt">// declare return value types</span>
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/CallableStatement.html#registerOutParameter(int, int)" class="javadoc"><em>registerOutParameter</em></a>(3, <a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#DECIMAL" class="javadoc">Types.DECIMAL</a>);
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#execute()" class="javadoc">execute</a>();
<a href="http://java.sun.com/javase/6/docs/api/java/math/BigDecimal.html" class="javadoc">BigDecimal</a> min = stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/CallableStatement.html#getBigDecimal(int)" class="javadoc"><em>getBigDecimal</em></a>(2);        <span class="cmt">// read <span class="idf">OUT</span> values</span>
<a href="http://java.sun.com/javase/6/docs/api/java/math/BigDecimal.html" class="javadoc">BigDecimal</a> max = stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/CallableStatement.html#getBigDecimal(int)" class="javadoc"><em>getBigDecimal</em></a>(3);
System.out.println("Budget is between " + min + " and " + max);
</code></pre><p class="subSecExplanation">For <span class="idf">INOUT</span> parameters you would need to <em>set the value as well as register the output type</em>.</p><h4 class="subSecMiniHeadline">Return Values</h4><p class="subSecExplanation">When calling functions with a return value, put a '?=' in front of the <span class="idf">call</span> macro. It declares a parameter placeholder which will contain the return value:</p><pre class="subSecCode"><code>String call = "{<em>?=</em> call averageBudget()}";
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/CallableStatement.html#registerOutParameter(int, int)" class="javadoc"><em>registerOutParameter</em></a>(1, <a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#DECIMAL" class="javadoc">Types.DECIMAL</a>);  <span class="cmt">// declare return value type</span>
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#execute()" class="javadoc">execute</a>();
<a href="http://java.sun.com/javase/6/docs/api/java/math/BigDecimal.html" class="javadoc">BigDecimal</a> avg = stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/CallableStatement.html#getBigDecimal(int)" class="javadoc"><em>getBigDecimal</em></a>(1);       <span class="cmt">// read the value</span>
System.out.println("Average budget is " + avg);
</code></pre><h4 class="subSecMiniHeadline">Table Returns</h4><p class="subSecExplanation">If the stored procedure returns a table, you can <em>invoke the <a href="http://java.sun.com/javase/6/docs/api/java/sql/CallableStatement.html" class="javadoc">CallableStatement</a> with <a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeQuery()" class="javadoc">executeQuery</a></em> and handle the result just like you would with a regular statement:</p><pre class="subSecCode"><code>String call = "{call getMoviesByYear(?)}";
<a href="http://java.sun.com/javase/6/docs/api/java/sql/CallableStatement.html" class="javadoc">CallableStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareCall(java.lang.String)" class="javadoc">prepareCall</a>(call);
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/setInt.html" class="javadoc">setInt</a>(<em>1</em>, 1984);
<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> rs = stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeQuery()" class="javadoc"><em>executeQuery</em></a>();

while (rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#next()" class="javadoc">next</a>()) {
    String title = rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getString(int)" class="javadoc">getString</a>(1);
    <a href="http://java.sun.com/javase/6/docs/api/java/sql/Date.html" class="javadoc">Date</a> date = rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getDate(int)" class="javadoc">getDate</a>(2);

    System.out.println(title + '(' + date + ')');
}
</code></pre><p class="subSecExplanation"/></div></div><div id="colla_readingnull" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="readingnull.xhtml#readingnull" name="readingnull">Reading NULL</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('readingnull');">How to Find Out Whether a ResultSet Column is NULL</a></div></div></div><div class="subSecRow1" id="sec_readingnull" style="display: none"><div class="subSecHead" id="sechd_readingnull"><a class="multipageHeadLink" href="readingnull.xhtml#readingnull" name="readingnull">Reading NULL</a></div><div class="subSecContent" id="seccnt_readingnull"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('readingnull');">How to Find Out Whether a ResultSet Column is NULL</a></div><p class="subSecExplanation">How to find out whether a <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> column is <span class="idf">NULL</span> depends on its type:</p><ul class="subSecList"><li>Getters returning <em>objects (like <span class="idf">String</span>, <a href="http://java.sun.com/javase/6/docs/api/java/sql/Time.html" class="javadoc">Time</a> or <a href="http://java.sun.com/javase/6/docs/api/java/sql/Date.html" class="javadoc">Date</a>) will return <span class="idf">null</span></em>.</li><li>Getters returning <em>numbers (<span class="idf">int</span>, <span class="idf">float</span>...) will return 0</em>. You can <em>call <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#wasNull()" class="javadoc">wasNull</a> afterwards</em> to find out whether the value is <span class="idf">NULL</span> or 0.</li><li><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getObject(java.lang.String)" class="javadoc">getObject</a> will always return <span class="idf">null</span> if the column is <span class="idf">NULL</span>.</li></ul><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> rs = <span class="abstract">...</span>;
String title = rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getString(java.lang.String)" class="javadoc">getString</a>("title");
if (<em>title == null</em>)   <span class="cmt">// <span class="idf">getString</span> returns <span class="idf">null</span> for <span class="idf">NULL</span> columns</span>
    System.out.println("Title is NULL");

int budget = rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getInt(java.lang.String)" class="javadoc">getInt</a>("budget");
if (rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#wasNull()" class="javadoc"><em>wasNull</em></a>())    <span class="cmt">// <em>call <span class="idf">wasNull</span> directly after <span class="idf">getInt</span>!</em></span>
    System.out.println("Budget is NULL");
</code></pre><p class="subSecExplanation"/></div></div><div id="colla_cursors" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="cursors.xhtml#cursors" name="cursors">Cursors</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('cursors');">How to Navigate in the ResultSet (Cursors)</a></div></div></div><div class="subSecRow2" id="sec_cursors" style="display: none"><div class="subSecHead" id="sechd_cursors"><a class="multipageHeadLink" href="cursors.xhtml#cursors" name="cursors">Cursors</a></div><div class="subSecContent" id="seccnt_cursors"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('cursors');">How to Navigate in the ResultSet (Cursors)</a></div><p class="subSecExplanation">In all previous examples, the <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> has been read from beginning to the end. You can also configure your statement to return a <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> that allows you to <em>navigate in any order through the <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a></em>, backward and forward, and to <em>jump to any position</em>. The current position in the <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> is also called the result set's <em>cursor</em>. A <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> that allows you to navigate in any direction is called <em>scrollable</em>.</p><p class="subSecExplanation">You can chose the following three types of <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a>s:</p><ul class="subSecList"><li><em><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#TYPE_FORWARD_ONLY" class="javadoc">TYPE_FORWARD_ONLY</a></em> - cursor can only move forward (<em>default</em>)</li><li><em><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#TYPE_SCROLL_INSENSITIVE" class="javadoc">TYPE_SCROLL_INSENSITIVE</a></em> - cursor can seek and go in any direction</li><li><em><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#TYPE_SCROLL_SENSITIVE" class="javadoc">TYPE_SCROLL_SENSITIVE</a></em> - like <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#TYPE_SCROLL_INSENSITIVE" class="javadoc">TYPE_SCROLL_INSENSITIVE</a>, but the <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> changes if the underlying data changes</li></ul><p class="subSecExplanation">While the exact performance depends on the database and the driver, generally <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#TYPE_FORWARD_ONLY" class="javadoc">TYPE_FORWARD_ONLY</a> is the fastest type and <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#TYPE_SCROLL_SENSITIVE" class="javadoc">TYPE_SCROLL_SENSITIVE</a> the slowest. </p><p class="subSecExplanation"> This example creates a scrollable <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> to navigate through an ordered result: </p><pre class="subSecCode"><code>String sql = "SELECT title, budget FROM Movie <em>ORDER BY budgetMio DESC</em>";
<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String, int, int)" class="javadoc">prepareStatement</a>(sql, 
       <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#TYPE_SCROLL_INSENSITIVE" class="javadoc"><em>ResultSet.TYPE_SCROLL_INSENSITIVE</em></a>, <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#CONCUR_READ_ONLY" class="javadoc">ResultSet.CONCUR_READ_ONLY</a>);
<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> rs = stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeQuery()" class="javadoc">executeQuery</a>();

System.out.println("Top 5 Movies with highest budget");
int highest5Counter = 5;
while (rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#next()" class="javadoc">next</a>() &amp;&amp; highest5Counter-- &gt; 0)     <span class="cmt">// going forward</span>
    System.out.printf("%s %d\n", rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getString(java.lang.String)" class="javadoc">getString</a>("title"), rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getInt(java.lang.String)" class="javadoc">getInt</a>("budget"));

System.out.println("Top 5 Movies with lowest budget");
rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#last()" class="javadoc"><em>last</em></a>();                                     <span class="cmt">// jump to end of ResultSet</span>
int lowest5Counter = 5;
while (rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#previous()" class="javadoc"><em>previous</em></a>() &amp;&amp; lowest5Counter-- &gt; 0)  <span class="cmt">// going backwards</span>
    System.out.printf("%s %d\n", rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getString(java.lang.String)" class="javadoc">getString</a>("title"), rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getInt(java.lang.String)" class="javadoc">getInt</a>("budget"));

System.out.println("15th most expensive movie");
if (rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#absolute(int)" class="javadoc"><em>absolute</em></a>(15))                           <span class="cmt">// absolute positioning</span>
    System.out.printf("%s %d\n", rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getString(java.lang.String)" class="javadoc">getString</a>("title"), rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getInt(java.lang.String)" class="javadoc">getInt</a>("budget"));

System.out.println("15th least expensive movie");
if (rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#absolute(int)" class="javadoc"><em>absolute</em></a>(-15))                          <span class="cmt">// relative to end</span>
    System.out.printf("%s %d\n", rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getString(java.lang.String)" class="javadoc">getString</a>("title"), rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getInt(java.lang.String)" class="javadoc">getInt</a>("budget"));
</code></pre><p class="subSecExplanation"/></div></div><div id="colla_holdablers" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="holdablers.xhtml#holdablers" name="holdablers">Holdability</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('holdablers');">How to Control ResultSet Holdability</a></div></div></div><div class="subSecRow1" id="sec_holdablers" style="display: none"><div class="subSecHead" id="sechd_holdablers"><a class="multipageHeadLink" href="holdablers.xhtml#holdablers" name="holdablers">Holdability</a></div><div class="subSecContent" id="seccnt_holdablers"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('holdablers');">How to Control ResultSet Holdability</a></div><p class="subSecExplanation">When you create a <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> inside a transaction, it <em>depends on the driver whether you can still use the <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> after the <a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#commit()" class="javadoc">commit</a></em>. You can find out the driver's default with <a href="http://java.sun.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getResultSetHoldability()" class="javadoc">getResultSetHoldability</a>. However, <em>you can override the default behaviour</em> by specifying the holdability as a fourth argument to <a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String, int, int, int)" class="javadoc">prepareStatement</a>:</p><ul class="subSecList"><li><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#CLOSE_CURSORS_AT_COMMIT" class="javadoc"><em>CLOSE_CURSORS_AT_COMMIT</em></a> - close cursor after commit</li><li><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#HOLD_CURSORS_OVER_COMMIT" class="javadoc"><em>HOLD_CURSORS_OVER_COMMIT</em></a> - keep cursor open after commit</li></ul><p class="subSecExplanation">Specify the holdability like this: </p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String, int, int, int)" class="javadoc">prepareStatement</a>(sql, 
       <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#TYPE_SCROLL_INSENSITIVE" class="javadoc">ResultSet.TYPE_SCROLL_INSENSITIVE</a>, <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#CONCUR_READ_ONLY" class="javadoc">ResultSet.CONCUR_READ_ONLY</a>,
       <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#CLOSE_CURSORS_AT_COMMIT" class="javadoc"><em>ResultSet.CLOSE_CURSORS_AT_COMMIT</em></a>);
</code></pre><p class="subSecExplanation"/></div></div><div id="colla_arrays" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="arrays.xhtml#arrays" name="arrays">Arrays</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('arrays');">How to Handle SQL Arrays</a></div></div></div><div class="subSecRow2" id="sec_arrays" style="display: none"><div class="subSecHead" id="sechd_arrays"><a class="multipageHeadLink" href="arrays.xhtml#arrays" name="arrays">Arrays</a></div><div class="subSecContent" id="seccnt_arrays"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('arrays');">How to Handle SQL Arrays</a></div><p class="subSecExplanation">Some databases support storing arrays in columns, either only as part of custom types (Oracle) or also as regular type (PostgreSQL). The following definition in PostgreSQL syntax creates a table containing an array of <span class="idf">TIME</span> objects:</p><pre class="subSecConfig">CREATE TABLE ShowTimes (
  movieRef    int,
  times       <em>time[]</em>,
  FOREIGN KEY (movieRef) REFERENCES Movie(id)
)</pre><h4 class="subSecMiniHeadline">Arrays in ResultSets</h4><p class="subSecExplanation">Arrays are represented in JDBC by the <a href="http://java.sun.com/javase/6/docs/api/java/sql/Array.html" class="javadoc">Array</a> interface and can be read from the <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> with <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getArray(java.lang.String)" class="javadoc">getArray</a>:</p><pre class="subSecCode"><code>String sql = "SELECT times FROM ShowTimes WHERE movieRef=1";
<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String)" class="javadoc">prepareStatement</a>(sql);
<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> rs = stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeQuery()" class="javadoc">executeQuery</a>();
while (rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#next()" class="javadoc">next</a>()) {
    <a href="http://java.sun.com/javase/6/docs/api/java/sql/Array.html" class="javadoc">Array</a> sta = rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getArray(java.lang.String)" class="javadoc">getArray</a>("times");
    <a href="http://java.sun.com/javase/6/docs/api/java/sql/Time.html" class="javadoc">Time</a>[] showTimes  = (<a href="http://java.sun.com/javase/6/docs/api/java/sql/Time.html" class="javadoc">Time</a>[]) sta.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Array.html#getArray()" class="javadoc">getArray</a>();  <span class="cmt">// cast to array of JDBC type (<a href="#" id="tl-d286e4858" class="dottedTooltip" onclick="return tlClick('tl-d286e4858','pp-d286e4858');" onmouseover="return tlOver('tl-d286e4858','pp-d286e4858');" onmouseout="return tlOut('tl-d286e4858','pp-d286e4858');">more</a>)</span>
    for (<a href="http://java.sun.com/javase/6/docs/api/java/sql/Time.html" class="javadoc">Time</a> t: showTimes)
        System.out.println(t.toString());
}
</code></pre><p class="subSecExplanation">To retrieve very long arrays, <a href="http://java.sun.com/javase/6/docs/api/java/sql/Array.html" class="javadoc">Array</a> provides methods to retrieve slices of the array or to read the array as <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a>.</p><h4 class="subSecMiniHeadline">Arrays as Parameters</h4><p class="subSecExplanation"><em>Since JDBC 4.0</em> you can easily create an <a href="http://java.sun.com/javase/6/docs/api/java/sql/Array.html" class="javadoc">Array</a> object using <a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#createArrayOf(java.lang.String, java.lang.Object[])" class="javadoc">createArrayOf</a> and then set it as parameter using <a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setArray(int, java.sql.Array)" class="javadoc">setArray</a>. <em>JDBC 3.0 does not support <a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#createArrayOf(java.lang.String, java.lang.Object[])" class="javadoc">createArrayOf</a></em>, so you either need to use a driver-specific way of creating the array (some drivers support this), or use <a href="#creatingsql" onclick="if (event.button == 0) return goTo('#creatingsql', true); else return true;">dynamically created SQL</a> to create the array with the database's own SQL syntax. This example uses JDBC 4.0 to insert a line into the <span class="idf">ShowTimes</span> table:</p><pre class="subSecCode"><code>String sql = "INSERT INTO ShowTimes(movieRef, times) VALUES(8,?)";
<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String)" class="javadoc">prepareStatement</a>(sql);

<a href="http://java.sun.com/javase/6/docs/api/java/sql/Time.html" class="javadoc">Time</a>[] showTimes = new <a href="http://java.sun.com/javase/6/docs/api/java/sql/Time.html" class="javadoc">Time</a>[] {
    new <a href="http://java.sun.com/javase/6/docs/api/java/sql/Time.html" class="javadoc">Time</a>(new <a href="http://java.sun.com/javase/6/docs/api/java/util/GregorianCalendar.html" class="javadoc">GregorianCalendar</a>(1970,0,1, 18,30).<a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#getTimeInMillis()" class="javadoc">getTimeInMillis</a>()),  <span class="cmt">//  6:30pm</span>
    new <a href="http://java.sun.com/javase/6/docs/api/java/sql/Time.html" class="javadoc">Time</a>(new <a href="http://java.sun.com/javase/6/docs/api/java/util/GregorianCalendar.html" class="javadoc">GregorianCalendar</a>(1970,0,1, 20,15).<a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#getTimeInMillis()" class="javadoc">getTimeInMillis</a>()),  <span class="cmt">//  8:15pm</span>
    new <a href="http://java.sun.com/javase/6/docs/api/java/sql/Time.html" class="javadoc">Time</a>(new <a href="http://java.sun.com/javase/6/docs/api/java/util/GregorianCalendar.html" class="javadoc">GregorianCalendar</a>(1970,0,1, 23,00).<a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#getTimeInMillis()" class="javadoc">getTimeInMillis</a>()),  <span class="cmt">// 11:00pm</span>
};
stmt.<em><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setArray(int, java.sql.Array)" class="javadoc">setArray</a></em>(1, connection.<em><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#createArrayOf(java.lang.String, java.lang.Object[])" class="javadoc">createArrayOf</a></em>(<em>"time"</em>, showTimes)); <span class="cmt">// db type as first arg (<a href="#" id="tl-d286e5005" class="dottedTooltip" onclick="return tlClick('tl-d286e5005','pp-d286e5005');" onmouseover="return tlOver('tl-d286e5005','pp-d286e5005');" onmouseout="return tlOut('tl-d286e5005','pp-d286e5005');">more</a>)</span>

stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeUpdate()" class="javadoc">executeUpdate</a>();
</code></pre><p class="subSecExplanation"/></div></div><div id="colla_creatingsql" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="creatingsql.xhtml#creatingsql" name="creatingsql">Creating SQL</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('creatingsql');">How to Escape Strings in SQL to Prevent SQL Injection Attacks</a></div></div></div><div class="subSecRow1" id="sec_creatingsql" style="display: none"><div class="subSecHead" id="sechd_creatingsql"><a class="multipageHeadLink" href="creatingsql.xhtml#creatingsql" name="creatingsql">Creating SQL</a></div><div class="subSecContent" id="seccnt_creatingsql"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('creatingsql');">How to Escape Strings in SQL to Prevent SQL Injection Attacks</a></div><p class="subSecExplanation"> Dynamically creating SQL statements by putting values into SQL is a <em>well-known cause of bugs and, even worse, <a href="http://en.wikipedia.org/wiki/SQL_injection">SQL Injection</a> security issues</em>. As example, this method is supposed to find out the release date of a movie: </p><pre class="subSecCode"><code>Date getReleaseDate(<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection, String title) {
    <a href="http://java.sun.com/javase/6/docs/api/java/sql/Statement.html" class="javadoc">Statement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#createStatement()" class="javadoc">createStatement</a>();

    <span class="cmt">// <strong class="warn">DON'T DO THIS:</strong></span>
    String sql = "SELECT releaseDate FROM Movie WHERE <em>title='" + title +"'"</em>;

    ResultSet rs = stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Statement.html#executeQuery(java.lang.String)" class="javadoc">executeQuery</a>(sql);
    <a href="http://java.sun.com/javase/6/docs/api/java/sql/Date.html" class="javadoc">Date</a> r = rs.next() ? rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getDate(int)" class="javadoc">getDate</a>(1) : null;
    rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#close()" class="javadoc">close()</a>;
    return r;
}
</code></pre><p class="subSecExplanation">If the <em><span class="idf">title</span> parameter contains a single quote</em> (') or any other character that will be interpreted by the database (which ones exactly depends on the database), the SQL statement does not work as intended. If the title has been entered by a user and the user enters something like the following string as title, the <em>user can delete the whole table</em> or execute any other SQL statement:</p><pre class="subSecConfig">'; DELETE FROM Movie WHERE title!='</pre><p class="subSecExplanation">Because then the broken code above would execute the following SQL:</p><pre class="subSecConfig">SELECT releaseDate FROM Movie WHERE title='<em>'; DELETE FROM Movie WHERE title!='</em>';</pre><p class="subSecExplanation">In other words, <em>avoid creating SQL statements at runtime</em>, be careful not to put any arbitrary strings into the executed SQL, and be <em>especially careful with user input</em>.</p><p class="subSecExplanation">Unfortunately <em>JDBC does not offer any database-independant way of escaping strings</em> for safe use in SQL statements. If you really want to create your SQL this way, consult the database's manual on how to filter and escape strings to prevent SQL injection attacks. But in almost every case, <em>it's easier and safer to use <a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a>s with parameters</em>.</p></div></div><div id="colla_batch" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="batch.xhtml#batch" name="batch">Batch Update</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('batch');">How to Do a Batch Updates</a></div></div></div><div class="subSecRow2" id="sec_batch" style="display: none"><div class="subSecHead" id="sechd_batch"><a class="multipageHeadLink" href="batch.xhtml#batch" name="batch">Batch Update</a></div><div class="subSecContent" id="seccnt_batch"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('batch');">How to Do a Batch Updates</a></div><p class="subSecExplanation"> Batch updates allow you to <em>delay statement invocations to execute them in a single batch</em>. This is usually faster than executing them separately (<a href="#" id="tl-d286e5169" class="dottedTooltip" onclick="return tlClick('tl-d286e5169','pp-d286e5169');" onmouseover="return tlOver('tl-d286e5169','pp-d286e5169');" onmouseout="return tlOut('tl-d286e5169','pp-d286e5169');">more</a>). </p><p class="subSecExplanation">When used with <a href="#plainstatements" onclick="if (event.button == 0) return goTo('#plainstatements', true); else return true;">plain statements</a>, you can specify a list of SQL statements to execute (but can not use parameters and probably have to <a href="#creatingsql" onclick="if (event.button == 0) return goTo('#creatingsql', true); else return true;">escape strings in SQL</a>, with all the problems that it causes):</p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/Statement.html" class="javadoc">Statement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#createStatement()" class="javadoc">createStatement</a>();
String sqlStart = "INSERT INTO Movie(title,budget,releaseDate) VALUES";
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Statement.html#addBatch(java.lang.String)" class="javadoc"><em>addBatch</em></a>(sqlStart + "('The Goonies',19000000,{d '1985-06-07'})");
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Statement.html#addBatch(java.lang.String)" class="javadoc"><em>addBatch</em></a>(sqlStart + "('E.T.',10500000,{d '1982-06-1'})");
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Statement.html#addBatch(java.lang.String)" class="javadoc"><em>addBatch</em></a>(sqlStart + "('Raiders of the Lost Ark',20000000,{d '1981-06-12'})");
int updateCount[] = stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Statement.html#executeBatch()" class="javadoc"><em>executeBatch</em></a>();  <span class="cmt">// result contains number of updates</span>
</code></pre><p class="subSecExplanation"> With prepared statements, you can <em>execute the same SQL statement</em> several times, only the parameters can vary: </p><pre class="subSecCode"><code>String sql = "INSERT INTO Movie(title,budget,releaseDate) VALUES(?,?,?)";
<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/connection.prepareStatement.html" class="javadoc">connection.prepareStatement</a>(sql);

stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setString(int, java.lang.String)" class="javadoc">setString</a>(1, "The Goonies");
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/setInt.html" class="javadoc">setInt</a>(2, 19000000);
<a href="http://java.sun.com/javase/6/docs/api/java/sql/Date.html" class="javadoc">Date</a> june07_85 = new <a href="http://java.sun.com/javase/6/docs/api/java/sql/Date.html" class="javadoc">Date</a>(new <a href="http://java.sun.com/javase/6/docs/api/java/util/GregorianCalendar.html" class="javadoc">GregorianCalendar</a>(1985, <a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#JUNE" class="javadoc">Calendar.JUNE</a>, 7).<a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#getTimeInMillis()" class="javadoc">getTimeInMillis</a>());
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setString(int, java.sql.Date)" class="javadoc">setDate</a>(3, june07_85);
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#addBatch()" class="javadoc"><em>addBatch</em></a>();

stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setString(int, java.lang.String)" class="javadoc">setString</a>(1, "E.T.");
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/setInt.html" class="javadoc">setInt</a>(2, 10500000);
<a href="http://java.sun.com/javase/6/docs/api/java/sql/Date.html" class="javadoc">Date</a> june01_82 = new <a href="http://java.sun.com/javase/6/docs/api/java/sql/Date.html" class="javadoc">Date</a>(new <a href="http://java.sun.com/javase/6/docs/api/java/util/GregorianCalendar.html" class="javadoc">GregorianCalendar</a>(1982, <a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#JUNE" class="javadoc">Calendar.JUNE</a>, 1).<a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#getTimeInMillis()" class="javadoc">getTimeInMillis</a>());
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setString(int, java.sql.Date)" class="javadoc">setDate</a>(3, june01_82);
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#addBatch()" class="javadoc"><em>addBatch</em></a>();

int updateCount[] = stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Statement.html#executeBatch()" class="javadoc"><em>executeBatch</em></a>();  <span class="cmt">// result contains number of updates</span>
</code></pre><p class="subSecExplanation"/></div></div><div id="colla_performance" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="performance.xhtml#performance" name="performance">Performance</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('performance');">How to Improve Performance</a></div></div></div><div class="subSecRow1" id="sec_performance" style="display: none"><div class="subSecHead" id="sechd_performance"><a class="multipageHeadLink" href="performance.xhtml#performance" name="performance">Performance</a></div><div class="subSecContent" id="seccnt_performance"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('performance');">How to Improve Performance</a></div><p class="subSecExplanation">There are several ways of improving performance with JDBC:</p><ul class="subSecList"><li>In general, <em>the database is the bottleneck</em> and not JDBC. Optimize on the database side first: <ul><li><em>Optimize your SQL</em> code. Use an <a href="http://en.wikipedia.org/wiki/Explain_Plan">explain plan</a> to understand the database's behaviour.</li><li>Optimize the <em>database schema and its indexes</em>.</li><li>Try to return <em>as few results as possible</em>. Less data means better performance.</li></ul> </li><li><em>Use <a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> with parameters</em> and reuse the statement object, instead of creating new statements every time. Some databases perform worse when you create new statements for every query.</li><li><em>Use <a href="batch">batch updates</a></em> if you execute many update statements that do not depend on each other.</li><li>For queries with many results, consider <a href="fetchsizes">optimizing the fetch size</a>.</li></ul></div></div><div id="colla_dateandtime" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="dateandtime.xhtml#dateandtime" name="dateandtime">Date and Time</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('dateandtime');">How to Handle Date and Time</a></div></div></div><div class="subSecRow2" id="sec_dateandtime" style="display: none"><div class="subSecHead" id="sechd_dateandtime"><a class="multipageHeadLink" href="dateandtime.xhtml#dateandtime" name="dateandtime">Date and Time</a></div><div class="subSecContent" id="seccnt_dateandtime"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('dateandtime');">How to Handle Date and Time</a></div><p class="subSecExplanation"> JDBC comes with <em>own types for date and time</em>. When you read or write a date in JDBC, you need to be sure to take the right one. </p><h4 class="subSecMiniHeadline">JDBC Types</h4><div class="subSecTableDiv"><table><tr><th>SQL Type</th><th>JDBC Class</th><th>Description</th><th>ResultSet</th><th>Parameter</th></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#DATE" class="javadoc">DATE</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Date.html" class="javadoc">java.sql.Date</a></td><td>Date (<em>without time!</em>) (<a href="#" id="tl-d286e5474" class="dottedTooltip" onclick="return tlClick('tl-d286e5474','pp-d286e5474');" onmouseover="return tlOver('tl-d286e5474','pp-d286e5474');" onmouseout="return tlOut('tl-d286e5474','pp-d286e5474');">more</a>)</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getDate(java.lang.String)" class="javadoc">getDate</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setDate(int, java.sql.Date)" class="javadoc">setDate</a></td></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#TIME" class="javadoc">TIME</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Time.html" class="javadoc">java.sql.Time</a></td><td>time of day (<a href="#" id="tl-d286e5508" class="dottedTooltip" onclick="return tlClick('tl-d286e5508','pp-d286e5508');" onmouseover="return tlOver('tl-d286e5508','pp-d286e5508');" onmouseout="return tlOut('tl-d286e5508','pp-d286e5508');">more</a>)</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getTime(java.lang.String)" class="javadoc">getTime</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setTime(int, java.sql.Time)" class="javadoc">setTime</a></td></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#TIMESTAMP" class="javadoc">TIMESTAMP</a>, <span class="idf">DATETIME</span></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Timestamp.html" class="javadoc">java.sql.Timestamp</a></td><td>date and time (<a href="#" id="tl-d286e5537" class="dottedTooltip" onclick="return tlClick('tl-d286e5537','pp-d286e5537');" onmouseover="return tlOver('tl-d286e5537','pp-d286e5537');" onmouseout="return tlOut('tl-d286e5537','pp-d286e5537');">more</a>)</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getTimestamp(java.lang.String)" class="javadoc">getTimestamp</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setTimestamp(int, java.sql.Timestamp)" class="javadoc">setTimestamp</a></td></tr></table></div><p class="subSecExplanation">Note: use <em><a href="http://java.sun.com/javase/6/docs/api/java/sql/Timestamp.html" class="javadoc">java.sql.Timestamp</a> for dates with time</em>, and <em><a href="http://java.sun.com/javase/6/docs/api/java/sql/Date.html" class="javadoc">java.sql.Date</a> only for dates without time (midnight)</em>. Even though the name may suggest that <a href="http://java.sun.com/javase/6/docs/api/java/sql/Date.html" class="javadoc">java.sql.Date</a> is the JDBC equivalent of <a href="http://java.sun.com/javase/6/docs/api/java/util/Date.html" class="javadoc">java.util.Date</a>, it is not. </p><h4 class="subSecMiniHeadline">Literals</h4><p class="subSecExplanation"> Instead of the database's native syntax, JDBC's escape syntax supports database-independent literals.</p><div class="subSecTableDiv"><table><tr><th>Syntax</th><th>Example</th><th>Description</th></tr><tr><td>{d 'yyyy-mm-dd'}</td><td>{d '2010-06-30'}</td><td>Date</td></tr><tr><td>{t 'hh:mm:ss'}</td><td>{t '17:30:00')</td><td>Time</td></tr><tr><td>{ts 'yyyy-mm-dd hh:mm:ss'}</td><td>{ts '2000-12-24 18:00:00'}</td><td>Timestamp (second precision)</td></tr><tr><td>{ts 'yyyy-mm-dd hh:mm:ss.fff'}</td><td>{ts '2006-10-06 09:34:15.51712'}</td><td>Timestamp (with fractional second)</td></tr></table></div><p class="subSecExplanation">Example:</p><pre class="subSecCode"><code>String sql = "SELECT title FROM Movie WHERE releaseDate &gt; <em>{d '1980-01-01'}</em>";
<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String)" class="javadoc">prepareStatement</a>(sql);
<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> rs = stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeQuery()" class="javadoc">executeQuery</a>();
</code></pre><p class="subSecExplanation"/></div></div><div id="colla_fetchsizes" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="fetchsizes.xhtml#fetchsizes" name="fetchsizes">Fetch Sizes</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('fetchsizes');">How to Set the Fetch Size</a></div></div></div><div class="subSecRow1" id="sec_fetchsizes" style="display: none"><div class="subSecHead" id="sechd_fetchsizes"><a class="multipageHeadLink" href="fetchsizes.xhtml#fetchsizes" name="fetchsizes">Fetch Sizes</a></div><div class="subSecContent" id="seccnt_fetchsizes"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('fetchsizes');">How to Set the Fetch Size</a></div><p class="subSecExplanation">When you execute a query, <em>a JDBC driver may load the rows incrementally</em> as you browse through them, instead of fetching the whole result at once. You can use the method <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#setFetchSize(int)" class="javadoc"><em>setFetchSize</em></a> to tell the driver how many rows it should load at once. Note that this is merely <em>a hint for the driver</em>, and it only affects the driver's performance, but not its function. </p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection = <span class="abstract">...</span> ;

String sql = "SELECT * FROM Movie";
<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String)" class="javadoc">prepareStatement</a>(sql);
<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> rs = stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeQuery()" class="javadoc">executeQuery</a>();
rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#setFetchSize(int)" class="javadoc"><em>setFetchSize</em></a>(100);  <span class="cmt">// recommend fetch size</span>

while (rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#next()" class="javadoc">next</a>()) {
    <span class="cmt">// ...</span>
}
</code></pre><p class="subSecExplanation">Setting the fetch size is useful, for example, when you may abort reading a large <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> after a few rows. Then you would set the fetch size very low, to avoid reading too much data.</p></div></div><div id="colla_timeout" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="timeout.xhtml#timeout" name="timeout">Query Timeout</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('timeout');">How to Set the Query Timeout</a></div></div></div><div class="subSecRow2" id="sec_timeout" style="display: none"><div class="subSecHead" id="sechd_timeout"><a class="multipageHeadLink" href="timeout.xhtml#timeout" name="timeout">Query Timeout</a></div><div class="subSecContent" id="seccnt_timeout"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('timeout');">How to Set the Query Timeout</a></div><p class="subSecExplanation">Database queries can run a long time. <em>By default the driver decides how long a query may run</em> before the driver aborts it and throws a <a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLTimeoutException.html" class="javadoc">SQLTimeoutException</a>. If you need the driver to wait at least a certain amount of time, use <a href="" class="javadoc"><em>setQueryTimeout</em></a> to set the minimum timeout value (the driver is allowed to wait longer though). </p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection = <span class="abstract">...</span> ;

String sql = "SELECT * FROM Movie";
<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String)" class="javadoc">prepareStatement</a>(sql);
stmt.<a href="" class="javadoc"><em>setQueryTimeout</em></a>(100);  <span class="cmt">// wait at least 100s</span>
<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> rs = stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeQuery()" class="javadoc">executeQuery</a>();

while (rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#next()" class="javadoc">next</a>()) {
    <span class="cmt">// ...</span>
}
</code></pre><p class="subSecExplanation">Note that a JDBC driver may also apply the timeout value to the <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a>, thus throwing an error if you use the <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> for too long. This behaviour is driver-dependent.</p></div></div><div id="colla_rowsets" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="rowsets.xhtml#rowsets" name="rowsets">RowSets</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('rowsets');">What are RowSets?</a></div></div></div><div class="subSecRow1" id="sec_rowsets" style="display: none"><div class="subSecHead" id="sechd_rowsets"><a class="multipageHeadLink" href="rowsets.xhtml#rowsets" name="rowsets">RowSets</a></div><div class="subSecContent" id="seccnt_rowsets"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('rowsets');">What are RowSets?</a></div><p class="subSecExplanation"><a href="http://java.sun.com/javase/6/docs/api/javax/sql/RowSet.html" class="javadoc">RowSet</a>s are wrappers for <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a>s that <em>add features for GUI applications</em> and similar programs. The standard <a href="http://java.sun.com/javase/6/docs/api/javax/sql/RowSet.html" class="javadoc">RowSet</a> allows accessing the data as <em>JavaBeans component with properties and event notifications</em> and is designed for use in visual GUI editors.</p><p class="subSecExplanation">The most important <a href="http://java.sun.com/javase/6/docs/api/javax/sql/RowSet.html" class="javadoc">RowSet</a> variant is the <a href="http://java.sun.com/javase/6/docs/api/javax/sql/CachedRowSet.html" class="javadoc">CachedRowSet</a>. It can disconnect from the database to edit the data offline. Later it can re-connect and synchronize with the database. Other rowsets add features like XML serialization and filtering.</p><p class="subSecExplanation">Rowsets are a complex topic and out of the scope of this tutorial. Also, <em>rowsets are not really relevant anymore</em>, as GUI applications accessing databases directly are mostly out of fashion today. If you still want to learn more about rowsets, read the <a href="http://java.sun.com/j2se/1.5/pdf/jdbc-rowset-tutorial-1.5.0.pdf">rowset tutorial</a>.</p></div></div><div id="colla_dbmetadata" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="dbmetadata.xhtml#dbmetadata" name="dbmetadata">DB Metadata</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('dbmetadata');">How to Find Out the Database's Capabilities (DatabaseMetaData)</a></div></div></div><div class="subSecRow2" id="sec_dbmetadata" style="display: none"><div class="subSecHead" id="sechd_dbmetadata"><a class="multipageHeadLink" href="dbmetadata.xhtml#dbmetadata" name="dbmetadata">DB Metadata</a></div><div class="subSecContent" id="seccnt_dbmetadata"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('dbmetadata');">How to Find Out the Database's Capabilities (DatabaseMetaData)</a></div><p class="subSecExplanation"> Each database and each JDBC driver has its own limitations and <em>supports a different subset of the JDBC API</em>. There is probably no database that supports all JDBC features. To learn what a driver supports, you can retrieve a <a href="http://java.sun.com/javase/6/docs/api/java/sql/DatabaseMetaData.html" class="javadoc">DatabaseMetaData</a> object from the <a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a>, which allows you to find out about the database's capabilities as well as the connection's properties. </p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection = <span class="abstract">...</span> ;

<span class="cmt">// Print some random meta data</span>
<a href="http://java.sun.com/javase/6/docs/api/java/sql/DatabaseMetaData.html" class="javadoc"><em>DatabaseMetaData</em></a> meta = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#getMetaData()" class="javadoc"><em>getMetaData</em></a>();
System.out.println("Connection URL: "+meta.<a href="http://java.sun.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getURL()" class="javadoc"><em>getURL</em></a>());
System.out.println("Supports stored procedures: "+meta.<a href="http://java.sun.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#supportsStoredProcedures()" class="javadoc"><em>supportsStoredProcedures</em></a>());
System.out.println("Max row size in bytes: "+meta.<a href="http://java.sun.com/javase/6/docs/api/java/sql/DatabaseMetaData.html#getMaxRowSize()" class="javadoc"><em>getMaxRowSize</em></a>());
</code></pre><p class="subSecExplanation"/></div></div><div id="colla_resultsetmetadata" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="resultsetmetadata.xhtml#resultsetmetadata" name="resultsetmetadata">ResultSet Meta Data</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('resultsetmetadata');">How to Find Out About the Columns of a ResultSet (ResultSetMetaData)</a></div></div></div><div class="subSecRow1" id="sec_resultsetmetadata" style="display: none"><div class="subSecHead" id="sechd_resultsetmetadata"><a class="multipageHeadLink" href="resultsetmetadata.xhtml#resultsetmetadata" name="resultsetmetadata">ResultSet Meta Data</a></div><div class="subSecContent" id="seccnt_resultsetmetadata"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('resultsetmetadata');">How to Find Out About the Columns of a ResultSet (ResultSetMetaData)</a></div><p class="subSecExplanation">The <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSetMetaData.html" class="javadoc">ResultSetMetaData</a> object allows you to <em>find out about the column definitions</em> of a <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a>. This is mostly useful when writing a generic database tool.</p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection = <span class="abstract">...</span> ;

String sql = "SELECT * FROM Movie";
<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String)" class="javadoc">prepareStatement</a>(sql);
<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> rs = stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeQuery()" class="javadoc">executeQuery</a>();

<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSetMetaData.html" class="javadoc"><em>ResultSetMetaData</em></a> meta = rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getMetaData()" class="javadoc"><em>getMetaData</em></a>();
for (int i = <em>1</em>; i &lt;= meta.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSetMetaData.html#getColumnCount()" class="javadoc"><em>getColumnCount</em></a>(); i++)   <span class="cmt">// print column names and types</span>
    System.out.printf("%s (%s)\t", meta.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSetMetaData.html#getColumnLabel(int)" class="javadoc"><em>getColumnLabel</em></a>(i), meta.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSetMetaData.html#getColumnTypeName(int)" class="javadoc"><em>getColumnTypeName</em></a>(i));
System.out.println();

while (rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#next()" class="javadoc">next</a>()) {
    for (int i = 1; i &lt; meta.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSetMetaData.html#getColumnCount()" class="javadoc"><em>getColumnCount</em></a>(); i++)
        System.out.print(rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getString(int)" class="javadoc">getString</a>(i) + '\t');
    System.out.println();
}
</code></pre><p class="subSecExplanation"/></div></div><div id="colla_blobs" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="blobs.xhtml#blobs" name="blobs">Blobs / Clobs</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('blobs');">How to Use Blobs and Clobs</a></div></div></div><div class="subSecRow2" id="sec_blobs" style="display: none"><div class="subSecHead" id="sechd_blobs"><a class="multipageHeadLink" href="blobs.xhtml#blobs" name="blobs">Blobs / Clobs</a></div><div class="subSecContent" id="seccnt_blobs"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('blobs');">How to Use Blobs and Clobs</a></div><p class="subSecExplanation">JDBC represents blobs (binary large objects) with the <a href="http://java.sun.com/javase/6/docs/api/java/sql/Blob.html" class="javadoc">Blob</a> interface. It allows you to access the blog either <em>as byte stream</em>, or by reading and writing parts of the blob with byte arrays. Because of the unlimited size of the blob you <em>can not directly access it as byte array</em>. <br/> Clobs are the equivalent of <em>blobs for large texts</em>: you access the <a href="http://java.sun.com/javase/6/docs/api/java/sql/Clob.html" class="javadoc">Clob</a> interface using character streams or by setting and retrieving substrings, but never the whole clob.</p><h4 class="subSecMiniHeadline">Example Schema</h4><p class="subSecExplanation">The following examples use this table (Java DB syntax):</p><pre class="subSecConfig">CREATE TABLE MoviePicture (
  movieRef    int,
  picture     <em>blob</em>,
  FOREIGN KEY (movieRef) REFERENCES Movie(id)
)</pre><h4 class="subSecMiniHeadline">Setting a Blob as Parameter</h4><p class="subSecExplanation">The following example inserts a row containing a blob. Note that in JDBC's API <em>all positions in <a href="http://java.sun.com/javase/6/docs/api/java/sql/Blob.html" class="javadoc">Blob</a> are always 1-based</em> (thus specify <span class="idf">1</span> instead of <span class="idf">0</span> to write something at the beginning of the blob). </p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection = <span class="abstract">...</span> ;
String sql = "INSERT INTO MoviePicture(movieRef, picture) VALUES(1, ?)";
<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String)" class="javadoc">prepareStatement</a>(sql);

<a href="http://java.sun.com/javase/6/docs/api/java/sql/Blob.html" class="javadoc"><em>Blob</em></a> blob = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#createBlob()" class="javadoc"><em>createBlob</em></a>();
<a href="http://java.sun.com/javase/6/docs/api/java/io/OutputStream.html" class="javadoc">OutputStream</a> blobOs = blob.<em><a href="http://java.sun.com/javase/6/docs/api/java/sql/Blob.html#setBinaryStream(long)" class="javadoc">setBinaryStream</a>(1)</em>;           <span class="cmt">// <em>1 is beginning of the stream!</em></span>
IOUtils.copy(new <a href="http://java.sun.com/javase/6/docs/api/java/io/FileInputStream.html" class="javadoc">FileInputStream</a>("jaws.jpeg"), blobOs);  <span class="cmt">// from copy file into blob (<a href="#" id="tl-d286e6211" class="dottedTooltip" onclick="return tlClick('tl-d286e6211','pp-d286e6211');" onmouseover="return tlOver('tl-d286e6211','pp-d286e6211');" onmouseout="return tlOut('tl-d286e6211','pp-d286e6211');">more</a>)</span>
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setBlob(int, java.sql.Blob)" class="javadoc">setBlob</a>(1, blob);
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeUpdate()" class="javadoc">executeUpdate</a>();
</code></pre><h4 class="subSecMiniHeadline">Reading a Blob from a ResultSet</h4><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection = <span class="abstract">...</span> ;
String sql = "SELECT picture FROM MoviePicture";
<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String)" class="javadoc">prepareStatement</a>(sql);
<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> rs = stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeQuery()" class="javadoc">executeQuery</a>();

while (rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#next()" class="javadoc">next</a>()) {
    <a href="http://java.sun.com/javase/6/docs/api/java/sql/Blob.html" class="javadoc"><em>Blob</em></a> blob = rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getBlob(java.lang.String)" class="javadoc"><em>getBlob</em></a>("picture");
    long len = blob.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Blob.html#length()" class="javadoc"><em>length</em></a>();
    if (len &lt; 64000) {
        byte[] img = blob.<em><a href="http://java.sun.com/javase/6/docs/api/java/sql/Blob.html#getBytes(long, int)" class="javadoc">getBytes</a>(1, (int)blob.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Blob.html#length()" class="javadoc">length</a>())</em>;  <span class="cmt">// <em>starts at 1!</em></span>
    <span class="cmt">// do something with <span class="idf">img</span> here...</span>
    }
    else
        System.out.println("Blob is longer than 64000 bytes, won't load");
}
</code></pre><h4 class="subSecMiniHeadline">Working with Clobs</h4><p class="subSecExplanation"><a href="http://java.sun.com/javase/6/docs/api/java/sql/Clob.html" class="javadoc">Clob</a>s are used like blobs, just with character streams and strings. Creating a clob:</p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/Clob.html" class="javadoc"><em>Clob</em></a> clob = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#createClob()" class="javadoc"><em>createClob</em></a>();
clob.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Clob.html#setString(long, java.lang.String)" class="javadoc">setString</a>(1,  "hello");  <span class="cmt">// <em>first position is 1!</em></span>
</code></pre><p class="subSecExplanation">Reading a clob:</p><pre class="subSecCode"><code>long len = clob.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Clob.html#length()" class="javadoc"><em>length</em></a>();
if (len &lt; 64000) {  <span class="cmt">// if text not too long</span>
    String text = clob.<em><a href="http://java.sun.com/javase/6/docs/api/java/sql/Clob.html#getSubString(long, int)" class="javadoc">getSubString</a>(1, (int)clob.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Clob.html#length()" class="javadoc">length</a>())</em>;
    <span class="cmt">// do something with <span class="idf">text</span> ...</span>
}
</code></pre><h4 class="subSecMiniHeadline">Freeing Blob/Clob Resources</h4><p class="subSecExplanation"> Blobs and clobs can consume a lot of memory. If you plan to keep your <a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> much longer open than you need your <a href="http://java.sun.com/javase/6/docs/api/java/sql/Blob.html" class="javadoc">Blob</a>, <em>free those resources explicitly</em> when you dont need the blob anymore: </p><pre class="subSecCode"><code>blob.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Clob.html#free()" class="javadoc"><em>free</em></a>();
</code></pre><p class="subSecExplanation"/></div></div><div id="colla_xml" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="xml.xhtml#xml" name="xml">XML</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('xml');">How to Access XML</a></div></div></div><div class="subSecRow1" id="sec_xml" style="display: none"><div class="subSecHead" id="sechd_xml"><a class="multipageHeadLink" href="xml.xhtml#xml" name="xml">XML</a></div><div class="subSecContent" id="seccnt_xml"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('xml');">How to Access XML</a></div><p class="subSecExplanation"><em>Since JDBC 4.0</em> you can access XML natively with the <em><a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLXML.html" class="javadoc">SQLXML</a> type</em> (if the database supports this - many do not). It's mostly like a <a href="http://java.sun.com/javase/6/docs/api/java/sql/Blob.html" class="javadoc">Blob</a> or <a href="http://java.sun.com/javase/6/docs/api/java/sql/Clob.html" class="javadoc">Clob</a>, allowing you to access the XML as binary stream, character stream or string. The only XML-specific methods are <em><a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLXML.html#getSource(java.lang.Class)" class="javadoc">getSource</a> and <a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLXML.html#setResult(java.lang.Class)" class="javadoc">setResult</a></em>, which allow you to work with standard Java APIs on the XML.</p><p class="subSecExplanation">Note that JDBC itself offers no way of working with XML other than by reading or writing the whole XML document. Use SQL, either with the <a href="http://en.wikipedia.org/wiki/SQL/XML">SQL/XML</a> functions or priorietary extensions, to access parts of a XML document.</p><p class="subSecExplanation">The following examples assume that your database has the following table: </p><pre class="subSecConfig">CREATE TABLE MovieMeta (
  movieRef    int,
  metaData    <em>xml</em>,
  FOREIGN KEY (movieRef) REFERENCES Movie(id)
)
</pre><h4 class="subSecMiniHeadline">Compatibility</h4><p class="subSecExplanation">Note that <em>many databases do not support XML</em>, or their JDBC driver does not support it. This includes Java DB. The following examples have been tested with PostgreSQL 8.4.</p><h4 class="subSecMiniHeadline">Setting XML as Parameter</h4><p class="subSecExplanation"> <a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLXML.html" class="javadoc">SQLXML</a> instances have to created using the <a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a>. Then you can set the XML content, either as stream, string or by writing a <a href="http://java.sun.com/javase/6/docs/api/javax/xml/transform/Result.html" class="javadoc">Result</a>. This example shows how to write a JAXB XML tree into the database: </p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection = <span class="abstract">...</span> ;
MovieMetaData jaxbObject = new <span class="abstract">MovieMetaData</span>();  <span class="cmt">// some <em>JAXB object</em></span>

String sql = "INSERT INTO MovieMeta(movieRef, metaData) VALUES(1, ?)";
<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String)" class="javadoc">prepareStatement</a>(sql);

<a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLXML.html" class="javadoc"><em>SQLXML</em></a> xml = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#createSQLXML()" class="javadoc"><em>createSQLXML</em></a>();
<a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXB.html#marshal(java.lang.Object, javax.xml.transform.Result)" class="javadoc">JAXB.marshal</a>(jaxbObject, xml.<a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLXML.html#setResult(java.lang.Class)" class="javadoc"><em>setResult</em></a>(<a href="http://java.sun.com/javase/6/docs/api/javax/xml/transform/sax/SAXResult.html" class="javadoc">javax.xml.transform.sax.SAXResult.class</a>));
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setSQLXML(int, java.sql.SQLXML)" class="javadoc">setSQLXML</a>(1, xml);
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeUpdate()" class="javadoc">executeUpdate</a>();
</code></pre><h4 class="subSecMiniHeadline">Reading XML from a ResultSet</h4><p class="subSecExplanation">This example reads XML from the database using JAXB (requires a JAXB xml mapping, <span class="abstract">MovieMetaData</span> here):</p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection = <span class="abstract">...</span> ;
String sql = "SELECT metaData FROM MovieMeta";
<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String)" class="javadoc">prepareStatement</a>(sql);
<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> rs = stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeQuery()" class="javadoc">executeQuery</a>();

while (rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#next()" class="javadoc">next</a>()) {
    <a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLXML.html" class="javadoc"><em>SQLXML</em></a> metaXml = rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getSQLXML(java.lang.String)" class="javadoc"><em>getSQLXML</em></a>("metaData");
    MovieMetaData jaxbObject = <a href="http://java.sun.com/javase/6/docs/api/javax/xml/bind/JAXB.html#unmarshal(javax.xml.transform.Source, java.lang.Class)" class="javadoc">JAXB.unmarshal</a>(
            metaXml.<a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLXML.html#getSource(java.lang.Class)" class="javadoc"><em>getSource</em></a>(<a href="http://java.sun.com/javase/6/docs/api/javax/xml/transform/sax/SAXSource.html" class="javadoc">javax.xml.transform.sax.SAXSource.class</a>), MovieMetaData.class);

    <span class="cmt">// <span class="abstract">do something with <span class="idf">jaxbObject</span></span></span>
}
</code></pre></div></div><div id="colla_arrayparameters" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="arrayparameters.xhtml#arrayparameters" name="arrayparameters">Array Parameters</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('arrayparameters');">How to Pass an Array as Parameter for the IN operator</a></div></div></div><div class="subSecRow2" id="sec_arrayparameters" style="display: none"><div class="subSecHead" id="sechd_arrayparameters"><a class="multipageHeadLink" href="arrayparameters.xhtml#arrayparameters" name="arrayparameters">Array Parameters</a></div><div class="subSecContent" id="seccnt_arrayparameters"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('arrayparameters');">How to Pass an Array as Parameter for the IN operator</a></div><p class="subSecExplanation"><em>Since JDBC 4.0</em>, you can create an SQL array for the IN parameter:</p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> con = <span class="abstract">...</span>;
String[] titles = <span class="abstract">...</span>;

<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = con.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String)" class="javadoc">prepareStatement</a>("SELECT * FROM Movie WHERE <em>title IN ?</em>");
<a href="http://java.sun.com/javase/6/docs/api/java/sql/Array.html" class="javadoc">Array</a> array = con.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#createArrayOf(java.lang.String, java.lang.Object[])" class="javadoc">createArrayOf</a>("varchar", titles);
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setArray(int, java.sql.Array)" class="javadoc">setArray</a>(1, array);
</code></pre><p class="subSecExplanation">JDBC 3.0 and earlier do not have a nice way to pass lists or arrays. Usually you have the following options:</p><ul class="subSecList"><li>Some database drivers offer a <em>proprietary way</em> of creating an SQL <a href="http://java.sun.com/javase/6/docs/api/java/sql/Array.html" class="javadoc">Array</a>. Then you can work like with JDBC 4.0, but your code is not portable.</li><li>If you have a fixed number of arguments, <em>use a parameter for each</em> (e.g. <span class="plainCode">"SELECT * FROM users WHERE name in (?, ?, ?)"</span>).</li><li>Use <a href="#" id="tl-d286e6756" class="dottedTooltip" onclick="return tpcClick('tl-d286e6756','pp-d286e102');" onmouseover="return tpcOver('tl-d286e6756','pp-d286e102');" onmouseout="return tpcOut('tl-d286e6756','pp-d286e102');">JPA</a> instead of JDBC direcly. JPA allows setting collections as query parameters.</li><li>Create the <em>SQL statement dynamically</em>. This should be a <em>last resort</em>, as it can be complicated to get right, especially with strings. Be sure to escape all values correctly.</li></ul></div></div><div id="colla_transactionisolation" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="transactionisolation.xhtml#transactionisolation" name="transactionisolation">Isolation</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('transactionisolation');">How to Set the Transaction Isolation Level</a></div></div></div><div class="subSecRow1" id="sec_transactionisolation" style="display: none"><div class="subSecHead" id="sechd_transactionisolation"><a class="multipageHeadLink" href="transactionisolation.xhtml#transactionisolation" name="transactionisolation">Isolation</a></div><div class="subSecContent" id="seccnt_transactionisolation"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('transactionisolation');">How to Set the Transaction Isolation Level</a></div><p class="subSecExplanation"> The transaction isolation level defines what happens when another client <em>modifies data you read</em> in your transaction. The default behaviour, if you do not set the isolation level explicitly, depends on your driver. Thus <em>truly portable applications must set the isolation level</em>. </p><p class="subSecExplanation"> JDBC defines <em>four isolation levels</em>. Higher isolation levels are better, because there are fewer side-effects to worry about, but also slower. A driver is <em>not required to implement the isolation levels exactly</em>, but must provide you at least with the isolation you requested. If it can not fulfill this, it must throw an <a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLException.html" class="javadoc">SQLException</a>.</p><div class="subSecTableDiv"><table><tr><th>Level</th><th>Transactions enabled</th><th><a href="#" id="tl-d286e6813" class="dottedTooltip" onclick="return tlClick('tl-d286e6813','pp-d286e6816');" onmouseover="return tlOver('tl-d286e6813','pp-d286e6816');" onmouseout="return tlOut('tl-d286e6813','pp-d286e6816');">Dirty Reads</a></th><th><a href="#" id="tl-d286e6825" class="dottedTooltip" onclick="return tlClick('tl-d286e6825','pp-d286e6828');" onmouseover="return tlOver('tl-d286e6825','pp-d286e6828');" onmouseout="return tlOut('tl-d286e6825','pp-d286e6828');">Nonrepeatable Reads</a></th><th><a href="#" id="tl-d286e6835" class="dottedTooltip" onclick="return tlClick('tl-d286e6835','pp-d286e6838');" onmouseover="return tlOver('tl-d286e6835','pp-d286e6838');" onmouseout="return tlOut('tl-d286e6835','pp-d286e6838');">Phantom Reads</a></th></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#TRANSACTION_NONE" class="javadoc">TRANSACTION_NONE</a></td><td>no</td><td>possible</td><td>possible</td><td>possible</td></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#TRANSACTION_READ_UNCOMMITTED" class="javadoc">TRANSACTION_READ_UNCOMMITTED</a></td><td>yes</td><td>possible</td><td>possible</td><td>possible</td></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#TRANSACTION_READ_COMMITTED" class="javadoc">TRANSACTION_READ_COMMITTED</a></td><td>yes</td><td>not possible</td><td>possible</td><td>possible</td></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#TRANSACTION_REPEATABLE_READ" class="javadoc">TRANSACTION_REPEATABLE_READ</a></td><td>yes</td><td>not possible</td><td>not possible</td><td>possible</td></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#TRANSACTION_SERIALIZABLE" class="javadoc">TRANSACTION_SERIALIZABLE</a></td><td>yes</td><td>not possible</td><td>not possible</td><td>not possible</td></tr></table></div><p class="subSecExplanation">Use <a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#setTransactionIsolation(int)" class="javadoc">setTransactionIsolation</a> to set the isolation level <em>before you execute the first statement</em> of a transaction (the result of setting it in the middle of a transaction is driver-dependent). The level will be kept for all future transactions of the <a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a>. </p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection = <span class="abstract">...</span> ;
try {
    connection.<em><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#setTransactionIsolation(int)" class="javadoc">setTransactionIsolation</a>(<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#TRANSACTION_SERIALIZABLE" class="javadoc">Connection.TRANSACTION_SERIALIZABLE</a>)</em>;
    connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#setAutoCommit(boolean)" class="javadoc">setAutoCommit</a>(false);  <span class="cmt">// begin transaction</span>

    <span class="cmt">// ...</span>

    connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#commit()" class="javadoc">commit</a>();
}
catch (RuntimeException e) {
    connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#rollback()" class="javadoc">rollback</a>();            <span class="cmt">// rollback on unhandled error</span>
}
finally {
    connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#close()" class="javadoc">close</a>();
}
</code></pre></div></div><div id="colla_drivercats" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="drivercats.xhtml#drivercats" name="drivercats">Driver Categories</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('drivercats');">What are JDBC Driver Categories?</a></div></div></div><div class="subSecRow2" id="sec_drivercats" style="display: none"><div class="subSecHead" id="sechd_drivercats"><a class="multipageHeadLink" href="drivercats.xhtml#drivercats" name="drivercats">Driver Categories</a></div><div class="subSecContent" id="seccnt_drivercats"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('drivercats');">What are JDBC Driver Categories?</a></div><p class="subSecExplanation"> <em>JDBC defines four categories of drivers</em>. The classification describes how they are implemented and it may give hints of how to install them. <em>From an API point of view, there is no difference</em> between those four categories. </p><ul class="subSecList"><li><em>Category 1: JDBC/ODBC bridge</em>. This type of driver uses Microsoft's <a href="http://en.wikipedia.org/wiki/Open_Database_Connectivity">ODBC</a> interface to access the database and was popular in the early days of JDBC when there were no native JDBC drivers. Today you should not use this anymore.</li><li><em>Category 2: Native API driver</em>. Those drivers use a native library to access the database and were used before database network protocols were implemented in Java. In some cases they may be faster than category 4 drivers, but in all other cases they are not worth the trouble.</li><li><em>Category 3: Network-translating driver</em>. This type of driver did not use the database's native protocol, but required a middleware between the driver and the database to translate between their protocols. Category 3 has never been popular and is irrelevant today.</li><li><em>Category 4: Pure Java driver</em>. A driver that is written in 100% Java and communicates directly with the database. In almost all cases, <em>this is what you want</em>, and category 4 drivers are available for practically all current databases.</li></ul></div></div><div id="colla_wheretoputstatements" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="wheretoputstatements.xhtml#wheretoputstatements" name="wheretoputstatements">Statements</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('wheretoputstatements');">Where to Put SQL Statements</a></div></div></div><div class="subSecRow1" id="sec_wheretoputstatements" style="display: none"><div class="subSecHead" id="sechd_wheretoputstatements"><a class="multipageHeadLink" href="wheretoputstatements.xhtml#wheretoputstatements" name="wheretoputstatements">Statements</a></div><div class="subSecContent" id="seccnt_wheretoputstatements"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('wheretoputstatements');">Where to Put SQL Statements</a></div><p class="subSecExplanation">Where to put your SQL statements is an almost religious question. I'v seen pretty much everything, from putting string literals into the execute() method, over using final static strings, putting them in property or XML configuration files, setting them in the deployment descriptor or via Spring over to storing them in the database itself. </p><p class="subSecExplanation"> My personal opinion is to <em>keep SQL as close to as possible to the code that executes it</em>. This means you should generally can keep it in the execute/prepare method invocation, unless you need the same statement at several places. In the latter case it may make sense to put them into a commonly used static final string, but more likely is that you should put the code fragment that needs the statement in a method of its own and share this method. </p><p class="subSecExplanation"> The reason for keeping the statement close to the code is simple: SQL statements are almost always heavily intertwined on the code. They require that you give them parameters of the right type in the right order. The code requires that they return columns in the right type either in the right order or with the right names. And there may be even more subtle things, such as the code requiring results in a certain order. </p><p class="subSecExplanation"> This means on the one hand, that in order to understand the code you need to read the SQL statement as well. Putting it somewhere far away makes the code less readable. And on the other hand, making the statement "configurable" is mostly an illusion. You would have to go to great lengths to document all the constraints that your code puts on the statement. Otherwise changing the statement requires at least reading the source code, and possibly also modifying it. </p><p class="subSecExplanation"> The only rule that override the 'keep it as close as possible' is <em>don't repeat yourself!</em>. If you need a SQL statement at two places, put it into a common constant. In most cases, however, before using the SQL statement twice you should consider writing a method that executes the statement and possibly returns the result set, because you are likely to repeat that code fragment at well. </p></div></div><div id="colla_dboverview" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="dboverview.xhtml#dboverview" name="dboverview">Databases</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('dboverview');">Which Database is the Right One? (Short Database Overview)</a></div></div></div><div class="subSecRow2" id="sec_dboverview" style="display: none"><div class="subSecHead" id="sechd_dboverview"><a class="multipageHeadLink" href="dboverview.xhtml#dboverview" name="dboverview">Databases</a></div><div class="subSecContent" id="seccnt_dboverview"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('dboverview');">Which Database is the Right One? (Short Database Overview)</a></div><p class="subSecExplanation"> There are so many databases to chose from that giving advice is always difficult and depends on your goals. But I can try to give you a short overview over some common databases for Java development, from my very own perspective. </p><h4 class="subSecMiniHeadline">Apache Derby / JavaDB</h4><p class="subSecExplanation">Price: free (open-source, Apache license)</p><p class="subSecExplanation"> Apache Derby is a database written in pure Java. In its rather complicated history, it has been written by a startup called Cloudscape in the late 90s, before being acquired by Informix, who were then acquired by IBM. In 2004 IBM donated the code to Apache Foundation, and since then it is known as Apache Derby. Sun <em>ships a rebranded version called Java DB</em> as part of Java SE since version 6. </p><p class="subSecExplanation"> Derby is mostly known as low-footprint <a href="#" id="tl-d286e7128" class="dottedTooltip" onclick="return tlClick('tl-d286e7128','pp-d286e7131');" onmouseover="return tlOver('tl-d286e7128','pp-d286e7131');" onmouseout="return tlOut('tl-d286e7128','pp-d286e7131');">embedded database</a>. Even though it can also be used as <a href="#" id="tl-d286e7134" class="dottedTooltip" onclick="return tlClick('tl-d286e7134','pp-d286e7137');" onmouseover="return tlOver('tl-d286e7134','pp-d286e7137');" onmouseout="return tlOut('tl-d286e7134','pp-d286e7137');">database server</a>, I have never heard of anyone doing this in production use. </p><p class="subSecExplanation">Link: <a href="http://db.apache.org/derby/">Apache Derby</a></p><h4 class="subSecMiniHeadline">MySQL</h4><p class="subSecExplanation">Price: free (open-source, GPL)</p><p class="subSecExplanation"><a href="http://en.wikipedia.org/wiki/MySQL">MySQL</a> is the most popular database for web applications. While its SQL engine is rather simple and lacks many advanced features, MySQL's main advantage lies beneath the SQL engine: unlike most other databases there are several storage engines to choose from. A plugin-mechanism allows you to use best suited engine for each table. Many of those engines, including the old default engine MyISAM, are designed for performance, but are not very strong at transaction support and data integrity. This leads to MySQL's reputation of being extremely fast (especially after tweaking it), but not as reliable as other databases. Your results may vary, depending on what storage engine you are using.</p><p class="subSecExplanation">Link: <a href="http://www.mysql.com/">MySQL</a></p><h4 class="subSecMiniHeadline">PostgreSQL</h4><p class="subSecExplanation">Price: free (open-source, BSD license)</p><p class="subSecExplanation">In many ways, you could say that PostgreSQL is the opposite of MySQL. While MySQL allows you to tweak everything and even replace storage engines, PostgreSQL keeps it (relatively) simple. And while MySQL's transaction support and reliability has a bad reputation, PostgreSQL is known for its excellent transaction and concurrency features.<br/> In my humble opinion, PostgreSQL is the most friendly one of the 'major' databases, easy to use, with very complete SQL implementation and <a href="http://www.postgresql.org/docs/manuals/">excellent manuals</a>. If you have no special requirements for your database, try PostgreSQL first.</p><p class="subSecExplanation">Link: <a href="http://www.postgresql.org/">PostgreSQL</a></p><h4 class="subSecMiniHeadline">Oracle Database</h4><p class="subSecExplanation">Prices: ranges from Express Edition (free) to Enterprise Edition (medium fortune)</p><p class="subSecExplanation">Unless forced by a corporate behemoth, using Oracle DB rarely makes sense. While undoubtly reliable and feature-rich, the database is full of oddities caused by its long history, not very user-friendly and just plain expensive. Here are the Top 3 Oracle oddities:</p><ul class="subSecList"><li>It does <em>not support empty strings</em>. If you insert one, Oracle converts it to a <span class="idf">NULL</span>.</li><li>String columns should be declared as <span class="idf">VARCHAR2</span> (<a href="#" id="tl-d286e7209" class="dottedTooltip" onclick="return tlClick('tl-d286e7209','pp-d286e7209');" onmouseover="return tlOver('tl-d286e7209','pp-d286e7209');" onmouseout="return tlOut('tl-d286e7209','pp-d286e7209');">more</a>).</li><li>Names of internal structures (like table and column names) are <em>always in upper case</em>, which makes Oracle output look like an 8-bit revival.</li></ul><p class="subSecExplanation">Have I mentioned that I am not particularly fond of Oracle's database?</p><h4 class="subSecMiniHeadline">Microsoft SQL Server Database</h4><p class="subSecExplanation">Prices: ranges from Express (free) to Enterprise Edition (small fortune)</p><p class="subSecExplanation">Microsoft's SQL Server is Windows-centric database. Originally forked from Sybase DB, it has long surpassed Sybase's version (which is mostly irrelevant today, but used to be one of the leading databases). If you plan to develop and deploy on Windows machines and like to have GUIs for all administrative work, SQL Server can be a solid choice. The bigger versions are a bit pricey though, at least as long as you don't compare the prices to Oracle's.</p><p class="subSecExplanation">Link: <a href="http://www.microsoft.com/sqlserver/">Microsoft SQL Server</a></p></div></div><div id="colla_concurrency" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="concurrency.xhtml#concurrency" name="concurrency">Concurrency</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('concurrency');">How to Use JDBC in Multi-Threaded Applications</a></div></div></div><div class="subSecRow1" id="sec_concurrency" style="display: none"><div class="subSecHead" id="sechd_concurrency"><a class="multipageHeadLink" href="concurrency.xhtml#concurrency" name="concurrency">Concurrency</a></div><div class="subSecContent" id="seccnt_concurrency"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('concurrency');">How to Use JDBC in Multi-Threaded Applications</a></div><p class="subSecExplanation">The JDBC specification does not even mention threads, so any <em>multi-threading capabilities depend on the JDBC driver</em>. Many drivers claim to be thread-safe, but consult your driver's documentation to be sure. If you want to write portable applications, <em>don't share <a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> objects across threads</em>. This includes all objects obtained from the <a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a>, with the exception of immutable objects like <span class="idf">String</span> and <span class="idf">Number</span>.</p></div></div><div id="colla_warnings" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="warnings.xhtml#warnings" name="warnings">SQLWarning</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('warnings');">How to Read Warnings by the Driver or Database (SQLWarning)</a></div></div></div><div class="subSecRow2" id="sec_warnings" style="display: none"><div class="subSecHead" id="sechd_warnings"><a class="multipageHeadLink" href="warnings.xhtml#warnings" name="warnings">SQLWarning</a></div><div class="subSecContent" id="seccnt_warnings"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('warnings');">How to Read Warnings by the Driver or Database (SQLWarning)</a></div><p class="subSecExplanation">In some situations, the <em>SQL driver may issue a warning</em> instead of throwing an Exception, which would represent an error. Warnings are represented by the class <a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLWarning.html" class="javadoc">SQLWarning</a>, and can be retrieved from <a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a>, <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> and <a href="http://java.sun.com/javase/6/docs/api/java/sql/Statement.html" class="javadoc">Statement</a> objects by calling their respective <em><span class="idf">getWarnings</span></em> method. It returns the first new warning. Additional warnings can be retrieved using <a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLWarning.html#getNextWarning()" class="javadoc">getNextWarning</a>.<br/> Note that even though <a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLWarning.html" class="javadoc">SQLWarning</a> <em>extends <a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLException.html" class="javadoc">SQLException</a>, but is never thrown</em> by the JDBC driver. It merely re-uses <a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLException.html" class="javadoc">SQLException</a>'s fields, including the stacktrace (I leave it up to you to figure out whether extending <a href="http://java.sun.com/javase/6/docs/api/java/sql/Exception.html" class="javadoc">Exception</a> here is a good design).</p><p class="subSecExplanation">The following example prints warnings from a <a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a>:</p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLWarning.html" class="javadoc"><em>SQLWarning</em></a> warning = connection.<em><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#getWarnings()" class="javadoc">getWarnings()</a></em>;
while (warning != null) {
    System.out.println(warning.<a href="http://java.sun.com/javase/6/docs/api/java/lang/Throwable.html#getMessage()" class="javadoc"><em>getMessage</em></a>());
    warning = warning.<a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLWarning.html#getNextWarning()" class="javadoc"><em>getNextWarning</em></a>();  <span class="cmt">// get next warning</span>
}
</code></pre><p class="subSecExplanation">Warnings are rarely used in most applications, but may help you investigate bugs and other odd database behaviour.</p></div></div><div id="colla_types" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="types.xhtml#types" name="types">Type Mapping</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('types');">How to Map Between Java Types and JDBC Types</a></div></div></div><div class="subSecRow1" id="sec_types" style="display: none"><div class="subSecHead" id="sechd_types"><a class="multipageHeadLink" href="types.xhtml#types" name="types">Type Mapping</a></div><div class="subSecContent" id="seccnt_types"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('types');">How to Map Between Java Types and JDBC Types</a></div><p class="subSecExplanation"> Each <em>SQL type is represented by a constant in <a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html" class="javadoc">Types</a></em>, and there is a <em>corresponding Java type</em> for each of them. When you retrieve a <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> value with <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getObject(java.lang.String)" class="javadoc">getObject</a>, this is the type that you get. For built-in types (like <span class="idf">int</span>) you will get the wrapper class (like <a href="http://java.sun.com/javase/6/docs/api/java/lang/Integer.html" class="javadoc">java.lang.Integer</a>). </p><div class="subSecTableDiv"><table><tr><th>JDBC Name</th><th>Java Type</th><th>ResultSet Getter</th><th>Parameter Setter</th><th>Comment</th></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#ARRAY" class="javadoc">ARRAY</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Array.html" class="javadoc">java.sql.Array</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getArray(java.lang.String)" class="javadoc">getArray</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setArray(int, java.sql.Array)" class="javadoc">setArray</a>()</td><td/></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#BIGINT" class="javadoc">BIGINT</a></td><td><span class="idf">long</span></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getLong(java.lang.String)" class="javadoc">getLong</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setLong(int, long)" class="javadoc">setLong</a>()</td><td/></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#BINARY" class="javadoc">BINARY</a></td><td><span class="idf">byte[]</span></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getBytes(java.lang.String)" class="javadoc">getBytes</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setBytes(int, byte[])" class="javadoc">setBytes</a>()</td><td/></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#BIT" class="javadoc">BIT</a></td><td><span class="idf">boolean</span></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getBoolean(java.lang.String)" class="javadoc">getBoolean</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setBoolean(int, boolean)" class="javadoc">setBoolean</a>()</td><td/></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#BLOB" class="javadoc">BLOB</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Blob.html" class="javadoc">java.sql.Blob</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getBlob(java.lang.String)" class="javadoc">getBlob</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setBlob(int, java.sql.Blob)" class="javadoc">setBlob</a>()</td><td/></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#BOOLEAN" class="javadoc">BOOLEAN</a></td><td><span class="idf">boolean</span></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getBoolean(java.lang.String)" class="javadoc">getBoolean</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setBoolean(int, boolean)" class="javadoc">setBoolean</a>()</td><td/></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#CHAR" class="javadoc">CHAR</a></td><td><span class="idf">String</span></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getString(java.lang.String)" class="javadoc">getString</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setString(int, java.lang.String)" class="javadoc">setString</a>()</td><td/></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#CLOB" class="javadoc">CLOB</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Clob.html" class="javadoc">java.sql.Clob</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getClob(java.lang.String)" class="javadoc">getClob</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setClob(int, java.sql.Clob)" class="javadoc">setClob</a>()</td><td/></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#DATALINK" class="javadoc">DATALINK</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/net/URL.html" class="javadoc">java.net.URL</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getURL(java.lang.String)" class="javadoc">getURL</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setURL(int, java.net.URL)" class="javadoc">setURL</a>()</td><td/></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#DATE" class="javadoc">DATE</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Date.html" class="javadoc">java.sql.Date</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getDate(java.lang.String)" class="javadoc">getDate</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setDate(int, java.sql.Date)" class="javadoc">setDate</a>()</td><td>date without time</td></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#DECIMAL" class="javadoc">DECIMAL</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/lang/BigDecimal.html" class="javadoc">BigDecimal</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getBigDecimal(java.lang.String)" class="javadoc">getBigDecimal</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setBigDecimal(int, java.lang.BigDecimal)" class="javadoc">setBigDecimal</a>()</td><td/></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#DISTINCT" class="javadoc">DISTINCT</a></td><td>-</td><td>-</td><td>-</td><td>type depends on definition</td></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#DOUBLE" class="javadoc">DOUBLE</a></td><td><span class="idf">double</span></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getDouble(java.lang.String)" class="javadoc">getDouble</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setDouble(int, double)" class="javadoc">setDouble</a>()</td><td/></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#FLOAT" class="javadoc">FLOAT</a></td><td><span class="idf">double</span></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getDouble(java.lang.String)" class="javadoc">getDouble</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setDouble(int, double)" class="javadoc">setDouble</a>()</td><td/></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#INTEGER" class="javadoc">INTEGER</a></td><td><span class="idf">int</span></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getInt(java.lang.String)" class="javadoc">getInt</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setInt(int, int)" class="javadoc">setInt</a>()</td><td/></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#INTEGER" class="javadoc">JAVA_OBJECT</a></td><td>-</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getObject(java.lang.String)" class="javadoc">getObject</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setObject(int, java.lang.Object)" class="javadoc">setObject</a>()</td><td>class depends on definition</td></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#LONGNVARCHAR" class="javadoc">LONGNVARCHAR</a></td><td><span class="idf">String</span></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getNCharacterStream(java.lang.String)" class="javadoc">getNCharacterStream</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setNCharacterStream(int, java.io.Reader)" class="javadoc">setNCharacterStream</a>()</td><td>since JDBC 4.0</td></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#LONGVARBINARY" class="javadoc">LONGVARBINARY</a></td><td><span class="idf">byte[]</span></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getBinaryStream(java.lang.String)" class="javadoc">getBinaryStream</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setBinaryStream(int, java.io.InputStream)" class="javadoc">setBinaryStream</a>()</td><td/></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#LONGVARCHAR" class="javadoc">LONGVARCHAR</a></td><td><span class="idf">String</span></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getCharacterStream(java.lang.String)" class="javadoc">getCharacterStream</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setCharacterStream(int, java.io.Reader)" class="javadoc">setCharacterStream</a>()</td><td/></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#NCHAR" class="javadoc">NCHAR</a></td><td><span class="idf">String</span></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getNString(java.lang.String)" class="javadoc">getNString</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setNString(int, java.lang.String)" class="javadoc">setNString</a>()</td><td>since JDBC 4.0</td></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#NCLOB" class="javadoc">NCLOB</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/NClob.html" class="javadoc">java.sql.NClob</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getNClob(java.lang.String)" class="javadoc">getNClob</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setNClob(int, java.sql.Clob)" class="javadoc">setNClob</a>()</td><td>since JDBC 4.0</td></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#NULL" class="javadoc">NULL</a></td><td><span class="idf">null</span></td><td>-</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setNull(int, int)" class="javadoc">setNull</a>()</td><td>generic <span class="idf">NULL</span> value</td></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#NUMERIC" class="javadoc">NUMERIC</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/lang/BigDecimal.html" class="javadoc">BigDecimal</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getBigDecimal(java.lang.String)" class="javadoc">getBigDecimal</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setBigDecimal(int, java.lang.BigDecimal)" class="javadoc">setBigDecimal</a>()</td><td/></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#NVARCHAR" class="javadoc">NVARCHAR</a></td><td><span class="idf">String</span></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getNString(java.lang.String)" class="javadoc">getNString</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setNString(int, java.lang.String)" class="javadoc">setNString</a>()</td><td>since JDBC 4.0</td></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#OTHER" class="javadoc">OTHER</a></td><td>-</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getObject(java.lang.String)" class="javadoc">getObject</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setObject(int, java.lang.Object)" class="javadoc">setObject</a>()</td><td>for database-specific types</td></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#REAL" class="javadoc">REAL</a></td><td><span class="idf">float</span></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getFloat(java.lang.String)" class="javadoc">getFloat</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setFloat(int, float)" class="javadoc">setFloat</a>()</td><td/></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#REF" class="javadoc">REF</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Ref.html" class="javadoc">java.sql.Ref</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getRef(java.lang.String)" class="javadoc">getRef</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setRef(int, java.sql.Ref)" class="javadoc">setRef</a>()</td><td/></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#ROWID" class="javadoc">ROWID</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/RowId.html" class="javadoc">java.sql.RowId</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getRowId(java.lang.String)" class="javadoc">getRowId</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setRowId(int, java.sql.RowId)" class="javadoc">setRowId</a>()</td><td>since JDBC 4.0</td></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#SMALLINT" class="javadoc">SMALLINT</a></td><td><span class="idf">short</span></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getShort(java.lang.String)" class="javadoc">getShort</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setShort(int, short)" class="javadoc">setShort</a>()</td><td/></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#SQLXML" class="javadoc">SQLXML</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLXML.html" class="javadoc">java.sql.SQLXML</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getSQLXML(java.lang.String)" class="javadoc">getSQLXML</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setSQLXML(int, java.sql.SQLXML)" class="javadoc">setSQLXML</a>()</td><td>since JDBC 4.0</td></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#STRUCT" class="javadoc">STRUCT</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Struct.html" class="javadoc">java.sql.Struct</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getObject(java.lang.String)" class="javadoc">getObject</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setObject(int, java.lang.Object)" class="javadoc">setObject</a>()</td><td/></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#TIME" class="javadoc">TIME</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Time.html" class="javadoc">java.sql.Time</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getTime(java.lang.String)" class="javadoc">getTime</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setTime(int, java.sql.Time)" class="javadoc">setTime</a>()</td><td/></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#TIMESTAMP" class="javadoc">TIMESTAMP</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Timestamp.html" class="javadoc">java.sql.Timestamp</a></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getTimestamp(java.lang.String)" class="javadoc">getTimestamp</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setTimestamp(int, java.sql.Time)" class="javadoc">setTimestamp</a>()</td><td/></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#TINYINT" class="javadoc">TINYINT</a></td><td><span class="idf">byte</span></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getByte(java.lang.String)" class="javadoc">getByte</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setByte(int, short)" class="javadoc">setByte</a>()</td><td/></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#VARBINARY" class="javadoc">VARBINARY</a></td><td><span class="idf">byte[]</span></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getBytes(java.lang.String)" class="javadoc">getBytes</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setBytes(int, byte[])" class="javadoc">setBytes</a>()</td><td/></tr><tr><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#VARCHAR" class="javadoc">VARCHAR</a></td><td><span class="idf">String</span></td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getString(java.lang.String)" class="javadoc">getString</a>()</td><td><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setString(int, java.lang.String)" class="javadoc">setString</a>()</td><td/></tr></table></div></div></div><div class="subSecRow2" id="sec_todo"><div class="subSecHead" id="sechd_todo"><a class="multipageHeadLink" href="todo.xhtml#todo" name="todo">TODO</a></div><div class="subSecContent" id="seccnt_todo"><p class="subSecExplanation"> 3. How-To... X CallableStatements / Stored Procudures X getting auto-generated keys (section 13.6) X JDBC / Java Datamapping (mapping table) X Cursors - Updating a ResultSet X Reading NULLs X NULL parameters X Fetch Sizes X Batch Updates X Dates X Retrieving Blobs X Sending Blobs (setBinaryStream()) X XML X Storing Java Objects X DB Meta Data X Result Set Meta Data X structured type - ref X distinct types X array (no support in javadb and mysql, and no direct array support in oracle (only type defs)) - row id X query timeout X Rowsets: short description (resultset on dope, offline functionality with sync, xml serialization). Not part of JDBC. Link to tutorial in JDK. - distributed transactions with EJB (@Transaction; don't change auto-commit mode) X 4 types of driver classes... http://java.sun.com/products/jdbc/driverdesc.html X performance (reduce sql statements, optimize sql, indexes, schema, fewer results; reuse prepared statements; use batch mode; set fetch size) X constructing / escaping SQL - SVGs are too large, redraw them! </p></div></div><div id="colla_appservertransactions" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="appservertransactions.xhtml#appservertransactions" name="appservertransactions">JEE Transactions</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('appservertransactions');">How to Use Transactions in an Application Server</a></div></div></div><div class="subSecRow1" id="sec_appservertransactions" style="display: none"><div class="subSecHead" id="sechd_appservertransactions"><a class="multipageHeadLink" href="appservertransactions.xhtml#appservertransactions" name="appservertransactions">JEE Transactions</a></div><div class="subSecContent" id="seccnt_appservertransactions"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('appservertransactions');">How to Use Transactions in an Application Server</a></div><p class="subSecExplanation">Code running in an application server should not <a href="#transactions" onclick="if (event.button == 0) return goTo('#transactions', true); else return true;">commit transactions manually</a>, but <em>use the container's transaction management</em>. You should not use JDBC's own functions at all<br/> With EJB 3.x container-managed transaction management is very convenient. By default, <em>every session bean method runs in a transaction</em>, including all methods that the session bean invokes. Methods that require a different behaviour can use the <a href="http://download.oracle.com/docs/cd/E17477_01/javaee/5/api/javax/ejb/TransactionAttribute.html" class="javadoc">@TransactionAttribute</a> attribute to declare this. </p></div></div><div id="colla_autokeys" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="autokeys.xhtml#autokeys" name="autokeys">Generated Keys</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('autokeys');">How to Retrieve Generated Values (Auto-Generated Keys)</a></div></div></div><div class="subSecRow2" id="sec_autokeys" style="display: none"><div class="subSecHead" id="sechd_autokeys"><a class="multipageHeadLink" href="autokeys.xhtml#autokeys" name="autokeys">Generated Keys</a></div><div class="subSecContent" id="seccnt_autokeys"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('autokeys');">How to Retrieve Generated Values (Auto-Generated Keys)</a></div><p class="subSecExplanation">When you insert a row into a table, and some of those values are <em>automatically generated</em> (typically identity keys), JDBC allows you to retrieve those values after <em>specifying the <a href="http://java.sun.com/javase/6/docs/api/java/sql/Statement.html#RETURN_GENERATED_KEYS" class="javadoc">Statement.RETURN_GENERATED_KEYS</a></em> option:</p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection = <span class="abstract">...</span>;
String sql = "INSERT INTO Movie(title, budget, releaseDate) VALUES(?, ?, ?)";
<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String, int)" class="javadoc">prepareStatement</a>(sql, <em><a href="http://java.sun.com/javase/6/docs/api/java/sql/Statement.html#RETURN_GENERATED_KEYS" class="javadoc">Statement.RETURN_GENERATED_KEYS</a></em>);

stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setString(int, java.lang.String)" class="javadoc">setString</a>(1, "Jurassic Park");
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setBigDecimal(int, java.math.BigDecimal)" class="javadoc">setBigDecimal</a>(2, new <a href="http://java.sun.com/javase/6/docs/api/java/math/BigDecimal.html" class="javadoc">BigDecimal</a>(63000000));
<a href="http://java.sun.com/javase/6/docs/api/java/sql/Date.html" class="javadoc">Date</a> june11_93 = new <a href="http://java.sun.com/javase/6/docs/api/java/sql/Date.html" class="javadoc">Date</a>(new <a href="http://java.sun.com/javase/6/docs/api/java/util/GregorianCalendar.html" class="javadoc">GregorianCalendar</a>(1993, <a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#JUNE" class="javadoc">Calendar.JUNE</a>, 11).<a href="http://java.sun.com/javase/6/docs/api/java/util/Calendar.html#getTimeInMillis()" class="javadoc">getTimeInMillis</a>());
stmt.<em><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setString(int, java.sql.Date)" class="javadoc">setDate</a>(3, june11_93)</em>;
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeUpdate()" class="javadoc">executeUpdate</a>();

<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> rs = stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Statement.html#getGeneratedKeys()" class="javadoc"><em>getGeneratedKeys</em></a>();  <span class="cmt">// retrieve keys in <span class="idf">ResultSet</span></span>
if (rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#next()" class="javadoc">next</a>())
    System.out.println("Row created with id="+rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getLong(java.lang.String)" class="javadoc"><em>getLong</em></a>(1));
</code></pre><p class="subSecExplanation"/></div></div><div id="colla_userdefinedtypes" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="userdefinedtypes.xhtml#userdefinedtypes" name="userdefinedtypes">Java Objects</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('userdefinedtypes');">How to Write a Custom-Mapping for User-Defined Types</a></div></div></div><div class="subSecRow1" id="sec_userdefinedtypes" style="display: none"><div class="subSecHead" id="sechd_userdefinedtypes"><a class="multipageHeadLink" href="userdefinedtypes.xhtml#userdefinedtypes" name="userdefinedtypes">Java Objects</a></div><div class="subSecContent" id="seccnt_userdefinedtypes"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('userdefinedtypes');">How to Write a Custom-Mapping for User-Defined Types</a></div><p class="subSecExplanation">If you have user-defined types (<a href="#" id="tl-d286e8462" class="dottedTooltip" onclick="return tlClick('tl-d286e8462','pp-d286e9003');" onmouseover="return tlOver('tl-d286e8462','pp-d286e9003');" onmouseout="return tlOut('tl-d286e8462','pp-d286e9003');">composite</a> or <a href="#" id="tl-d286e8466" class="dottedTooltip" onclick="return tlClick('tl-d286e8466','pp-d286e8469');" onmouseover="return tlOver('tl-d286e8466','pp-d286e8469');" onmouseout="return tlOut('tl-d286e8466','pp-d286e8469');">scalar</a>), you can <em>write your own Java class and declare map it on the user-defined type</em>. If you don't do this, you have to treat them <a href="#structs" onclick="if (event.button == 0) return goTo('#structs', true); else return true;">as Struct</a> or <a href="#distinct" onclick="if (event.button == 0) return goTo('#distinct', true); else return true;">as distinct type</a>.</p><p class="subSecExplanation"> The Java class representing your user-defined type <em>must implement the <a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLData.html" class="javadoc">SQLData</a> interface</em> (mapping a POJO is not possible) and <em>have a constructor without arguments</em>. <a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLData.html" class="javadoc">SQLData</a> works similar to serialization, you read from a stream of JDBC types to create an instance and write to a stream of JDBC types to write it later. </p><p class="subSecExplanation">Here is an Oracle definition of a user-defined type and a table that uses it:</p><pre class="subSecConfig"><em>CREATE TYPE Encoding</em> AS object (
	encoderName VARCHAR(30),
	pixelLines INT,
	bitrateMbits FLOAT
)

CREATE TABLE MovieEncodings (
  movieRef    int,
  hd <em>VideoEncoding</em>,
  sd <em>VideoEncoding</em>,
  mobile <em>VideoEncoding</em>,
  FOREIGN KEY (movieRef) REFERENCES Movie(id)
)</pre><h4 class="subSecMiniHeadline">Writing the Custom Type</h4><p class="subSecExplanation">This class implements <a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLData.html" class="javadoc">SQLData</a> to handle the <span class="idf">VideoEncoding</span> type:</p><pre class="subSecCode"><code>public class VideoEncoding <em>implements <a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLData.html" class="javadoc">SQLData</a></em> {

    private String typeName = "VIDEOENCODING";  <span class="cmt">// default name in capitals(<a href="#" id="tl-d286e8549" class="dottedTooltip" onclick="return tlClick('tl-d286e8549','pp-d286e8549');" onmouseover="return tlOver('tl-d286e8549','pp-d286e8549');" onmouseout="return tlOut('tl-d286e8549','pp-d286e8549');">more</a>)</span>
    public String encoderName;                  <span class="cmt">// public only to avoid writing getters</span>
    public int pixelLines;
    public double bitrateMbits;

    public <em>VideoEncoding()</em> {                    <span class="cmt">// <em>required:</em> constructor without arguments</span>
    }

    <span class="cmt">// convenience constructor</span>
    public VideoEncoding(String encoderName, int pixelLines, double bitrateMbits) {
        this.encoderName = encoderName;
        this.pixelLines = pixelLines;
        this.bitrateMbits = bitrateMbits;
    }

    public String <a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLData.html#getSQLTypeName()" class="javadoc"><em>getSQLTypeName</em></a>() {
        return typeName;
    }

    public void <a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLData.html#readSQL(java.sql.SQLInput, java.lang.String)" class="javadoc"><em>readSQL</em></a>(<a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLInput.html" class="javadoc">SQLInput</a> stream, String typeName) throws <a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLException.html" class="javadoc">SQLException</a> {
        this.typeName = typeName;               <span class="cmt">// store name for <span class="idf">getSQLTypeName</span></span>

        encoderName = stream.<a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLInput.html#readString()" class="javadoc">readString</a>();      <span class="cmt">// in order of DB declaration</span>
        pixelLines = stream.<a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLInput.html#readInt()" class="javadoc">readInt</a>();
        bitrateMbits = stream.<a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLInput.html#readDouble()" class="javadoc">readDouble</a>();
    }

    public void <a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLData.html#writeSQL(java.sql.SQLOutput)" class="javadoc"><em>writeSQL</em></a>(<a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLOutput.html" class="javadoc">SQLOutput</a> stream) throws <a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLException.html" class="javadoc">SQLException</a> {
        stream.<a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLOutput.html#writeString(java.lang.String)" class="javadoc">writeString</a>(encoderName);
        stream.<a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLOutput.html#writeInt(java.lang.String)" class="javadoc">writeString</a>(pixelLines);
        stream.<a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLOutput.html#writeDouble(java.lang.String)" class="javadoc">writeString</a>(bitrateMbits);
    }
}
</code></pre><h4 class="subSecMiniHeadline">SQLData Types as Parameters</h4><p class="subSecExplanation"> <a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLData.html" class="javadoc">SQLData</a>-based types can be set as parameters using <a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setObject(int, java.lang.Object)" class="javadoc">setObject</a>: </p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection = <span class="abstract">...</span>;
String sql = "INSERT INTO MovieEncodings(movieRef, hd, sd, mobile) VALUES(1, ?, ?, ?)";
<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String)" class="javadoc">prepareStatement</a>(sql);

VideoEncoding hd = new VideoEncoding("MPEG2", 1080, 20);
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setObject(int, java.lang.Object)" class="javadoc"><em>setObject</em></a>(1, hd);  <span class="cmt">// use <span class="idf">Object</span> accessors for custom types</span>

VideoEncoding sd = new VideoEncoding("H264", 640, 1.5);
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setObject(int, java.lang.Object)" class="javadoc"><em>setObject</em></a>(2, sd);

VideoEncoding mobile = new VideoEncoding("3GP", 200, 0.02);
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setObject(int, java.lang.Object)" class="javadoc"><em>setObject</em></a>(3, mobile);

stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeUpdate()" class="javadoc">executeUpdate</a>();
</code></pre><h4 class="subSecMiniHeadline">Reading SQLData Types</h4><p class="subSecExplanation">Before you can read a <a href="http://java.sun.com/javase/6/docs/api/java/sql/SQLData.html" class="javadoc">SQLData</a>-based type you need to <em>add your class to the type map</em>. After that you can <em>read it using <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getObject(java.lang.String)" class="javadoc">getObject</a></em>: </p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection = <span class="abstract">...</span> ;

<span class="cmt">// Add mapping class to type map</span>
Map&lt;String,Class&lt;?&gt;&gt; typeMap = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#getTypeMap()" class="javadoc"><em>getTypeMap</em></a>();
typeMap.put("<em>VIDEOENCODING</em>", <em>VideoEncoding.class</em>);  <span class="cmt">// upper case required for Oracle</span>
connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#setTypeMap(java.util.Map)" class="javadoc"><em>setTypeMap</em></a>(typeMap);

String sql = "SELECT hd FROM MovieEncodings WHERE movieRef=1";
<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String)" class="javadoc">prepareStatement</a>(sql);
<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> rs = stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeQuery()" class="javadoc">executeQuery</a>();

while (rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#next()" class="javadoc">next</a>()) {
    <a href="http://java.sun.com/javase/6/docs/api/java/sql/VideoEncoding.html" class="javadoc"><em>VideoEncoding</em></a> hdEncoding = <a href="http://java.sun.com/javase/6/docs/api/java/sql/(VideoEncoding) rs.getObject.html" class="javadoc"><em>(VideoEncoding) rs.getObject</em></a>("hd");

    System.out.printf("Encoder: %s Lines: %s bitrate: %s Mbit/s\n", 
                      hdEncoding.encoderName, hdEncoding.pixelLines, hdEncoding.bitrateMbits);
}
</code></pre><p class="subSecExplanation"/></div></div><div id="colla_distinct" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="distinct.xhtml#distinct" name="distinct">Distinct</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('distinct');">How to Handle Scalar User-Defined Types (Distinct)?</a></div></div></div><div class="subSecRow2" id="sec_distinct" style="display: none"><div class="subSecHead" id="sechd_distinct"><a class="multipageHeadLink" href="distinct.xhtml#distinct" name="distinct">Distinct</a></div><div class="subSecContent" id="seccnt_distinct"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('distinct');">How to Handle Scalar User-Defined Types (Distinct)?</a></div><p class="subSecExplanation"><em>User-defined types that are based on a single basic type</em>, like a string restricted to 20 characters, are called <a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#DISTINCT" class="javadoc"><em>DISTINCT</em></a> in JDBC. For example, this statement creates a 5-character string type called 'MPAARating' in PostgreSQL:</p><pre class="subSecConfig">CREATE DOMAIN MPAARating AS VARCHAR(5) DEFAULT 'NR'
</pre><p class="subSecExplanation">Distinct types are handled exactly <em>like their underlying basic type</em>. Let's assume the following table definition:</p><pre class="subSecConfig">CREATE TABLE MovieRating (
  movieRef    int,
  version VARCHAR(50),
  rating <em>MPAARating</em>,
  FOREIGN KEY (movieRef) REFERENCES Movie(id)
)</pre><p class="subSecExplanation">Then you can read the <span class="idf">rating</span> column from a <a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> like this:</p><pre class="subSecCode"><code>String rating = rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#getString(java.lang.String)" class="javadoc"><em>getString</em></a>("rating");
</code></pre><p class="subSecExplanation">Similarly, to set a distinct type as parameter you only need to call <a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setString(int, java.lang.String)" class="javadoc">setString</a> on the <a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a>.</p></div></div><div id="colla_structs" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="structs.xhtml#structs" name="structs">Structs</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('structs');">How to Read Composite Types (Structs)</a></div></div></div><div class="subSecRow1" id="sec_structs" style="display: none"><div class="subSecHead" id="sechd_structs"><a class="multipageHeadLink" href="structs.xhtml#structs" name="structs">Structs</a></div><div class="subSecContent" id="seccnt_structs"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('structs');">How to Read Composite Types (Structs)</a></div><p class="subSecExplanation">The <a href="http://java.sun.com/javase/6/docs/api/java/sql/Struct.html" class="javadoc">Struct</a> interface is used to <em>represent <a href="#" id="tl-d286e9000" class="dottedTooltip" onclick="return tlClick('tl-d286e9000','pp-d286e9003');" onmouseover="return tlOver('tl-d286e9000','pp-d286e9003');" onmouseout="return tlOut('tl-d286e9000','pp-d286e9003');">composite types</a></em>. Here is a Oracle definition for a composite type <span class="idf">Encoding</span> as well as a table that uses it (neither JavaDB nor PostgreSQL support <a href="http://java.sun.com/javase/6/docs/api/java/sql/Struct.html" class="javadoc">Struct</a>): </p><pre class="subSecConfig"><em>CREATE TYPE Encoding</em> AS object (
	encoderName VARCHAR(30),
	pixelLines INT,
	bitrateMbits FLOAT
)

CREATE TABLE MovieEncodings (
  movieRef    int,
  hd <em>Encoding</em>,
  sd <em>Encoding</em>,
  mobile <em>Encoding</em>,
  FOREIGN KEY (movieRef) REFERENCES Movie(id)
)</pre><h4 class="subSecMiniHeadline">Creating Struct Parameters</h4><p class="subSecExplanation"><em>Since JDBC 4.0</em> you can create a <a href="http://java.sun.com/javase/6/docs/api/java/sql/Struct.html" class="javadoc">Struct</a> from a <a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> using <a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#createStruct(java.lang.String, java.lang.Object[])" class="javadoc">createStruct</a>. In JDBC 3.0 you had to resort to driver-specific ways to do this, if possible at all.</p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection = <span class="abstract">...</span>;
String sql = "INSERT INTO MovieEncodings(movieRef, hd, sd, mobile) VALUES(1, ?, ?, ?)";
<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String)" class="javadoc">prepareStatement</a>(sql);

Object[] hdVals = new Object[] {"MPEG2", 1080, 20.0};     <span class="cmt">// values <em>declaration order</em>(<a href="#" id="tl-d286e9076" class="dottedTooltip" onclick="return tlClick('tl-d286e9076','pp-d286e9076');" onmouseover="return tlOver('tl-d286e9076','pp-d286e9076');" onmouseout="return tlOut('tl-d286e9076','pp-d286e9076');">more</a>)</span>
Struct hd = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#createStruct(java.lang.String, java.lang.Object[])" class="javadoc"><em>createStruct</em></a>("ENCODING", hdVals);  <span class="cmt">// <em>upper case</em> for Oracle (<a href="#" id="tl-d286e9090" class="dottedTooltip" onclick="return tlClick('tl-d286e9090','pp-d286e9090');" onmouseover="return tlOver('tl-d286e9090','pp-d286e9090');" onmouseout="return tlOut('tl-d286e9090','pp-d286e9090');">more</a>)</span>
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setObject(int, java.lang.Object)" class="javadoc"><em>setObject</em></a>(1, hd);                                    <span class="cmt">// use <span class="idf">Object</span> accessors for <span class="idf">Struct</span></span>

Object[] sdVals = new Object[] {"H264", 640, 1.5;
Struct sd = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#createStruct(java.lang.String, java.lang.Object[])" class="javadoc"><em>createStruct</em></a>("ENCODING", sdVals);
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setObject(int, java.lang.Object)" class="javadoc"><em>setObject</em></a>(2, sd);

Object[] mobileVals = new Object[] {"3GP", 200, 0.02};
Struct mobile = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#createStruct(java.lang.String, java.lang.Object[])" class="javadoc"><em>createStruct</em></a>("ENCODING", mobileVals);
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setObject(int, java.lang.Object)" class="javadoc"><em>setObject</em></a>(3, mobile);

stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeUpdate()" class="javadoc">executeUpdate</a>();
</code></pre><h4 class="subSecMiniHeadline">Reading Struct Values</h4><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection = <span class="abstract">...</span> ;
String sql = "SELECT hd FROM MovieEncodings WHERE movieRef=1";
<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = connection.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#prepareStatement(java.lang.String)" class="javadoc">prepareStatement</a>(sql);
<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html" class="javadoc">ResultSet</a> rs = stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#executeQuery()" class="javadoc">executeQuery</a>();

while (rs.<a href="http://java.sun.com/javase/6/docs/api/java/sql/ResultSet.html#next()" class="javadoc">next</a>()) {
    <a href="http://java.sun.com/javase/6/docs/api/java/sql/Struct.html" class="javadoc"><em>Struct</em></a> hdEncoding = <a href="http://java.sun.com/javase/6/docs/api/java/sql/(Struct) rs.getObject.html" class="javadoc"><em>(Struct) rs.getObject</em></a>("hd");  <span class="cmt">// use <span class="idf">getObject</span> to get <span class="idf">Struct</span></span>
    Object[] hdValues = hdEncoding.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Struct.html#getAttributes()" class="javadoc"><em>getAttributes</em></a>();   <span class="cmt">// values in declaration order</span>

    String encoderName = (String) hdValues[0];
    <a href="http://java.sun.com/javase/6/docs/api/java/math/BigDecimal.html" class="javadoc">BigDecimal</a> pixelLines = (<a href="http://java.sun.com/javase/6/docs/api/java/math/BigDecimal.html" class="javadoc">BigDecimal</a>) hdValues[1];
    <a href="http://java.sun.com/javase/6/docs/api/java/math/BigDecimal.html" class="javadoc">BigDecimal</a> bitrateMbits = (<a href="http://java.sun.com/javase/6/docs/api/java/math/BigDecimal.html" class="javadoc">BigDecimal</a>) hdValues[2];
    System.out.printf("Encoder: %s Lines: %s bitrate: %s Mbit/s\n", 
                      encoderName, pixelLines, bitrateMbits);
}
</code></pre><p class="subSecExplanation"/></div></div><div id="colla_nullparameters" class="subSecRow2"><div class="subSecHead"><a class="multipageHeadLink" href="nullparameters.xhtml#nullparameters" name="nullparameters">Null Parameters</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('nullparameters');">How to Set Parameters to NULL</a></div></div></div><div class="subSecRow2" id="sec_nullparameters" style="display: none"><div class="subSecHead" id="sechd_nullparameters"><a class="multipageHeadLink" href="nullparameters.xhtml#nullparameters" name="nullparameters">Null Parameters</a></div><div class="subSecContent" id="seccnt_nullparameters"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('nullparameters');">How to Set Parameters to NULL</a></div><p class="subSecExplanation">There are several ways to set a <a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a>'s parameter to <span class="idf">NULL</span>, depending on the parameter's type:</p><ul class="subSecList"><li>For Java reference types (like <span class="idf">String</span>, <a href="http://java.sun.com/javase/6/docs/api/java/sql/Time.html" class="javadoc">Time</a> or <a href="http://java.sun.com/javase/6/docs/api/java/sql/Date.html" class="javadoc">Date</a>), just <em>invoke the setter with <span class="idf">null</span></em>.</li><li>All regular JDBC types can be set to null using <em><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setNull(int, int)" class="javadoc">setNull</a></em>.</li><li>Custom types created by the user need the three-argument version of <a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setNull(int, int, java.lang.String)" class="javadoc">setNull</a> to specify the name of the custom type.</li></ul><p class="subSecExplanation">The following example sets a string and an integer to null:</p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html" class="javadoc">PreparedStatement</a> stmt = <span class="abstract">...</span>;
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setString(int, java.lang.String)" class="javadoc">setString</a>(1, <em>null</em>);          <span class="cmt">// set <span class="idf">String</span>-based type to <span class="idf">NULL</span></span>
stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/PreparedStatement.html#setNull(int, int)" class="javadoc"><em>setNull</em></a>(2, <a href="http://java.sun.com/javase/6/docs/api/java/sql/Types.html#INTEGER" class="javadoc"><em>Types.INTEGER</em></a>);   <span class="cmt">// set <span class="idf">INTEGER</span> to <span class="idf">NULL</span></span>
</code></pre><p class="subSecExplanation"/></div></div><div id="colla_wrapper" class="subSecRow1"><div class="subSecHead"><a class="multipageHeadLink" href="wrapper.xhtml#wrapper" name="wrapper">Wrappers</a></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('wrapper');">How to Access Driver Classes When the Application Server Wraps Them</a></div></div></div><div class="subSecRow1" id="sec_wrapper" style="display: none"><div class="subSecHead" id="sechd_wrapper"><a class="multipageHeadLink" href="wrapper.xhtml#wrapper" name="wrapper">Wrappers</a></div><div class="subSecContent" id="seccnt_wrapper"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('wrapper');">How to Access Driver Classes When the Application Server Wraps Them</a></div><p class="subSecExplanation"> JDBC defines interfaces (such as <a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> and <a href="http://java.sun.com/javase/6/docs/api/java/sql/Statement.html" class="javadoc">Statement</a>) whose implementations will be provided by the JDBC drivers. Most <em>JDBC drivers extend those interfaces</em> and offer additional methods for driver-specific features. In order to access those methods, you need to <em>cast to the driver's own class</em> or interface. </p><p class="subSecExplanation"> Many <em>application servers wrap the JDBC driver's implementations</em> to add additional features. However, this means that you get the application server's classes and can not cast to driver classes anymore, and thus will not be able to access any driver-specific features. </p><p class="subSecExplanation"> <em>Since JDBC 4.0 many JDBC interfaces extend the <a href="http://java.sun.com/javase/6/docs/api/java/sql/Wrapper.html" class="javadoc">Wrapper</a> interface</em> to solve this problem. <a href="http://java.sun.com/javase/6/docs/api/java/sql/Wrapper.html" class="javadoc">Wrapper</a> allows you to <em>get a wrapped implementation</em>, even if it has been wrapped multiple times. You can search for implementation classes as well as any interfaces that they implement. The following example tries to get a <a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> that implements PostgreSQL's <span class="idf">PGConnection</span> interface: </p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html" class="javadoc">Connection</a> connection = <span class="abstract">...</span>;
if (stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Wrapper.html#isWrapperFor(java.lang.Class)" class="javadoc"><em>isWrapperFor</em></a>(org.postgresql.PGConnection.class))  <span class="cmt">// is <span class="idf">PGConnection</span> available?</span>
    PGConnection pgcon = (PGConnection) stmt.<a href="http://java.sun.com/javase/6/docs/api/java/sql/Wrapper.html#unwrap(java.lang.Class)" class="javadoc"><em>unwrap</em></a>(org.postgresql.PGConnection.class);
    Fastpath fp = pgcon.getFastpathAPI();                  <span class="cmt">// PostgreSQL-specific feature</span>
    <span class="cmt">// <span class="abstract">...</span></span>
}
</code></pre><p class="subSecExplanation">There is no interoperable way of getting the driver's original classes in JDBC 3.0 Some application servers or wrappers may offer extensions to get them though.</p></div></div><h2 id="sec_andnow" class="sectionHead"><a name="andnow">And now...?</a></h2><div class="subSecRow2" id="sec_nextsteps"><div class="subSecHead" id="sechd_nextsteps"><a class="multipageHeadLink" href="andnow.xhtml#nextsteps" name="nextsteps">Next Steps</a></div><div class="subSecContent" id="seccnt_nextsteps"><p class="subSecExplanation">This tutorial intends to give you a quick start on using JDBC, and maybe give answers for some questions that are hard to figure out on your own. But now you are on you own. If you need to find out more, try to find it in the <a href="http://java.sun.com/javase/6/docs/api/java/sql/package-summary.html">API documentation</a>. For a more thorough understanding of JDBC you should take the time to read the <a href="http://jcp.org/en/jsr/summary?id=221">JDBC Specification</a>. </p></div></div></div><div id="sidecolumn">
    	<div><h3>Useful Links</h3><div class="sidecolumnSubTitleLine"/>
  			<a href="http://java.sun.com/javase/technologies/database/">JDBC Homepage</a><br/>
  			<a href="http://en.wikipedia.org/wiki/Java_Database_Connectivity">JDBC on Wikipedia</a><br/>
  			<a href="http://java.sun.com/javase/6/docs/api/java/sql/package-summary.html">java.sql API Docs</a><br/>
  			<a href="http://java.sun.com/javase/6/docs/api/javax/sql/package-summary.html">javax.sql API Docs</a><br/>
  			<a href="http://jcp.org/aboutJava/communityprocess/final/jsr221/index.html">JDBC 4.0 Specification</a><br/>
  		</div>
  </div></div></div><div id="footer"><div id="footer-content"><div id="footer-left"><div class="footerLine"><a href="/">Home</a> - <a href="/about">About Jarfiller</a> - <a href="/imprint.xhtml">Imprint</a></div><div class="footerLine">Please send feedback and corrections to <a href="mailto:tim@tjansen.de">tim@<span style="display: none">got you</span>tjansen.de</a>.</div><div class="footerLine"><a href="http://www.twitter.com/timjansen">Follow</a> me on Twitter.</div><div class="copyrightLine">© 2010 Tim Jansen; content licensed under <a href="http://creativecommons.org/licenses/by/3.0/us/">cc-by</a>; example source code is public domain
				</div></div><div id="footer-right"><a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/"><img alt="Creative Commons License" style="border-width:0" src="../../images/ext/cc-by-88x31.png"/></a></div></div></div><div id="navbar" onclick="return navToggle();" onmouseover="document.getElementById('navbar').className='mouseover';" onmouseout="document.getElementById('navbar').className='';"/><div id="navcontainer"><div id="navlinks"><div id="navclosebar"><a href="#" onclick="return navClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div><div id="navpositionbar" class="navpositionbar"/><h2 id="navtitle">JDBC Guide</h2><a id="nav_overview" class="navseclink" href="#overview" onclick="if (event.button == 0) return goTo('#overview', true); else return true;">Overview</a><a id="nav_intro" class="navsublink" href="#intro" onclick="if (event.button == 0) return goTo('#intro', true); else return true;">Intro</a><a id="nav_usecases" class="navsublink" href="#usecases" onclick="if (event.button == 0) return goTo('#usecases', true); else return true;">When should you use JDBC for?</a><a id="nav_requirements" class="navsublink" href="#requirements" onclick="if (event.button == 0) return goTo('#requirements', true); else return true;">What do you need for JDBC?</a><a id="nav_connecting" class="navseclink" href="#connecting" onclick="if (event.button == 0) return goTo('#connecting', true); else return true;">Connecting</a><a id="nav_standalone" class="navsublink" href="#standalone" onclick="if (event.button == 0) return goTo('#standalone', true); else return true;">Stand-Alone</a><a id="nav_jeecontainer" class="navsublink" href="#jeecontainer" onclick="if (event.button == 0) return goTo('#jeecontainer', true); else return true;">JEE Container</a><a id="nav_javadb" class="navsublink" href="#javadb" onclick="if (event.button == 0) return goTo('#javadb', true); else return true;">Connecting to Java DB</a><a id="nav_postgresql" class="navsublink" href="#postgresql" onclick="if (event.button == 0) return goTo('#postgresql', true); else return true;">Connecting to PostgreSQL</a><a id="nav_oracle" class="navsublink" href="#oracle" onclick="if (event.button == 0) return goTo('#oracle', true); else return true;">Connecting to Oracle Database</a><a id="nav_exampleschema" class="navsublink" href="#exampleschema" onclick="if (event.button == 0) return goTo('#exampleschema', true); else return true;">Database Schema for the Following Examples</a><a id="nav_updatesandqueries" class="navseclink" href="#updatesandqueries" onclick="if (event.button == 0) return goTo('#updatesandqueries', true); else return true;">Updates and Queries</a><a id="nav_update" class="navsublink" href="#update" onclick="if (event.button == 0) return goTo('#update', true); else return true;">Update</a><a id="nav_query" class="navsublink" href="#query" onclick="if (event.button == 0) return goTo('#query', true); else return true;">Query</a><a id="nav_valueconversion" class="navsublink" href="#valueconversion" onclick="if (event.button == 0) return goTo('#valueconversion', true); else return true;">Value Conversion</a><a id="nav_colindex" class="navsublink" href="#colindex" onclick="if (event.button == 0) return goTo('#colindex', true); else return true;">Column Index</a><a id="nav_parameters" class="navseclink" href="#parameters" onclick="if (event.button == 0) return goTo('#parameters', true); else return true;">Parameters</a><a id="nav_parameters1" class="navsublink" href="#parameters1" onclick="if (event.button == 0) return goTo('#parameters1', true); else return true;">Parameters</a><a id="nav_reusing" class="navsublink" href="#reusing" onclick="if (event.button == 0) return goTo('#reusing', true); else return true;">Reusing Statements</a><a id="nav_workstatements" class="navseclink" href="#workstatements" onclick="if (event.button == 0) return goTo('#workstatements', true); else return true;">Working with Statements</a><a id="nav_transactions" class="navsublink" href="#transactions" onclick="if (event.button == 0) return goTo('#transactions', true); else return true;">Transactions</a><a id="nav_closing" class="navsublink" href="#closing" onclick="if (event.button == 0) return goTo('#closing', true); else return true;">Closing Resources</a><a id="nav_plainstatements" class="navseclink" href="#plainstatements" onclick="if (event.button == 0) return goTo('#plainstatements', true); else return true;">Plain Statements</a><a id="nav_plainstatements1" class="navsublink" href="#plainstatements1" onclick="if (event.button == 0) return goTo('#plainstatements1', true); else return true;">Plain Statement</a><a id="nav_escape" class="navseclink" href="#escape" onclick="if (event.button == 0) return goTo('#escape', true); else return true;">SQL Escape Syntax</a><a id="nav_escapesyntax" class="navsublink" href="#escapesyntax" onclick="if (event.button == 0) return goTo('#escapesyntax', true); else return true;">Escape Syntax</a><a id="nav_dateliterals" class="navsublink" href="#dateliterals" onclick="if (event.button == 0) return goTo('#dateliterals', true); else return true;">Date Literals</a><a id="nav_escapefunctions" class="navsublink" href="#escapefunctions" onclick="if (event.button == 0) return goTo('#escapefunctions', true); else return true;">Functions</a><a id="nav_escapefunctionlist" class="navsublink" href="#escapefunctionlist" onclick="if (event.button == 0) return goTo('#escapefunctionlist', true); else return true;">List of Supported Functions</a><a id="nav_storedproceduresescape" class="navsublink" href="#storedproceduresescape" onclick="if (event.button == 0) return goTo('#storedproceduresescape', true); else return true;">Stored Procedures</a><a id="nav_likeescape" class="navsublink" href="#likeescape" onclick="if (event.button == 0) return goTo('#likeescape', true); else return true;">LIKE Escape</a><a id="nav_outerjoinsescape" class="navsublink" href="#outerjoinsescape" onclick="if (event.button == 0) return goTo('#outerjoinsescape', true); else return true;">Outer Joins</a><a id="nav_howto" class="navseclink" href="#howto" onclick="if (event.button == 0) return goTo('#howto', true); else return true;">How to...</a><a id="nav_storedprocedures" class="navsublink" href="#storedprocedures" onclick="if (event.button == 0) return goTo('#storedprocedures', true); else return true;">How to Invoke Stored Procedures (CallableStatement)</a><a id="nav_readingnull" class="navsublink" href="#readingnull" onclick="if (event.button == 0) return goTo('#readingnull', true); else return true;">How to Find Out Whether a ResultSet Column is NULL</a><a id="nav_cursors" class="navsublink" href="#cursors" onclick="if (event.button == 0) return goTo('#cursors', true); else return true;">How to Navigate in the ResultSet (Cursors)</a><a id="nav_holdablers" class="navsublink" href="#holdablers" onclick="if (event.button == 0) return goTo('#holdablers', true); else return true;">How to Control ResultSet Holdability</a><a id="nav_arrays" class="navsublink" href="#arrays" onclick="if (event.button == 0) return goTo('#arrays', true); else return true;">How to Handle SQL Arrays</a><a id="nav_creatingsql" class="navsublink" href="#creatingsql" onclick="if (event.button == 0) return goTo('#creatingsql', true); else return true;">How to Escape Strings in SQL to Prevent SQL Injection Attacks</a><a id="nav_batch" class="navsublink" href="#batch" onclick="if (event.button == 0) return goTo('#batch', true); else return true;">How to Do a Batch Updates</a><a id="nav_performance" class="navsublink" href="#performance" onclick="if (event.button == 0) return goTo('#performance', true); else return true;">How to Improve Performance</a><a id="nav_dateandtime" class="navsublink" href="#dateandtime" onclick="if (event.button == 0) return goTo('#dateandtime', true); else return true;">How to Handle Date and Time</a><a id="nav_fetchsizes" class="navsublink" href="#fetchsizes" onclick="if (event.button == 0) return goTo('#fetchsizes', true); else return true;">How to Set the Fetch Size</a><a id="nav_timeout" class="navsublink" href="#timeout" onclick="if (event.button == 0) return goTo('#timeout', true); else return true;">How to Set the Query Timeout</a><a id="nav_rowsets" class="navsublink" href="#rowsets" onclick="if (event.button == 0) return goTo('#rowsets', true); else return true;">What are RowSets?</a><a id="nav_dbmetadata" class="navsublink" href="#dbmetadata" onclick="if (event.button == 0) return goTo('#dbmetadata', true); else return true;">How to Find Out the Database's Capabilities (DatabaseMetaData)</a><a id="nav_resultsetmetadata" class="navsublink" href="#resultsetmetadata" onclick="if (event.button == 0) return goTo('#resultsetmetadata', true); else return true;">How to Find Out About the Columns of a ResultSet (ResultSetMetaData)</a><a id="nav_blobs" class="navsublink" href="#blobs" onclick="if (event.button == 0) return goTo('#blobs', true); else return true;">How to Use Blobs and Clobs</a><a id="nav_xml" class="navsublink" href="#xml" onclick="if (event.button == 0) return goTo('#xml', true); else return true;">How to Access XML</a><a id="nav_arrayparameters" class="navsublink" href="#arrayparameters" onclick="if (event.button == 0) return goTo('#arrayparameters', true); else return true;">How to Pass an Array as Parameter for the IN operator</a><a id="nav_transactionisolation" class="navsublink" href="#transactionisolation" onclick="if (event.button == 0) return goTo('#transactionisolation', true); else return true;">How to Set the Transaction Isolation Level</a><a id="nav_drivercats" class="navsublink" href="#drivercats" onclick="if (event.button == 0) return goTo('#drivercats', true); else return true;">What are JDBC Driver Categories?</a><a id="nav_wheretoputstatements" class="navsublink" href="#wheretoputstatements" onclick="if (event.button == 0) return goTo('#wheretoputstatements', true); else return true;">Where to Put SQL Statements</a><a id="nav_dboverview" class="navsublink" href="#dboverview" onclick="if (event.button == 0) return goTo('#dboverview', true); else return true;">Which Database is the Right One? (Short Database Overview)</a><a id="nav_concurrency" class="navsublink" href="#concurrency" onclick="if (event.button == 0) return goTo('#concurrency', true); else return true;">How to Use JDBC in Multi-Threaded Applications</a><a id="nav_warnings" class="navsublink" href="#warnings" onclick="if (event.button == 0) return goTo('#warnings', true); else return true;">How to Read Warnings by the Driver or Database (SQLWarning)</a><a id="nav_types" class="navsublink" href="#types" onclick="if (event.button == 0) return goTo('#types', true); else return true;">How to Map Between Java Types and JDBC Types</a><a id="nav_todo" class="navsublink" href="#todo" onclick="if (event.button == 0) return goTo('#todo', true); else return true;">TODO</a><a id="nav_appservertransactions" class="navsublink" href="#appservertransactions" onclick="if (event.button == 0) return goTo('#appservertransactions', true); else return true;">How to Use Transactions in an Application Server</a><a id="nav_autokeys" class="navsublink" href="#autokeys" onclick="if (event.button == 0) return goTo('#autokeys', true); else return true;">How to Retrieve Generated Values (Auto-Generated Keys)</a><a id="nav_userdefinedtypes" class="navsublink" href="#userdefinedtypes" onclick="if (event.button == 0) return goTo('#userdefinedtypes', true); else return true;">How to Write a Custom-Mapping for User-Defined Types</a><a id="nav_distinct" class="navsublink" href="#distinct" onclick="if (event.button == 0) return goTo('#distinct', true); else return true;">How to Handle Scalar User-Defined Types (Distinct)?</a><a id="nav_structs" class="navsublink" href="#structs" onclick="if (event.button == 0) return goTo('#structs', true); else return true;">How to Read Composite Types (Structs)</a><a id="nav_nullparameters" class="navsublink" href="#nullparameters" onclick="if (event.button == 0) return goTo('#nullparameters', true); else return true;">How to Set Parameters to NULL</a><a id="nav_wrapper" class="navsublink" href="#wrapper" onclick="if (event.button == 0) return goTo('#wrapper', true); else return true;">How to Access Driver Classes When the Application Server Wraps Them</a><a id="nav_andnow" class="navseclink" href="#andnow" onclick="if (event.button == 0) return goTo('#andnow', true); else return true;">And now...?</a><a id="nav_nextsteps" class="navsublink" href="#nextsteps" onclick="if (event.button == 0) return goTo('#nextsteps', true); else return true;">Next Steps</a></div></div><div id="popups"><div id="pp-d286e619" class="tooltip">In a stand-alone application, the easiest way to connect to get a connection is using the <span class="idf">DriverManager</span> class. Unless you have a JDBC 4.0 implementation with JDBC 4.0 driver, you need to initialize the driver by loading its class. Then you can acquire a connection from the <span class="idf">DriverManager</span>, using the driver's own JDBC URL scheme.<br/> In order to use a driver, you need to know the name of its class (in pre-4.0 systems) and learn how to write a JDBC URL for it. In the later section, this is shown for several common drivers and databases.</div><div id="pp-d286e644" class="tooltip"> This line loads the driver's class so it can register itself. It is <em>not needed for JDBC 4.0 drivers</em> anymore.<br/> The name of the class to load is different for every driver, so you need to find it in the driver's documentation.</div><div id="pp-d286e660" class="tooltip">Every driver has its own URL schema for describing connections. Here, the schema for JavaDB (also known as 'Derby') is being shown. The schema always starts with "jdbc:", followed by the name of the driver and another colon. The follow driver-specific data, such as the DB name and possibly the server address.</div><div id="pp-d286e708" class="tooltip">When writing an EJB, a Servlet or any other managed bean in a JEE container, you should <em>let the container manage your database connection</em>. The container takes care of connection pooling (for performance) and usually also helps you with enterprisy-features like distributed transactions. Since JEE 5 it is usually enough to add a <span class="idf">@Resource</span> annotation to a member of an EJB or Servlet, and then make sure that the containers is properly configured. </div><div id="pp-d286e784" class="tooltip"><span class="idf">@Resource</span> tells the container that the servlet <em>requires a JDBC <span class="idf">DataSource</span> with the JNDI name 'jdbc/db'</em>. The deployer is responsible for configuring the container to provide it. The container will <em>inject the value</em> into the field after instantiation.</div><div id="pp-d286e858" class="tooltip">The easiest way to handle an unexpected problem is to throw a <span class="idf">ServletException</span>. The server will return an error page with HTTP status code 500 (internal error).</div><div id="pp-d286e961" class="tooltip">To start your database in server mode, just go to the <span class="idf">bin</span> directory of your Java DB installations and start <span class="idf">startNetworkServer</span>.</div><div id="pp-d286e1214" class="tooltip">To execute a statement, you need to <em>get a statement first</em>. Then you can use this statement to execute your SQL command.<br/> Use <span class="idf">executeUpdate</span>, as shown here, when you plan to execute statements that return a number as only result, such as an <span class="idf">UPDATE</span> statement.</div><div id="pp-d286e1287" class="tooltip">When you execute an SQL command such as <span class="idf">SELECT</span>, which returns tabular data, you need to execute it with <span class="idf">executeQuery</span>. It returns a <span class="idf">ResultSet</span> instance that allows you to iterate through the results.</div><div id="pp-d286e1425" class="tooltip">Where possible, JDBC will automatically convert values from the result set into any type of value you want. You can read almost any value type into a string. Other types can also be converted if there is a useful conversion.</div><div id="pp-d286e1510" class="tooltip">Instead of refering to columns in the <span class="idf">ResultSet</span> with names, you can also use numbers. 1 is the first column. Sometimes this can be more convenient, but it becomes unreadable pretty quickly with larger result sets.</div><div id="pp-d286e1643" class="tooltip">Parameters allow you to use '?' as placeholders in a SQL, and set them using <span class="idf">PreparedStatement</span>'s methods before execution. The main reason for this is that parameters are easier and safer than dynamically constructing SQL statements in any way. It also allows the database to cache its execution plan for the statement.</div><div id="pp-d286e1716" class="tooltip">Using <span class="idf">BigDecimal</span> for currency is a good idea, because unlike the floating point types does not have any rounding errors.</div><div id="pp-d286e1799" class="tooltip">You can reuse any statement that you created and execute it several times. This is especially useful for <span class="idf">PreparedStatement</span>'s with parameters, because <span class="idf">PreparedStatement</span> remembers any previously set parameters. It also may help the database to execute your statements, because it needs to compile and analyze it only once.</div><div id="pp-d286e1873" class="tooltip">You can execute a statement more than once. If you don't modify a parameter after an execution, the value is used for the next execution as well. In this example, the third parameter is being re-used for two executions.</div><div id="pp-d286e1959" class="tooltip">To use transactions you need to turn off the <span class="idf">Connection</span>'s auto-commit mode with <span class="idf">setAutoCommit</span>. Then every statement you issue is part of the same transaction, until you call <span class="idf">commit</span> or <span class="idf">rollback</span>, which start a new transaction.<br/> This built-in transaction mechanism can only be used for transactions within the database. Distributed transactions, over several databases, require an external transaction manager.</div><div id="pp-d286e2168" class="tooltip"> Database resources are expensive and limited. You can improve performance by closing resources manuallly, instead of waiting for the garbage collection.<br/> Closing a resource closes all constituent objects. So if you close a <span class="idf">Statement</span>, its <span class="idf">ResultSet</span>s will be closed automatically. And if you close a <span class="idf">Connection</span>, its <span class="idf">Statement</span>s and <span class="idf">ResultSet</span>s will be closed.</div><div id="pp-d286e2306" class="tooltip">When you close a statement, its current <span class="idf">ResultSet</span> will be closed as well.</div><div id="pp-d286e2369" class="tooltip"><span class="idf">PreparedStatement</span> is often faster because prepared statements make it easier for the database to re-use the results of the statement's compilation. When you execute a <span class="idf">PreparedStatement</span> once, there may be some initialization penalty in some databases though. So if your statements do not need parameters and you only execute each SQL command once, then <span class="idf">Statement</span> can (but does not have to be) faster.</div><div id="pp-d286e2527" class="tooltip">Date literals offer a database-independent way of specifying a date, time or timestamp. Without them you'd need to know each database's syntax (which often depends on the database's locale).</div><div id="pp-d286e2610" class="tooltip">JDBC's escape syntax allows you to invoke many common functions in a database-independent way. The driver will translate them into a function that the underlying database supports. Note that a JDBC driver is not required to support a function if the database does not provide a native equivalent.</div><div id="pp-d286e3470" class="tooltip">This escape gives you a database-independent way of calling stored procedures. Two syntaxes allow you to call them either with or without expected return value.</div><div id="pp-d286e3582" class="tooltip">While all databases support the wildcard characters '%' and '_' in <span class="idf">LIKE</span> clauses, there is no common way to escape them. JDBC allows you to specify an escape character at the end of the <span class="idf">LIKE</span> clause.</div><div id="pp-d286e3657" class="tooltip">For databases that support outer joins, the escape syntax gives you a database-independent way of specifying it.</div><div id="pp-d286e4858" class="tooltip"><span class="idf">getArray</span> returns an array in the JDBC type corresponding to the database's type. Here, the database type is <span class="idf">TIME</span> and the corresponding JDBC type is <span class="idf">java.sql.Time</span>.</div><div id="pp-d286e5005" class="tooltip"><a href="http://java.sun.com/javase/6/docs/api/java/sql/Connection.html#createArrayOf(java.lang.String, java.lang.Object[])" class="javadoc">createArrayOf</a> <em>requires the database's own type name</em> for the data stored in the database as first argument. In this example, it is an array of "time". For an array of strings, use "varchar" (or "varchar2" for Oracle).</div><div id="pp-d286e5169" class="tooltip">Batch updates avoid the back-and-forth between database client and server. Instead of issueing a single statement, waiting for the result and then executing the next, the server gets all statements at once. This can <em>reduce latency</em> caused by network and protocol significantly, and also avoids the protocol's overhead.<br/> Note that batch updates are <em>work best for many fast updates, but hardly accelerate a few slow updates</em>.</div><div id="pp-d286e5474" class="tooltip"><span class="idf">java.sql.Date</span> represents a <em>date without time</em>. It is a <span class="idf">java.util.Date</span> whose time is <em>always midnight</em>.<br/> If you need a date with time, use <span class="idf">java.sql.Timestamp</span>.</div><div id="pp-d286e5508" class="tooltip"><span class="idf">java.sql.Time</span> represents the <em>time of day</em>. It is a <span class="idf">java.util.Date</span> whose date is always January 1 1970. Only the time of that day is used by JDBC.</div><div id="pp-d286e5537" class="tooltip"><span class="idf">java.sql.Timestamp</span> represents the <em>time and day with nanosecond precision</em>. It extends <span class="idf">java.util.Date</span> with fractional seconds with a much higher precision than <span class="idf">java.util.Date</span>'s milliseconds.<br/> Timestamp can also be used to <em>set and retrieve <span class="idf">DATETIME</span>.</em></div><div id="pp-d286e6211" class="tooltip"><span class="idf">IOUtils.copy</span> is a method of the Apache Commons IO library, not part of Java. It copies the content of a given input stream (here: the file content) into the given output stream (here: into the blob).</div><div id="pp-d286e7209" class="tooltip"><span class="idf">VARCHAR</span> was a failed attempt to implement it, but they kept it for backward compatibility and introduced the fixed version as <span class="idf">VARCHAR2</span>. In later versions <span class="idf">VARCHAR</span> has been fixed and works like <span class="idf">VARCHAR2</span> now, but Oracle still recommends you to use <span class="idf">VARCHAR2</span>.</div><div id="pp-d286e8549" class="tooltip">This name is needed when you insert an <span class="idf">VideoEncoding</span> without reading it first. It tells the database what <em>the corresponding user-defined type</em> is. If you only read the object, you don't need to set it.<br/>Oracle requires type names to be capital letters.</div><div id="pp-d286e9076" class="tooltip">It is important here that the values must be exactly in the order they have been declared. The types must also be compatible to the JDBC types</div><div id="pp-d286e9090" class="tooltip">While Oracle is usually not case-sensitive, it is for user-defined types and requires you to use upper case (even if you defined the type with lower-case characters).</div><div id="pp-d286e1191" class="tooltip">This definition means that the database will generate a unique value for <span class="idf">id</span> automatically, if no value was given.</div><div id="pp-d286e1983" class="tooltip">Auto-commit means that every statement is automatically committed right after executing it. In order to have transactions with JDBC in a stand-alone application, you need to disable the auto-commit mode and then invoke <span class="idf">commit</span> or <span class="idf">rollback</span> expliticly. In an application server, you should let the container manage transactions.</div><div id="pp-d286e1998" class="tooltip">When you execute a writing statement (such as an <span class="idf">UPDATE</span> or <span class="idf">INSERT</span>) in a transaction, the database will not be permanently modified yet. <em>Only after calling <span class="idf">commit</span></em> the changes will be visible to other transactions. Alternatively you can also call <span class="idf">rollback</span> and all changes will be forgotten.<br/> Transactions are important, for example, when you have a table representing bank accounts, and you transfer money from one account to another. You need to deduct the amount from the first account and add it to the second. This can only be done using two <span class="idf">UPDATE</span> statements. But it must never happen that only the first statement succeeds and then the second fails - otherwise the money would just disappear. So you put it in a transaction, and then it is guaranteed that either both statements are executed, or none at all.</div><div id="pp-d286e6816" class="tooltip">Changes by other transactions <em>can be seen before they have been committed</em>.<br/> This is a violation of one of the most important transaction principles, but may allow many optimizations in the database. The only 'transaction-like' behaviour that remains with such a low transaction level is the rollback.</div><div id="pp-d286e6828" class="tooltip">When a query is executed for the second time in the same transaction, and another transaction modifies the result, the <em>second query may return a different result</em> than the first one. </div><div id="pp-d286e6838" class="tooltip">If you execute a query for a second time and you get additional rows because of another transaction's commit, you have a phantom read. </div><div id="pp-d286e7131" class="tooltip">'Embedded' in the context of databases usually means that the database is included as part of a product, often in desktop applications. Unlike server applications, the user does not even need to know that a database is being used, as it runs in the application's process and stores its data as regular files.</div><div id="pp-d286e7137" class="tooltip">"Server" means that the database runs in its own process or even on a separate machine, allowing clients on other machines to access it.</div><div id="pp-d286e8469" class="tooltip">A scalar types consists only of a single value, like a single string or a single number. Types that consist of several scalar types are called composite types.</div><div id="pp-d286e9003" class="tooltip">A composite types is a type that consists of several other basic data types (such as numbers and strings), similar to a <span class="idf">struct</span> in C or a class with only fields (and no methods) in Java. In SQL databases composite types are usually user-defined.</div><div id="pp-d286e102" class="topic"><div class="topicPara"><span class="topicHead">JPA</span><span class="topicAbbreviation"> - Java Persistence API</span></div><div class="topicPara">JPA is a high-level API for accessing relational databases. It is mostly known
  		for mapping between Java objects and database tables.</div><div class="topicPara"><span class="topicLinkHead">Wikipedia: </span><a href="http://en.wikipedia.org/wiki/Java_Persistence_API">Java Persistence API</a></div><div class="topicPara"><span class="topicLinkHead">Specification: </span><a href="http://jcp.org/aboutJava/communityprocess/final/jsr220/index.html">JPA 1.0</a> (JEE 5), <a href="http://jcp.org/aboutJava/communityprocess/final/jsr317/index.html">JPA 2.0</a> (JEE 6)<br/><span class="topicLinkHead">API: </span><a href="http://java.sun.com/javaee/5/docs/api/javax/persistence/package-summary.html">JPA 1.0</a> (JEE 5), <a href="http://java.sun.com/javaee/6/docs/api/javax/persistence/package-summary.html">JPA 2.0</a> (JEE 6)<br/><span class="topicLinkHead">JSR: </span><a href="http://jcp.org/en/jsr/detail?id=220">JSR-220</a>, <a href="http://jcp.org/en/jsr/detail?id=317">JSR-317</a></div></div><div id="ttCloseBar" class="closeBar"><a href="#" onclick="return tlClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div><div id="topicCloseBar" class="closeBar"><a href="#" onclick="return tpcClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div></div></body></html>