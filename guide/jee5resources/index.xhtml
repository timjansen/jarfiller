<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns="http://www.w3.org/1999/xhtml" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:page="http://tjansen.de/refPage" xmlns:i="http://tjansen.de/internal"><head><title>JEE 5 Resource and JNDI Guide</title><meta http-equiv="X-UA-Compatible" content="chrome=1"/><meta http-equiv="content-language" content="en"/><link rel="shortcut icon" href="../../images/favicon.png" type="image/png"/><link rel="stylesheet" type="text/css" href="../../style/style.css"/><script type="text/javascript">
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-6791190-2']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ga);
})();
</script><script type="text/javascript" src="../../js/all.js"/></head><body id="body"><div id="visibleContent"><div id="top"><a href="/"><img src="../../images/titlebar.png" alt="Jarfiller.com"/></a></div><div id="titleArea"><h1>JEE 5 Resource and JNDI Guide</h1><p id="titleIntro"/></div><div id="main"><div id="bodycolumn"><div id="options">Options: <a href="#" onclick="return navToggle();">Table of Content</a>, <a href="overview.xhtml">Multi-Page Version</a></div><h2 id="sec_overview" class="sectionHead"><a name="overview">Overview</a></h2><div class="subSecRow1" id="sec_intro"><div class="subSecHead" id="sechd_intro"><a name="intro">Intro</a></div><div class="subSecContent" id="seccnt_intro"><p class="subSecExplanation">Applications running in a JEE container, such as an <a href="#" id="tl-d754e45" class="dottedTooltip" onclick="return tlClick('tl-d754e45','pp-d754e48');" onmouseover="return tlOver('tl-d754e45','pp-d754e48');" onmouseout="return tlOut('tl-d754e45','pp-d754e48');">EJB application server</a> or a pure <a href="#" id="tl-d754e51" class="dottedTooltip" onclick="return tlClick('tl-d754e51','pp-d754e54');" onmouseover="return tlOver('tl-d754e51','pp-d754e54');" onmouseout="return tlOut('tl-d754e51','pp-d754e54');">web container</a>, can be configured using JNDI. JNDI is the API used to <em>look up objects by name</em> from the container's internal directory service, and is also used for the <em>resource injection</em> mechanisms introduced with JEE 5.<br/> An application running in a JEE container needs to <em>declare which objects it expects</em> from the JNDI namespace. The application's <a href="#" id="tl-d754e72" class="dottedTooltip" onclick="return tlClick('tl-d754e72','pp-d754e75');" onmouseover="return tlOver('tl-d754e72','pp-d754e75');" onmouseout="return tlOut('tl-d754e72','pp-d754e75');">deployer</a> is then responsible for configuring <em>the container to provide those objects</em>. </p></div></div><div class="subSecRow2" id="sec_whentouse"><div class="subSecHead" id="sechd_whentouse"><a name="whentouse">When to use</a></div><div class="subSecContent" id="seccnt_whentouse"><p class="subSecExplanation">Use JNDI Resources when your web or EJB application...</p><ul class="subSecList"><li>needs to <em>access other systems</em> such as databases or message queues</li><li>your web application should be <em>configured by the deployer</em></li></ul></div></div><div class="subSecRow1" id="sec_requirements"><div class="subSecHead" id="sechd_requirements"><a name="requirements">Requirements</a></div><div class="subSecContent" id="seccnt_requirements"><p class="subSecExplanation">This document has been written for JEE 5 (and thus Servlet 2.5 and EJB 3.0). Older versions do not have annotations, but beside that they are mostly identical.</p></div></div><h2 id="sec_resourcelookup" class="sectionHead"><a name="resourcelookup">Resource Lookup</a></h2><div class="subSecRow2" id="sec_basiclookup"><div class="subSecHead" id="sechd_basiclookup"><a name="basiclookup">Basic Lookup</a><br/>(<a href="#" id="tl-d754e121" class="dottedTooltip" onclick="return tlClick('tl-d754e121','pp-d754e126');" onmouseover="return tlOver('tl-d754e121','pp-d754e126');" onmouseout="return tlOut('tl-d754e121','pp-d754e126');">more</a>)
		</div><div class="subSecContent" id="seccnt_basiclookup"><p class="subSecExplanation">You only <em>need a tiny subset of JNDI</em> for reading resources. The rest is needed for tasks like accessing <a href="http://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol">LDAP</a> directory services.<br/> </p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/5/docs/api/java/lang/Context.html" class="javadoc">Context</a> ctx = new <a href="http://java.sun.com/javase/5/docs/api/java/lang/InitialContext.html" class="javadoc">InitialContext</a>();  <span class="cmt">// default context (<a href="#" id="tl-d754e157" class="dottedTooltip" onclick="return tlClick('tl-d754e157','pp-d754e157');" onmouseover="return tlOver('tl-d754e157','pp-d754e157');" onmouseout="return tlOut('tl-d754e157','pp-d754e157');">more</a>)</span>
MyBean bean = (MyBean) ctx.<a href="http://java.sun.com/javase/5/docs/api/java/lang/lookup.html" class="javadoc">lookup</a>("<em>java:comp/env</em>/beans/MyBean");
</code></pre><p class="subSecExplanation">Note that the <a href="http://java.sun.com/javase/5/docs/api/java/lang/lookup.html" class="javadoc">lookup</a> method <em>creates a new instance</em> for every lookup in all but a few special cases (<a href="#" id="tl-d754e184" class="dottedTooltip" onclick="return tlClick('tl-d754e184','pp-d754e184');" onmouseover="return tlOver('tl-d754e184','pp-d754e184');" onmouseout="return tlOut('tl-d754e184','pp-d754e184');">more</a>).</p></div></div><div class="subSecRow1" id="sec_context"><div class="subSecHead" id="sechd_context"><a name="context">Context</a><br/>(<a href="#" id="tl-d754e193" class="dottedTooltip" onclick="return tlClick('tl-d754e193','pp-d754e198');" onmouseover="return tlOver('tl-d754e193','pp-d754e198');" onmouseout="return tlOut('tl-d754e193','pp-d754e198');">more</a>)
		</div><div class="subSecContent" id="seccnt_context"><p class="subSecExplanation">A <em><a href="http://java.sun.com/javase/5/docs/api/java/lang/Context.html" class="javadoc">Context</a> is like a directory</em> in a file system. The <a href="http://java.sun.com/javase/5/docs/api/java/lang/InitialContext.html" class="javadoc">InitialContext</a> is the root directory. The <em><a href="http://java.sun.com/javase/5/docs/api/java/lang/Context.html" class="javadoc">Context</a> names are separated by slashes</em> ("/") to build a path.</p><pre class="subSecCode"><code><a href="http://java.sun.com/javase/5/docs/api/java/lang/Context.html" class="javadoc">Context</a> ctx = new <a href="http://java.sun.com/javase/5/docs/api/java/lang/InitialContext.html" class="javadoc">InitialContext</a>();
<a href="http://java.sun.com/javase/5/docs/api/java/lang/Context.html" class="javadoc">Context</a> env = (<a href="http://java.sun.com/javase/5/docs/api/java/lang/Context.html" class="javadoc">Context</a>) ctx.<a href="http://java.sun.com/javase/5/docs/api/java/lang/lookup.html" class="javadoc">lookup</a>("<em>java:comp/env</em>");    <span class="cmt">// get environment context (<a href="#" id="tl-d754e250" class="dottedTooltip" onclick="return tlClick('tl-d754e250','pp-d754e250');" onmouseover="return tlOver('tl-d754e250','pp-d754e250');" onmouseout="return tlOut('tl-d754e250','pp-d754e250');">more</a>)</span>
MyBean bean1 = (MyBean) env.<a href="http://java.sun.com/javase/5/docs/api/java/lang/lookup.html" class="javadoc">lookup</a>("beans/MyBean1");    <span class="cmt">// get 'java:comp/env/beans/MyBean1'</span>
MyBean bean2 = (MyBean) env.<a href="http://java.sun.com/javase/5/docs/api/java/lang/lookup.html" class="javadoc">lookup</a>("beans/MyBean2");    <span class="cmt">// get 'java:comp/env/beans/MyBean2'</span>
</code></pre></div></div><div class="subSecRow2" id="sec_javacompenv"><div class="subSecHead" id="sechd_javacompenv"><a name="javacompenv">java:comp/env</a></div><div class="subSecContent" id="seccnt_javacompenv"><h4 class="subSecMiniHeadline">What is 'java:comp/env'?</h4><p class="subSecExplanation"><span class="idf">java:comp/env</span> is called the <em>environment naming context (ENC)</em>. It is a <em>private context</em> only accessible by the <a href="#" id="tl-d754e297" class="dottedTooltip" onclick="return tlClick('tl-d754e297','pp-d754e300');" onmouseover="return tlOver('tl-d754e297','pp-d754e300');" onmouseout="return tlOut('tl-d754e297','pp-d754e300');">application component</a>. The JEE container puts all references for the <a href="#" id="tl-d754e305" class="dottedTooltip" onclick="return tlClick('tl-d754e305','pp-d754e300');" onmouseover="return tlOver('tl-d754e305','pp-d754e300');" onmouseout="return tlOut('tl-d754e305','pp-d754e300');">application component</a> in this context. Even though every <a href="#" id="tl-d754e307" class="dottedTooltip" onclick="return tlClick('tl-d754e307','pp-d754e300');" onmouseover="return tlOver('tl-d754e307','pp-d754e300');" onmouseout="return tlOut('tl-d754e307','pp-d754e300');">application component</a> uses the same name (<span class="idf">java:comp/env</span>) to access it, <em>every <a href="#" id="tl-d754e315" class="dottedTooltip" onclick="return tlClick('tl-d754e315','pp-d754e300');" onmouseover="return tlOver('tl-d754e315','pp-d754e300');" onmouseout="return tlOut('tl-d754e315','pp-d754e300');">application component</a> actually has its own local environment</em> and can't see the entries of other components.</p></div></div><div id="colla_ejbcontextlookup" class="subSecRow1"><div class="subSecHead"><a name="ejbcontextlookup"/></div><div class="collapsedSubSecSummary"><div><a href="#" onclick="return showCollapsableSection('ejbcontextlookup');">Simple Lookup with EJBContext.lookup</a></div></div></div><div class="subSecRow1" id="sec_ejbcontextlookup" style="display: none"><div class="subSecHead" id="sechd_ejbcontextlookup"><a name="ejbcontextlookup"/></div><div class="subSecContent" id="seccnt_ejbcontextlookup"><div class="subSecSummaryClick"><a href="#" onclick="return hideCollapsableSection('ejbcontextlookup');">Simple Lookup with EJBContext.lookup</a></div><p class="subSecExplanation">In EJBs you can easily look up objects in <span class="idf">java:comp/env</span> using <a href="http://java.sun.com/javase/5/docs/api/java/lang/EJBContext.html" class="javadoc">EJBContext</a> and its sub-interfaces (like <a href="http://java.sun.com/javase/5/docs/api/java/lang/SessionContext.html" class="javadoc">SessionContext</a>):</p><pre class="subSecCode"><code>import javax.ejb.*;
import javax.annotation.*;

<a href="http://java.sun.com/javase/5/docs/api/javax/annotation/Stateless.html" class="javadoc">@Stateless</a>
public class SomeBean implements SomeRemote {

    <a href="http://java.sun.com/javase/5/docs/api/javax/annotation/Resource.html" class="javadoc">@Resource</a>
    private <a href="http://java.sun.com/javase/5/docs/api/java/lang/SessionContext.html" class="javadoc">SessionContext</a> sctx;                                 <span class="cmt">// <em>inject <span class="idf">SessionContext</span></em></span>

    public void hello() {
        MyBean bean1 = (MyBean) <em>sctx.<a href="http://java.sun.com/javase/5/docs/api/java/lang/lookup.html" class="javadoc">lookup</a>("beans/MyBean1")</em>;    <span class="cmt">// get 'java:comp/env/beans/MyBean1'</span>
    }
}
</code></pre></div></div><div class="subSecRow2" id="sec_globalnamespace"><div class="subSecHead" id="sechd_globalnamespace"><a name="globalnamespace">Global Namespace</a></div><div class="subSecContent" id="seccnt_globalnamespace"><h4 class="subSecMiniHeadline">What is the Global JNDI Namespace?</h4><p class="subSecExplanation">Practically every application server has a 'global namespace' that <em>contains all resources</em> and looks the same to all <a href="#" id="tl-d754e417" class="dottedTooltip" onclick="return tlClick('tl-d754e417','pp-d754e300');" onmouseover="return tlOver('tl-d754e417','pp-d754e300');" onmouseout="return tlOut('tl-d754e417','pp-d754e300');">application components</a>. However, this namespace is <em>not standardized</em> and should be avoided if you want to write portable applications.<br/> Usually you can access the namespace directly from initial context (that is you don't select a sub-context such as <span class="idf">java:comp/env</span>). With resource injection, you can often <em>access it with the <a href="http://java.sun.com/javase/5/docs/api/javax/annotation/Resource.html#mappedName()" class="javadoc">mappedName</a> property of <a href="http://java.sun.com/javase/5/docs/api/javax/annotation/Resource.html" class="javadoc">@Resource</a></em>.<br/> Note that the global namespace is <em>not the same as the <span class="idf">java:global/</span> namespace</em> introduced with JEE 6. <span class="idf">java:global/</span> only contains beans, but no other resources.</p></div></div><div class="subSecRow1" id="sec_resourceinjection"><div class="subSecHead" id="sechd_resourceinjection"><a name="resourceinjection">Resource Injection</a></div><div class="subSecContent" id="seccnt_resourceinjection"><p class="subSecExplanation">Using the <a href="http://java.sun.com/javase/5/docs/api/javax/annotation/Resource.html" class="javadoc">@Resource</a> annotation, you can declare that the <a href="#" id="tl-d754e464" class="dottedTooltip" onclick="return tlClick('tl-d754e464','pp-');" onmouseover="return tlOver('tl-d754e464','pp-');" onmouseout="return tlOut('tl-d754e464','pp-');">container</a> should <a href="#" id="tl-d754e471" class="dottedTooltip" onclick="return tlClick('tl-d754e471','pp-');" onmouseover="return tlOver('tl-d754e471','pp-');" onmouseout="return tlOut('tl-d754e471','pp-');">inject</a> resources into your object's properties or fields.<br/> Rules:</p><ul class="subSecList"><li>You can <em>only inject into container-managed classes</em> such as EJBs and Servlets. Injection does not work for regular classes.</li><li>You can inject <em>all resource types supported by the container</em> (<a href="#" id="tl-d754e497" class="dottedTooltip" onclick="return tlClick('tl-d754e497','pp-d754e497');" onmouseover="return tlOver('tl-d754e497','pp-d754e497');" onmouseout="return tlOut('tl-d754e497','pp-d754e497');">more</a>).</li><li><em>For EJBs the <a href="http://java.sun.com/javase/5/docs/api/javax/annotation/EJB.html" class="javadoc">@EJB</a> annotation should be used</em> instead of <a href="http://java.sun.com/javase/5/docs/api/javax/annotation/Resource.html" class="javadoc">@Resource</a>.</li><li><a href="http://java.sun.com/javase/5/docs/api/javax/annotation/Resource.html" class="javadoc">@Resource</a> also declares a resource dependence - that means you can also <em>look up the resource using a <a href="http://java.sun.com/javase/5/docs/api/java/lang/InitialContext.html" class="javadoc">InitialContext</a></em>.</li></ul><h4 class="subSecMiniHeadline">Field-based Injection</h4><pre class="subSecCode"><code>package com.jarfiller.example;

<a href="http://java.sun.com/javase/5/docs/api/javax/annotation/Stateless.html" class="javadoc">@Stateless</a>
public class MyBean extends MyBeanLocal {

    <em><a href="http://java.sun.com/javase/5/docs/api/javax/annotation/Resource.html" class="javadoc">@Resource</a>(<a href="http://java.sun.com/javase/5/docs/api/java/lang/name.html" class="javadoc">name</a>="jdbc/MyDataSource")</em>   <span class="cmt">// name in ENC (<a href="#" id="tl-d754e567" class="dottedTooltip" onclick="return tlClick('tl-d754e567','pp-d754e567');" onmouseover="return tlOver('tl-d754e567','pp-d754e567');" onmouseout="return tlOut('tl-d754e567','pp-d754e567');">more</a>)</span>
    private <a href="http://java.sun.com/javase/5/docs/api/java/lang/DataSource.html" class="javadoc">DataSource</a> dataSourceA;

    <em><a href="http://java.sun.com/javase/5/docs/api/javax/annotation/Resource.html" class="javadoc">@Resource</a></em>                             <span class="cmt">// <em>default name</em> "com.jarfiller.example.MyBean/dataSourceB" (<a href="#" id="tl-d754e587" class="dottedTooltip" onclick="return tlClick('tl-d754e587','pp-d754e587');" onmouseover="return tlOver('tl-d754e587','pp-d754e587');" onmouseout="return tlOut('tl-d754e587','pp-d754e587');">more</a>)</span>
    private <a href="http://java.sun.com/javase/5/docs/api/java/lang/DataSource.html" class="javadoc">DataSource</a> dataSourceB;

    <span class="abstract">...</span>
}
</code></pre><h4 class="subSecMiniHeadline">Property-based Injection</h4><pre class="subSecCode"><code>package com.jarfiller.example;

<a href="http://java.sun.com/javase/5/docs/api/javax/annotation/Stateless.html" class="javadoc">@Stateless</a>
public class MyBean extends MyBeanLocal {

    private <a href="http://java.sun.com/javase/5/docs/api/java/lang/DataSource.html" class="javadoc">DataSource</a> dataSourceA;
    <em><a href="http://java.sun.com/javase/5/docs/api/javax/annotation/Resource.html" class="javadoc">@Resource</a>(<a href="http://java.sun.com/javase/5/docs/api/java/lang/name.html" class="javadoc">name</a>="jdbc/MyDataSource")</em>   <span class="cmt">// name in ENC (<a href="#" id="tl-d754e646" class="dottedTooltip" onclick="return tlClick('tl-d754e646','pp-d754e646');" onmouseover="return tlOver('tl-d754e646','pp-d754e646');" onmouseout="return tlOut('tl-d754e646','pp-d754e646');">more</a>)</span>
    private void setDataSourceA(<a href="http://java.sun.com/javase/5/docs/api/java/lang/DataSource.html" class="javadoc">DataSource</a> ds) {
        dataSourceA = ds;
    }
    private <a href="http://java.sun.com/javase/5/docs/api/java/lang/DataSource.html" class="javadoc">DataSource</a> getDataSourceA() {
        return dataSourceA;
    }

    private <a href="http://java.sun.com/javase/5/docs/api/java/lang/DataSource.html" class="javadoc">DataSource</a> dataSourceB;
    <em><a href="http://java.sun.com/javase/5/docs/api/javax/annotation/Resource.html" class="javadoc">@Resource</a></em>                             <span class="cmt">// <em>default name</em> "com.jarfiller.example.MyBean/dataSourceB" (<a href="#" id="tl-d754e691" class="dottedTooltip" onclick="return tlClick('tl-d754e691','pp-d754e691');" onmouseover="return tlOver('tl-d754e691','pp-d754e691');" onmouseout="return tlOut('tl-d754e691','pp-d754e691');">more</a>)</span>
    private void setDataSourceB(<a href="http://java.sun.com/javase/5/docs/api/java/lang/DataSource.html" class="javadoc">DataSource</a> ds) {
        dataSourceB = ds;
    }
    private <a href="http://java.sun.com/javase/5/docs/api/java/lang/DataSource.html" class="javadoc">DataSource</a> getDataSourceB() {
        return dataSourceB;
    }

    <span class="abstract">...</span>
}
</code></pre></div></div></div><div id="sidecolumn">
  	  	<div><h3>Useful Links</h3><div class="sidecolumnSubTitleLine"/>
  		</div>
  </div></div></div><div id="footer"><div id="footer-content"><div id="footer-left"><div class="footerLine"><a href="/">Home</a> - <a href="/about">About Jarfiller</a> - <a href="/imprint.xhtml">Imprint</a></div><div class="footerLine">Please send feedback and corrections to <a href="mailto:tim@tjansen.de">tim@<span style="display: none">got you</span>tjansen.de</a>.</div><div class="footerLine"><a href="http://www.twitter.com/timjansen">Follow</a> me on Twitter.</div><div class="copyrightLine">© 2010 Tim Jansen; content licensed under <a href="http://creativecommons.org/licenses/by/3.0/us/">cc-by</a>; example source code is public domain
				</div></div><div id="footer-right"><a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/"><img alt="Creative Commons License" style="border-width:0" src="../../images/ext/cc-by-88x31.png"/></a></div></div></div><div id="navbar" onclick="return navToggle();" onmouseover="document.getElementById('navbar').className='mouseover';" onmouseout="document.getElementById('navbar').className='';"/><div id="navcontainer"><div id="navlinks"><div id="navclosebar"><a href="#" onclick="return navClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div><div id="navpositionbar" class="navpositionbar"/><h2 id="navtitle">JEE 5 Resource and JNDI Guide</h2><a id="nav_overview" class="navseclink" href="#overview" onclick="if (event.button == 0) return goTo('#overview', true); else return true;">Overview</a><a id="nav_intro" class="navsublink" href="#intro" onclick="if (event.button == 0) return goTo('#intro', true); else return true;">Intro</a><a id="nav_whentouse" class="navsublink" href="#whentouse" onclick="if (event.button == 0) return goTo('#whentouse', true); else return true;">When to use</a><a id="nav_requirements" class="navsublink" href="#requirements" onclick="if (event.button == 0) return goTo('#requirements', true); else return true;">Requirements</a><a id="nav_resourcelookup" class="navseclink" href="#resourcelookup" onclick="if (event.button == 0) return goTo('#resourcelookup', true); else return true;">Resource Lookup</a><a id="nav_basiclookup" class="navsublink" href="#basiclookup" onclick="if (event.button == 0) return goTo('#basiclookup', true); else return true;">Basic Lookup</a><a id="nav_context" class="navsublink" href="#context" onclick="if (event.button == 0) return goTo('#context', true); else return true;">Context</a><a id="nav_javacompenv" class="navsublink" href="#javacompenv" onclick="if (event.button == 0) return goTo('#javacompenv', true); else return true;">java:comp/env</a><a id="nav_ejbcontextlookup" class="navsublink" href="#ejbcontextlookup" onclick="if (event.button == 0) return goTo('#ejbcontextlookup', true); else return true;">Simple Lookup with EJBContext.lookup</a><a id="nav_globalnamespace" class="navsublink" href="#globalnamespace" onclick="if (event.button == 0) return goTo('#globalnamespace', true); else return true;">Global Namespace</a><a id="nav_resourceinjection" class="navsublink" href="#resourceinjection" onclick="if (event.button == 0) return goTo('#resourceinjection', true); else return true;">Resource Injection</a></div></div><div id="popups"><div id="pp-d754e126" class="tooltip">Getting a resource from a container is easy: create a new <span class="idf">InitialContext</span> object, and use the <span class="idf">lookup</span> method to retrieve it by name.</div><div id="pp-d754e157" class="tooltip">The empty <span class="idf">InitialContext</span> constructor provides the default context. In a JEE container <em>this is the context created by the container</em> for you. If you would need to connect to something else, you would need to use one of the other constructors.</div><div id="pp-d754e184" class="tooltip"><span class="idf">lookup</span> creates new instances of the object, except in the following cases:<br/> 1. The object is immutable (strings, numbers) 2. The object is a singleton (designed so that there is only one instance) 3. A special name is looked up which is defined to return always the same object</div><div id="pp-d754e198" class="tooltip">In JNDI, you always look up objects from <span class="idf">Context</span>s. The first context you get is the <a href="http://java.sun.com/javase/5/docs/api/java/lang/InitialContext.html" class="javadoc">InitialContext</a>.<br/> Contexts can be nested. Every context can contain either objects or more contexts. The JNDI name represents these nested contexts by separating their names with slashes ("/").</div><div id="pp-d754e250" class="tooltip"><span class="idf">java:comp/env</span> is the context where the container stores all references for an application. It <em>only contains the application's resources</em>, but not those of other applications - even if they run on the same server. Thus this is also called the <em>local context</em>.</div><div id="pp-d754e497" class="tooltip">This typically includes Strings, numbers, beans, JDBC <a href="http://java.sun.com/javase/5/docs/api/java/lang/DataSource.html" class="javadoc">DataSource</a>s, JAX-WS <a href="http://java.sun.com/javase/5/docs/api/java/lang/Service.html" class="javadoc">Service</a> JMS <a href="http://java.sun.com/javase/5/docs/api/java/lang/Queues.html" class="javadoc">Queues</a>s, and JMS <a href="http://java.sun.com/javase/5/docs/api/java/lang/ConnectionFactory.html" class="javadoc">ConnectionFactory</a> objects</div><div id="pp-d754e567" class="tooltip"/><div id="pp-d754e587" class="tooltip"/><div id="pp-d754e646" class="tooltip"/><div id="pp-d754e691" class="tooltip"/><div id="pp-d754e48" class="tooltip">Popular JEE application servers include JBoss Application Server, Glassfish Application Server, Resin, Websphere Application Server and the WebLogic application server.</div><div id="pp-d754e54" class="tooltip">Popular web container without EJB capabilities include Apache Tomcat and Jetty.</div><div id="pp-d754e75" class="tooltip">The deployer is the person who installs the application on the server. During development this is usually the developer, but in production environments it may also be a system administrator.</div><div id="pp-d754e300" class="tooltip">In pure web application, the 'application component' is the whole WAR, and all contained servlets and JSPs share the environment.<br/> In an enterprise application or EAR, every WAR and every EJB Jar is an 'application component' of its own and can not access the environment of the other application components.</div><div id="ttCloseBar" class="closeBar"><a href="#" onclick="return tlClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div><div id="topicCloseBar" class="closeBar"><a href="#" onclick="return tpcClose();"><img src="../../images/close.png" height="16" width="16" alt="close"/></a></div></div></body></html>